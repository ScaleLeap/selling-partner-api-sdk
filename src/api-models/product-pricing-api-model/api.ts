/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ASINIdentifier
 */
export interface ASINIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof ASINIdentifier
     */
    MarketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ASINIdentifier
     */
    ASIN: string;
}
/**
 * 
 * @export
 * @interface BatchOffersRequestParams
 */
export interface BatchOffersRequestParams {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof BatchOffersRequestParams
     */
    MarketplaceId: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof BatchOffersRequestParams
     */
    ItemCondition: ItemCondition;
    /**
     * 
     * @type {CustomerType}
     * @memberof BatchOffersRequestParams
     */
    CustomerType?: CustomerType;
}
/**
 * 
 * @export
 * @interface BatchOffersResponse
 */
export interface BatchOffersResponse {
    /**
     * 
     * @type {HttpResponseHeaders}
     * @memberof BatchOffersResponse
     */
    headers?: HttpResponseHeaders;
    /**
     * 
     * @type {GetOffersHttpStatusLine}
     * @memberof BatchOffersResponse
     */
    status?: GetOffersHttpStatusLine;
    /**
     * 
     * @type {GetOffersResponse}
     * @memberof BatchOffersResponse
     */
    body: GetOffersResponse;
}
/**
 * Common properties of batch requests against individual APIs.
 * @export
 * @interface BatchRequest
 */
export interface BatchRequest {
    /**
     * The resource path of the operation you are calling in batch without any query parameters.  If you are calling `getItemOffersBatch`, supply the path of `getItemOffers`.  **Example:** `/products/pricing/v0/items/B000P6Q7MY/offers`  If you are calling `getListingOffersBatch`, supply the path of `getListingOffers`.  **Example:** `/products/pricing/v0/listings/B000P6Q7MY/offers`
     * @type {string}
     * @memberof BatchRequest
     */
    uri: string;
    /**
     * 
     * @type {HttpMethod}
     * @memberof BatchRequest
     */
    method: HttpMethod;
    /**
     * A mapping of additional HTTP headers to send/receive for the individual batch request.
     * @type {{ [key: string]: string; }}
     * @memberof BatchRequest
     */
    headers?: { [key: string]: string; };
}
/**
 * 
 * @export
 * @interface BuyBoxPriceType
 */
export interface BuyBoxPriceType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof BuyBoxPriceType
     */
    condition: string;
    /**
     * 
     * @type {OfferCustomerType}
     * @memberof BuyBoxPriceType
     */
    offerType?: OfferCustomerType;
    /**
     * Indicates at what quantity this price becomes active.
     * @type {number}
     * @memberof BuyBoxPriceType
     */
    quantityTier?: number;
    /**
     * 
     * @type {QuantityDiscountType}
     * @memberof BuyBoxPriceType
     */
    quantityDiscountType?: QuantityDiscountType;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    LandedPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    ListingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    Shipping: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof BuyBoxPriceType
     */
    Points?: Points;
    /**
     * The seller identifier for the offer.
     * @type {string}
     * @memberof BuyBoxPriceType
     */
    sellerId?: string;
}
/**
 * 
 * @export
 * @interface CompetitivePriceType
 */
export interface CompetitivePriceType {
    /**
     * The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    CompetitivePriceId: string;
    /**
     * 
     * @type {PriceType}
     * @memberof CompetitivePriceType
     */
    Price: PriceType;
    /**
     * Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    condition?: string;
    /**
     * Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    subcondition?: string;
    /**
     * 
     * @type {OfferCustomerType}
     * @memberof CompetitivePriceType
     */
    offerType?: OfferCustomerType;
    /**
     * Indicates at what quantity this price becomes active.
     * @type {number}
     * @memberof CompetitivePriceType
     */
    quantityTier?: number;
    /**
     * 
     * @type {QuantityDiscountType}
     * @memberof CompetitivePriceType
     */
    quantityDiscountType?: QuantityDiscountType;
    /**
     * The seller identifier for the offer.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    sellerId?: string;
    /**
     *  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.
     * @type {boolean}
     * @memberof CompetitivePriceType
     */
    belongsToRequester?: boolean;
}
/**
 * Competitive pricing information for the item.
 * @export
 * @interface CompetitivePricingType
 */
export interface CompetitivePricingType {
    /**
     * A list of competitive pricing information.
     * @type {Array<CompetitivePriceType>}
     * @memberof CompetitivePricingType
     */
    CompetitivePrices: Array<CompetitivePriceType>;
    /**
     * The number of active offer listings for the item that was submitted. The listing count is returned by condition, one for each listing condition value that is returned.
     * @type {Array<OfferListingCountType>}
     * @memberof CompetitivePricingType
     */
    NumberOfOfferListings: Array<OfferListingCountType>;
    /**
     * 
     * @type {MoneyType}
     * @memberof CompetitivePricingType
     */
    TradeInValue?: MoneyType;
}
/**
 * Indicates the condition of the item. Possible values: New, Used, Collectible, Refurbished, Club.
 * @export
 * @enum {string}
 */
export enum ConditionType {
    New = 'New',
    Used = 'Used',
    Collectible = 'Collectible',
    Refurbished = 'Refurbished',
    Club = 'Club'
}

/**
 * Indicates whether to request Consumer or Business offers. Default is Consumer.
 * @export
 * @enum {string}
 */
export enum CustomerType {
    Consumer = 'Consumer',
    Business = 'Business'
}

/**
 * The time range in which an item will likely be shipped once an order has been placed.
 * @export
 * @interface DetailedShippingTimeType
 */
export interface DetailedShippingTimeType {
    /**
     * The minimum time, in hours, that the item will likely be shipped after the order has been placed.
     * @type {number}
     * @memberof DetailedShippingTimeType
     */
    minimumHours?: number;
    /**
     * The maximum time, in hours, that the item will likely be shipped after the order has been placed.
     * @type {number}
     * @memberof DetailedShippingTimeType
     */
    maximumHours?: number;
    /**
     * The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.
     * @type {string}
     * @memberof DetailedShippingTimeType
     */
    availableDate?: string;
    /**
     * Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
     * @type {string}
     * @memberof DetailedShippingTimeType
     */
    availabilityType?: DetailedShippingTimeTypeAvailabilityTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DetailedShippingTimeTypeAvailabilityTypeEnum {
    Now = 'NOW',
    FutureWithoutDate = 'FUTURE_WITHOUT_DATE',
    FutureWithDate = 'FUTURE_WITH_DATE'
}

/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof Errors
     */
    errors: Array<Error>;
}
/**
 * Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
 * @export
 * @enum {string}
 */
export enum FulfillmentChannelType {
    Amazon = 'Amazon',
    Merchant = 'Merchant'
}

/**
 * The request associated with the `getItemOffersBatch` API call.
 * @export
 * @interface GetItemOffersBatchRequest
 */
export interface GetItemOffersBatchRequest {
    /**
     * A list of `getListingOffers` batched requests to run.
     * @type {Array<ItemOffersRequest>}
     * @memberof GetItemOffersBatchRequest
     */
    requests?: Array<ItemOffersRequest>;
}
/**
 * The response associated with the `getItemOffersBatch` API call.
 * @export
 * @interface GetItemOffersBatchResponse
 */
export interface GetItemOffersBatchResponse {
    /**
     * A list of `getItemOffers` batched responses.
     * @type {Array<ItemOffersResponse>}
     * @memberof GetItemOffersBatchResponse
     */
    responses?: Array<ItemOffersResponse>;
}
/**
 * The request associated with the `getListingOffersBatch` API call.
 * @export
 * @interface GetListingOffersBatchRequest
 */
export interface GetListingOffersBatchRequest {
    /**
     * A list of `getListingOffers` batched requests to run.
     * @type {Array<ListingOffersRequest>}
     * @memberof GetListingOffersBatchRequest
     */
    requests?: Array<ListingOffersRequest>;
}
/**
 * The response associated with the `getListingOffersBatch` API call.
 * @export
 * @interface GetListingOffersBatchResponse
 */
export interface GetListingOffersBatchResponse {
    /**
     * A list of `getListingOffers` batched responses.
     * @type {Array<ListingOffersResponse>}
     * @memberof GetListingOffersBatchResponse
     */
    responses?: Array<ListingOffersResponse>;
}
/**
 * The HTTP status line associated with the response.  For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html).
 * @export
 * @interface GetOffersHttpStatusLine
 */
export interface GetOffersHttpStatusLine {
    /**
     * The HTTP response Status Code.
     * @type {number}
     * @memberof GetOffersHttpStatusLine
     */
    statusCode?: number;
    /**
     * The HTTP response Reason-Phase.
     * @type {string}
     * @memberof GetOffersHttpStatusLine
     */
    reasonPhrase?: string;
}
/**
 * The response schema for the `getListingOffers` and `getItemOffers` operations.
 * @export
 * @interface GetOffersResponse
 */
export interface GetOffersResponse {
    /**
     * 
     * @type {GetOffersResult}
     * @memberof GetOffersResponse
     */
    payload?: GetOffersResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOffersResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetOffersResult
 */
export interface GetOffersResult {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof GetOffersResult
     */
    MarketplaceID: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof GetOffersResult
     */
    ASIN?: string;
    /**
     * The stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof GetOffersResult
     */
    SKU?: string;
    /**
     * 
     * @type {ConditionType}
     * @memberof GetOffersResult
     */
    ItemCondition: ConditionType;
    /**
     * The status of the operation.
     * @type {string}
     * @memberof GetOffersResult
     */
    status: string;
    /**
     * 
     * @type {ItemIdentifier}
     * @memberof GetOffersResult
     */
    Identifier: ItemIdentifier;
    /**
     * 
     * @type {Summary}
     * @memberof GetOffersResult
     */
    Summary: Summary;
    /**
     * 
     * @type {Array<OfferDetail>}
     * @memberof GetOffersResult
     */
    Offers: Array<OfferDetail>;
}
/**
 * The response schema for the `getPricing` and `getCompetitivePricing` operations.
 * @export
 * @interface GetPricingResponse
 */
export interface GetPricingResponse {
    /**
     * 
     * @type {Array<Price>}
     * @memberof GetPricingResponse
     */
    payload?: Array<Price>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPricingResponse
     */
    errors?: Array<Error>;
}
/**
 * The HTTP method associated with the individual APIs being called as part of the batch request.
 * @export
 * @enum {string}
 */
export enum HttpMethod {
    Get = 'GET',
    Put = 'PUT',
    Patch = 'PATCH',
    Delete = 'DELETE',
    Post = 'POST'
}

/**
 * A mapping of additional HTTP headers to send/receive for the individual batch request.
 * @export
 * @interface HttpResponseHeaders
 */
export interface HttpResponseHeaders {
    [key: string]: string | any;

    /**
     * The timestamp that the API request was received.  For more information, consult [RFC 2616 Section 14](https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html).
     * @type {string}
     * @memberof HttpResponseHeaders
     */
    Date?: string;
    /**
     * Unique request reference ID.
     * @type {string}
     * @memberof HttpResponseHeaders
     */
    x_amzn_RequestId?: string;
}
/**
 * Specifies the identifiers used to uniquely identify an item.
 * @export
 * @interface IdentifierType
 */
export interface IdentifierType {
    /**
     * 
     * @type {ASINIdentifier}
     * @memberof IdentifierType
     */
    MarketplaceASIN: ASINIdentifier;
    /**
     * 
     * @type {SellerSKUIdentifier}
     * @memberof IdentifierType
     */
    SKUIdentifier?: SellerSKUIdentifier;
}
/**
 * Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
 * @export
 * @enum {string}
 */
export enum ItemCondition {
    New = 'New',
    Used = 'Used',
    Collectible = 'Collectible',
    Refurbished = 'Refurbished',
    Club = 'Club'
}

/**
 * Information that identifies an item.
 * @export
 * @interface ItemIdentifier
 */
export interface ItemIdentifier {
    /**
     * A marketplace identifier. Specifies the marketplace from which prices are returned.
     * @type {string}
     * @memberof ItemIdentifier
     */
    MarketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ItemIdentifier
     */
    ASIN?: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof ItemIdentifier
     */
    SellerSKU?: string;
    /**
     * 
     * @type {ConditionType}
     * @memberof ItemIdentifier
     */
    ItemCondition: ConditionType;
}
/**
 * 
 * @export
 * @interface ItemOffersRequest
 */
export interface ItemOffersRequest {
    /**
     * The resource path of the operation you are calling in batch without any query parameters.  If you are calling `getItemOffersBatch`, supply the path of `getItemOffers`.  **Example:** `/products/pricing/v0/items/B000P6Q7MY/offers`  If you are calling `getListingOffersBatch`, supply the path of `getListingOffers`.  **Example:** `/products/pricing/v0/listings/B000P6Q7MY/offers`
     * @type {string}
     * @memberof ItemOffersRequest
     */
    uri: string;
    /**
     * 
     * @type {HttpMethod}
     * @memberof ItemOffersRequest
     */
    method: HttpMethod;
    /**
     * A mapping of additional HTTP headers to send/receive for the individual batch request.
     * @type {{ [key: string]: string; }}
     * @memberof ItemOffersRequest
     */
    headers?: { [key: string]: string; };
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ItemOffersRequest
     */
    MarketplaceId: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ItemOffersRequest
     */
    ItemCondition: ItemCondition;
    /**
     * 
     * @type {CustomerType}
     * @memberof ItemOffersRequest
     */
    CustomerType?: CustomerType;
}
/**
 * 
 * @export
 * @interface ItemOffersRequestParams
 */
export interface ItemOffersRequestParams {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ItemOffersRequestParams
     */
    MarketplaceId: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ItemOffersRequestParams
     */
    ItemCondition: ItemCondition;
    /**
     * 
     * @type {CustomerType}
     * @memberof ItemOffersRequestParams
     */
    CustomerType?: CustomerType;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item. This is the same Asin passed as a request parameter.
     * @type {string}
     * @memberof ItemOffersRequestParams
     */
    Asin?: string;
}
/**
 * 
 * @export
 * @interface ItemOffersRequestParamsAllOf
 */
export interface ItemOffersRequestParamsAllOf {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item. This is the same Asin passed as a request parameter.
     * @type {string}
     * @memberof ItemOffersRequestParamsAllOf
     */
    Asin?: string;
}
/**
 * 
 * @export
 * @interface ItemOffersResponse
 */
export interface ItemOffersResponse {
    /**
     * 
     * @type {HttpResponseHeaders}
     * @memberof ItemOffersResponse
     */
    headers?: HttpResponseHeaders;
    /**
     * 
     * @type {GetOffersHttpStatusLine}
     * @memberof ItemOffersResponse
     */
    status?: GetOffersHttpStatusLine;
    /**
     * 
     * @type {GetOffersResponse}
     * @memberof ItemOffersResponse
     */
    body: GetOffersResponse;
    /**
     * 
     * @type {ItemOffersRequestParams}
     * @memberof ItemOffersResponse
     */
    request: ItemOffersRequestParams;
}
/**
 * 
 * @export
 * @interface ItemOffersResponseAllOf
 */
export interface ItemOffersResponseAllOf {
    /**
     * 
     * @type {ItemOffersRequestParams}
     * @memberof ItemOffersResponseAllOf
     */
    request: ItemOffersRequestParams;
}
/**
 * 
 * @export
 * @interface ListingOffersRequest
 */
export interface ListingOffersRequest {
    /**
     * The resource path of the operation you are calling in batch without any query parameters.  If you are calling `getItemOffersBatch`, supply the path of `getItemOffers`.  **Example:** `/products/pricing/v0/items/B000P6Q7MY/offers`  If you are calling `getListingOffersBatch`, supply the path of `getListingOffers`.  **Example:** `/products/pricing/v0/listings/B000P6Q7MY/offers`
     * @type {string}
     * @memberof ListingOffersRequest
     */
    uri: string;
    /**
     * 
     * @type {HttpMethod}
     * @memberof ListingOffersRequest
     */
    method: HttpMethod;
    /**
     * A mapping of additional HTTP headers to send/receive for the individual batch request.
     * @type {{ [key: string]: string; }}
     * @memberof ListingOffersRequest
     */
    headers?: { [key: string]: string; };
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ListingOffersRequest
     */
    MarketplaceId: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ListingOffersRequest
     */
    ItemCondition: ItemCondition;
    /**
     * 
     * @type {CustomerType}
     * @memberof ListingOffersRequest
     */
    CustomerType?: CustomerType;
}
/**
 * 
 * @export
 * @interface ListingOffersRequestParams
 */
export interface ListingOffersRequestParams {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ListingOffersRequestParams
     */
    MarketplaceId: string;
    /**
     * 
     * @type {ItemCondition}
     * @memberof ListingOffersRequestParams
     */
    ItemCondition: ItemCondition;
    /**
     * 
     * @type {CustomerType}
     * @memberof ListingOffersRequestParams
     */
    CustomerType?: CustomerType;
    /**
     * The seller stock keeping unit (SKU) of the item. This is the same SKU passed as a path parameter.
     * @type {string}
     * @memberof ListingOffersRequestParams
     */
    SellerSKU: string;
}
/**
 * 
 * @export
 * @interface ListingOffersRequestParamsAllOf
 */
export interface ListingOffersRequestParamsAllOf {
    /**
     * The seller stock keeping unit (SKU) of the item. This is the same SKU passed as a path parameter.
     * @type {string}
     * @memberof ListingOffersRequestParamsAllOf
     */
    SellerSKU: string;
}
/**
 * 
 * @export
 * @interface ListingOffersResponse
 */
export interface ListingOffersResponse {
    /**
     * 
     * @type {HttpResponseHeaders}
     * @memberof ListingOffersResponse
     */
    headers?: HttpResponseHeaders;
    /**
     * 
     * @type {GetOffersHttpStatusLine}
     * @memberof ListingOffersResponse
     */
    status?: GetOffersHttpStatusLine;
    /**
     * 
     * @type {GetOffersResponse}
     * @memberof ListingOffersResponse
     */
    body: GetOffersResponse;
    /**
     * 
     * @type {ListingOffersRequestParams}
     * @memberof ListingOffersResponse
     */
    request?: ListingOffersRequestParams;
}
/**
 * 
 * @export
 * @interface ListingOffersResponseAllOf
 */
export interface ListingOffersResponseAllOf {
    /**
     * 
     * @type {ListingOffersRequestParams}
     * @memberof ListingOffersResponseAllOf
     */
    request?: ListingOffersRequestParams;
}
/**
 * 
 * @export
 * @interface LowestPriceType
 */
export interface LowestPriceType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof LowestPriceType
     */
    condition: string;
    /**
     * Indicates whether the item is fulfilled by Amazon or by the seller.
     * @type {string}
     * @memberof LowestPriceType
     */
    fulfillmentChannel: string;
    /**
     * 
     * @type {OfferCustomerType}
     * @memberof LowestPriceType
     */
    offerType?: OfferCustomerType;
    /**
     * Indicates at what quantity this price becomes active.
     * @type {number}
     * @memberof LowestPriceType
     */
    quantityTier?: number;
    /**
     * 
     * @type {QuantityDiscountType}
     * @memberof LowestPriceType
     */
    quantityDiscountType?: QuantityDiscountType;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    LandedPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    ListingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    Shipping: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof LowestPriceType
     */
    Points?: Points;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface MoneyType
 */
export interface MoneyType {
    /**
     * The currency code in ISO 4217 format.
     * @type {string}
     * @memberof MoneyType
     */
    CurrencyCode?: string;
    /**
     * The monetary value.
     * @type {number}
     * @memberof MoneyType
     */
    Amount?: number;
}
/**
 * The total number of offers for the specified condition and fulfillment channel.
 * @export
 * @interface OfferCountType
 */
export interface OfferCountType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof OfferCountType
     */
    condition?: string;
    /**
     * 
     * @type {FulfillmentChannelType}
     * @memberof OfferCountType
     */
    fulfillmentChannel?: FulfillmentChannelType;
    /**
     * The number of offers in a fulfillment channel that meet a specific condition.
     * @type {number}
     * @memberof OfferCountType
     */
    OfferCount?: number;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum OfferCustomerType {
    B2C = 'B2C',
    B2B = 'B2B'
}

/**
 * 
 * @export
 * @interface OfferDetail
 */
export interface OfferDetail {
    /**
     * When true, this is the seller\'s offer.
     * @type {boolean}
     * @memberof OfferDetail
     */
    MyOffer?: boolean;
    /**
     * 
     * @type {OfferCustomerType}
     * @memberof OfferDetail
     */
    offerType?: OfferCustomerType;
    /**
     * The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof OfferDetail
     */
    SubCondition: string;
    /**
     * The seller identifier for the offer.
     * @type {string}
     * @memberof OfferDetail
     */
    SellerId?: string;
    /**
     * Information about the condition of the item.
     * @type {string}
     * @memberof OfferDetail
     */
    ConditionNotes?: string;
    /**
     * 
     * @type {SellerFeedbackType}
     * @memberof OfferDetail
     */
    SellerFeedbackRating?: SellerFeedbackType;
    /**
     * 
     * @type {DetailedShippingTimeType}
     * @memberof OfferDetail
     */
    ShippingTime: DetailedShippingTimeType;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferDetail
     */
    ListingPrice: MoneyType;
    /**
     * 
     * @type {Array<QuantityDiscountPriceType>}
     * @memberof OfferDetail
     */
    quantityDiscountPrices?: Array<QuantityDiscountPriceType>;
    /**
     * 
     * @type {Points}
     * @memberof OfferDetail
     */
    Points?: Points;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferDetail
     */
    Shipping: MoneyType;
    /**
     * 
     * @type {ShipsFromType}
     * @memberof OfferDetail
     */
    ShipsFrom?: ShipsFromType;
    /**
     * When true, the offer is fulfilled by Amazon.
     * @type {boolean}
     * @memberof OfferDetail
     */
    IsFulfilledByAmazon: boolean;
    /**
     * 
     * @type {PrimeInformationType}
     * @memberof OfferDetail
     */
    PrimeInformation?: PrimeInformationType;
    /**
     * When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.
     * @type {boolean}
     * @memberof OfferDetail
     */
    IsBuyBoxWinner?: boolean;
    /**
     * When true, the seller of the item is eligible to win the Buy Box.
     * @type {boolean}
     * @memberof OfferDetail
     */
    IsFeaturedMerchant?: boolean;
}
/**
 * The number of offer listings with the specified condition.
 * @export
 * @interface OfferListingCountType
 */
export interface OfferListingCountType {
    /**
     * The number of offer listings.
     * @type {number}
     * @memberof OfferListingCountType
     */
    Count: number;
    /**
     * The condition of the item.
     * @type {string}
     * @memberof OfferListingCountType
     */
    condition: string;
}
/**
 * 
 * @export
 * @interface OfferType
 */
export interface OfferType {
    /**
     * 
     * @type {OfferCustomerType}
     * @memberof OfferType
     */
    offerType?: OfferCustomerType;
    /**
     * 
     * @type {PriceType}
     * @memberof OfferType
     */
    BuyingPrice: PriceType;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferType
     */
    RegularPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferType
     */
    businessPrice?: MoneyType;
    /**
     * 
     * @type {Array<QuantityDiscountPriceType>}
     * @memberof OfferType
     */
    quantityDiscountPrices?: Array<QuantityDiscountPriceType>;
    /**
     * The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
     * @type {string}
     * @memberof OfferType
     */
    FulfillmentChannel: string;
    /**
     * The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof OfferType
     */
    ItemCondition: string;
    /**
     * The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof OfferType
     */
    ItemSubCondition: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof OfferType
     */
    SellerSKU: string;
}
/**
 * 
 * @export
 * @interface Points
 */
export interface Points {
    /**
     * The number of points.
     * @type {number}
     * @memberof Points
     */
    PointsNumber?: number;
    /**
     * 
     * @type {MoneyType}
     * @memberof Points
     */
    PointsMonetaryValue?: MoneyType;
}
/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The status of the operation.
     * @type {string}
     * @memberof Price
     */
    status: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof Price
     */
    SellerSKU?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof Price
     */
    ASIN?: string;
    /**
     * 
     * @type {Product}
     * @memberof Price
     */
    Product?: Product;
}
/**
 * 
 * @export
 * @interface PriceType
 */
export interface PriceType {
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    LandedPrice?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    ListingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    Shipping?: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof PriceType
     */
    Points?: Points;
}
/**
 * Amazon Prime information.
 * @export
 * @interface PrimeInformationType
 */
export interface PrimeInformationType {
    /**
     * Indicates whether the offer is an Amazon Prime offer.
     * @type {boolean}
     * @memberof PrimeInformationType
     */
    IsPrime: boolean;
    /**
     * Indicates whether the offer is an Amazon Prime offer throughout the entire marketplace where it is listed.
     * @type {boolean}
     * @memberof PrimeInformationType
     */
    IsNationalPrime: boolean;
}
/**
 * An item.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {IdentifierType}
     * @memberof Product
     */
    Identifiers: IdentifierType;
    /**
     * A list of product attributes if they are applicable to the product that is returned.
     * @type {Array<object>}
     * @memberof Product
     */
    AttributeSets?: Array<object>;
    /**
     * A list that contains product variation information, if applicable.
     * @type {Array<object>}
     * @memberof Product
     */
    Relationships?: Array<object>;
    /**
     * 
     * @type {CompetitivePricingType}
     * @memberof Product
     */
    CompetitivePricing?: CompetitivePricingType;
    /**
     * A list of sales rank information for the item, by category.
     * @type {Array<SalesRankType>}
     * @memberof Product
     */
    SalesRankings?: Array<SalesRankType>;
    /**
     * A list of offers.
     * @type {Array<OfferType>}
     * @memberof Product
     */
    Offers?: Array<OfferType>;
}
/**
 * Contains pricing information that includes special pricing when buying in bulk.
 * @export
 * @interface QuantityDiscountPriceType
 */
export interface QuantityDiscountPriceType {
    /**
     * Indicates at what quantity this price becomes active.
     * @type {number}
     * @memberof QuantityDiscountPriceType
     */
    quantityTier: number;
    /**
     * 
     * @type {QuantityDiscountType}
     * @memberof QuantityDiscountPriceType
     */
    quantityDiscountType: QuantityDiscountType;
    /**
     * 
     * @type {MoneyType}
     * @memberof QuantityDiscountPriceType
     */
    listingPrice: MoneyType;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum QuantityDiscountType {
    QuantityDiscount = 'QUANTITY_DISCOUNT'
}

/**
 * 
 * @export
 * @interface SalesRankType
 */
export interface SalesRankType {
    /**
     *  Identifies the item category from which the sales rank is taken.
     * @type {string}
     * @memberof SalesRankType
     */
    ProductCategoryId: string;
    /**
     * The sales rank of the item within the item category.
     * @type {number}
     * @memberof SalesRankType
     */
    Rank: number;
}
/**
 * Information about the seller\'s feedback, including the percentage of positive feedback, and the total number of ratings received.
 * @export
 * @interface SellerFeedbackType
 */
export interface SellerFeedbackType {
    /**
     * The percentage of positive feedback for the seller in the past 365 days.
     * @type {number}
     * @memberof SellerFeedbackType
     */
    SellerPositiveFeedbackRating?: number;
    /**
     * The number of ratings received about the seller.
     * @type {number}
     * @memberof SellerFeedbackType
     */
    FeedbackCount: number;
}
/**
 * 
 * @export
 * @interface SellerSKUIdentifier
 */
export interface SellerSKUIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    MarketplaceId: string;
    /**
     * The seller identifier submitted for the operation.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    SellerId: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    SellerSKU: string;
}
/**
 * The state and country from where the item is shipped.
 * @export
 * @interface ShipsFromType
 */
export interface ShipsFromType {
    /**
     * The state from where the item is shipped.
     * @type {string}
     * @memberof ShipsFromType
     */
    State?: string;
    /**
     * The country from where the item is shipped.
     * @type {string}
     * @memberof ShipsFromType
     */
    Country?: string;
}
/**
 * Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * The number of unique offers contained in NumberOfOffers.
     * @type {number}
     * @memberof Summary
     */
    TotalOfferCount: number;
    /**
     * 
     * @type {Array<OfferCountType>}
     * @memberof Summary
     */
    NumberOfOffers?: Array<OfferCountType>;
    /**
     * 
     * @type {Array<LowestPriceType>}
     * @memberof Summary
     */
    LowestPrices?: Array<LowestPriceType>;
    /**
     * 
     * @type {Array<BuyBoxPriceType>}
     * @memberof Summary
     */
    BuyBoxPrices?: Array<BuyBoxPriceType>;
    /**
     * 
     * @type {MoneyType}
     * @memberof Summary
     */
    ListPrice?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof Summary
     */
    CompetitivePriceThreshold?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof Summary
     */
    SuggestedLowerPricePlusShipping?: MoneyType;
    /**
     * A list of sales rank information for the item, by category.
     * @type {Array<SalesRankType>}
     * @memberof Summary
     */
    SalesRankings?: Array<SalesRankType>;
    /**
     * 
     * @type {Array<OfferCountType>}
     * @memberof Summary
     */
    BuyBoxEligibleOffers?: Array<OfferCountType>;
    /**
     * When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
     * @type {string}
     * @memberof Summary
     */
    OffersAvailableTime?: string;
}

/**
 * ProductPricingApi - axios parameter creator
 * @export
 */
export const ProductPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing: async (marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, customerType?: 'Consumer' | 'Business', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getCompetitivePricing', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('getCompetitivePricing', 'itemType', itemType)
            const localVarPath = `/products/pricing/v0/competitivePrice`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers: async (marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, customerType?: 'Consumer' | 'Business', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getItemOffers', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemCondition' is not null or undefined
            assertParamExists('getItemOffers', 'itemCondition', itemCondition)
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemOffers', 'asin', asin)
            const localVarPath = `/products/pricing/v0/items/{Asin}/offers`
                .replace(`{${"Asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffersBatch: async (getItemOffersBatchRequestBody: GetItemOffersBatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'getItemOffersBatchRequestBody' is not null or undefined
            assertParamExists('getItemOffersBatch', 'getItemOffersBatchRequestBody', getItemOffersBatchRequestBody)
            const localVarPath = `/batches/products/pricing/v0/itemOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getItemOffersBatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers: async (marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, customerType?: 'Consumer' | 'Business', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getListingOffers', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemCondition' is not null or undefined
            assertParamExists('getListingOffers', 'itemCondition', itemCondition)
            // verify required parameter 'sellerSKU' is not null or undefined
            assertParamExists('getListingOffers', 'sellerSKU', sellerSKU)
            const localVarPath = `/products/pricing/v0/listings/{SellerSKU}/offers`
                .replace(`{${"SellerSKU"}}`, encodeURIComponent(String(sellerSKU)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (customerType !== undefined) {
                localVarQueryParameter['CustomerType'] = customerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffersBatch: async (getListingOffersBatchRequestBody: GetListingOffersBatchRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'getListingOffersBatchRequestBody' is not null or undefined
            assertParamExists('getListingOffersBatch', 'getListingOffersBatchRequestBody', getListingOffersBatchRequestBody)
            const localVarPath = `/batches/products/pricing/v0/listingOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(getListingOffersBatchRequestBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {'B2C' | 'B2B'} [offerType] Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing: async (marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', offerType?: 'B2C' | 'B2B', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getPricing', 'marketplaceId', marketplaceId)
            // verify required parameter 'itemType' is not null or undefined
            assertParamExists('getPricing', 'itemType', itemType)
            const localVarPath = `/products/pricing/v0/price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }

            if (offerType !== undefined) {
                localVarQueryParameter['OfferType'] = offerType;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductPricingApi - functional programming interface
 * @export
 */
export const ProductPricingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductPricingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, customerType?: 'Consumer' | 'Business', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCompetitivePricing(marketplaceId, itemType, asins, skus, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, customerType?: 'Consumer' | 'Business', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemOffers(marketplaceId, itemCondition, asin, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemOffersBatch(getItemOffersBatchRequestBody: GetItemOffersBatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItemOffersBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemOffersBatch(getItemOffersBatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, customerType?: 'Consumer' | 'Business', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingOffers(marketplaceId, itemCondition, sellerSKU, customerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingOffersBatch(getListingOffersBatchRequestBody: GetListingOffersBatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetListingOffersBatchResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingOffersBatch(getListingOffersBatchRequestBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {'B2C' | 'B2B'} [offerType] Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', offerType?: 'B2C' | 'B2B', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPricing(marketplaceId, itemType, asins, skus, itemCondition, offerType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductPricingApi - factory interface
 * @export
 */
export const ProductPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductPricingApiFp(configuration)
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, customerType?: 'Consumer' | 'Business', options?: any): AxiosPromise<GetPricingResponse> {
            return localVarFp.getCompetitivePricing(marketplaceId, itemType, asins, skus, customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, customerType?: 'Consumer' | 'Business', options?: any): AxiosPromise<GetOffersResponse> {
            return localVarFp.getItemOffers(marketplaceId, itemCondition, asin, customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetItemOffersBatchRequest} getItemOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffersBatch(getItemOffersBatchRequestBody: GetItemOffersBatchRequest, options?: any): AxiosPromise<GetItemOffersBatchResponse> {
            return localVarFp.getItemOffersBatch(getItemOffersBatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {'Consumer' | 'Business'} [customerType] Indicates whether to request Consumer or Business offers. Default is Consumer.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, customerType?: 'Consumer' | 'Business', options?: any): AxiosPromise<GetOffersResponse> {
            return localVarFp.getListingOffers(marketplaceId, itemCondition, sellerSKU, customerType, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetListingOffersBatchRequest} getListingOffersBatchRequestBody 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffersBatch(getListingOffersBatchRequestBody: GetListingOffersBatchRequest, options?: any): AxiosPromise<GetListingOffersBatchResponse> {
            return localVarFp.getListingOffersBatch(getListingOffersBatchRequestBody, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {'B2C' | 'B2B'} [offerType] Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', offerType?: 'B2C' | 'B2B', options?: any): AxiosPromise<GetPricingResponse> {
            return localVarFp.getPricing(marketplaceId, itemType, asins, skus, itemCondition, offerType, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCompetitivePricing operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetCompetitivePricingRequest
 */
export interface ProductPricingApiGetCompetitivePricingRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly marketplaceId: string

    /**
     * Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
     * @type {'Asin' | 'Sku'}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly itemType: 'Asin' | 'Sku'

    /**
     * A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly asins?: Array<string>

    /**
     * A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly skus?: Array<string>

    /**
     * Indicates whether to request pricing information from the point of view of Consumer or Business buyers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetCompetitivePricing
     */
    readonly customerType?: 'Consumer' | 'Business'
}

/**
 * Request parameters for getItemOffers operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetItemOffersRequest
 */
export interface ProductPricingApiGetItemOffersRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly marketplaceId: string

    /**
     * Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'

    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly asin: string

    /**
     * Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetItemOffers
     */
    readonly customerType?: 'Consumer' | 'Business'
}

/**
 * Request parameters for getItemOffersBatch operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetItemOffersBatchRequest
 */
export interface ProductPricingApiGetItemOffersBatchRequest {
    /**
     * 
     * @type {GetItemOffersBatchRequest}
     * @memberof ProductPricingApiGetItemOffersBatch
     */
    readonly getItemOffersBatchRequestBody: GetItemOffersBatchRequest
}

/**
 * Request parameters for getListingOffers operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetListingOffersRequest
 */
export interface ProductPricingApiGetListingOffersRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly marketplaceId: string

    /**
     * Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'

    /**
     * Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @type {string}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly sellerSKU: string

    /**
     * Indicates whether to request Consumer or Business offers. Default is Consumer.
     * @type {'Consumer' | 'Business'}
     * @memberof ProductPricingApiGetListingOffers
     */
    readonly customerType?: 'Consumer' | 'Business'
}

/**
 * Request parameters for getListingOffersBatch operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetListingOffersBatchRequest
 */
export interface ProductPricingApiGetListingOffersBatchRequest {
    /**
     * 
     * @type {GetListingOffersBatchRequest}
     * @memberof ProductPricingApiGetListingOffersBatch
     */
    readonly getListingOffersBatchRequestBody: GetListingOffersBatchRequest
}

/**
 * Request parameters for getPricing operation in ProductPricingApi.
 * @export
 * @interface ProductPricingApiGetPricingRequest
 */
export interface ProductPricingApiGetPricingRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @type {string}
     * @memberof ProductPricingApiGetPricing
     */
    readonly marketplaceId: string

    /**
     * Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
     * @type {'Asin' | 'Sku'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly itemType: 'Asin' | 'Sku'

    /**
     * A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetPricing
     */
    readonly asins?: Array<string>

    /**
     * A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @type {Array<string>}
     * @memberof ProductPricingApiGetPricing
     */
    readonly skus?: Array<string>

    /**
     * Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @type {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'

    /**
     * Indicates whether to request pricing information for the seller\&#39;s B2C or B2B offers. Default is B2C.
     * @type {'B2C' | 'B2B'}
     * @memberof ProductPricingApiGetPricing
     */
    readonly offerType?: 'B2C' | 'B2B'
}

/**
 * ProductPricingApi - object-oriented interface
 * @export
 * @class ProductPricingApi
 * @extends {BaseAPI}
 */
export class ProductPricingApi extends BaseAPI {
    /**
     * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetCompetitivePricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getCompetitivePricing(requestParameters: ProductPricingApiGetCompetitivePricingRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getCompetitivePricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetItemOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getItemOffers(requestParameters: ProductPricingApiGetItemOffersRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getItemOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.asin, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a batch of items based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetItemOffersBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getItemOffersBatch(requestParameters: ProductPricingApiGetItemOffersBatchRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getItemOffersBatch(requestParameters.getItemOffersBatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetListingOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getListingOffers(requestParameters: ProductPricingApiGetListingOffersRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getListingOffers(requestParameters.marketplaceId, requestParameters.itemCondition, requestParameters.sellerSKU, requestParameters.customerType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the lowest priced offers for a batch of listings by SKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetListingOffersBatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getListingOffersBatch(requestParameters: ProductPricingApiGetListingOffersBatchRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getListingOffersBatch(requestParameters.getListingOffersBatchRequestBody, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ProductPricingApiGetPricingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getPricing(requestParameters: ProductPricingApiGetPricingRequest, options?: any) {
        return ProductPricingApiFp(this.configuration).getPricing(requestParameters.marketplaceId, requestParameters.itemType, requestParameters.asins, requestParameters.skus, requestParameters.itemCondition, requestParameters.offerType, options).then((request) => request(this.axios, this.basePath));
    }
}


