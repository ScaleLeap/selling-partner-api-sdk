// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Selling Partner API for Pricing
 * The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ASINIdentifier
 */
export interface ASINIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof ASINIdentifier
     */
    marketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ASINIdentifier
     */
    ASIN: string;
}
/**
 * 
 * @export
 * @interface BuyBoxPriceType
 */
export interface BuyBoxPriceType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof BuyBoxPriceType
     */
    condition: string;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    landedPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    listingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof BuyBoxPriceType
     */
    shipping: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof BuyBoxPriceType
     */
    points?: Points;
}
/**
 * 
 * @export
 * @interface CompetitivePriceType
 */
export interface CompetitivePriceType {
    /**
     * The pricing model for each price that is returned.  Possible values:  * 1 - New Buy Box Price. * 2 - Used Buy Box Price.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    competitivePriceId: string;
    /**
     * 
     * @type {PriceType}
     * @memberof CompetitivePriceType
     */
    price: PriceType;
    /**
     * Indicates the condition of the item whose pricing information is returned. Possible values are: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    condition?: string;
    /**
     * Indicates the subcondition of the item whose pricing information is returned. Possible values are: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof CompetitivePriceType
     */
    subcondition?: string;
    /**
     *  Indicates whether or not the pricing information is for an offer listing that belongs to the requester. The requester is the seller associated with the SellerId that was submitted with the request. Possible values are: true and false.
     * @type {boolean}
     * @memberof CompetitivePriceType
     */
    belongsToRequester?: boolean;
}
/**
 * Competitive pricing information for the item.
 * @export
 * @interface CompetitivePricingType
 */
export interface CompetitivePricingType {
    /**
     * A list of competitive pricing information.
     * @type {Array<CompetitivePriceType>}
     * @memberof CompetitivePricingType
     */
    competitivePrices: Array<CompetitivePriceType>;
    /**
     * The number of active offer listings for the item that was submitted. The listing count is returned by condition, one for each listing condition value that is returned.
     * @type {Array<OfferListingCountType>}
     * @memberof CompetitivePricingType
     */
    numberOfOfferListings: Array<OfferListingCountType>;
    /**
     * 
     * @type {MoneyType}
     * @memberof CompetitivePricingType
     */
    tradeInValue?: MoneyType;
}
/**
 * Indicates the condition of the item. Possible values: New, Used, Collectible, Refurbished, Club.
 * @export
 * @enum {string}
 */
export enum ConditionType {
    New = 'New',
    Used = 'Used',
    Collectible = 'Collectible',
    Refurbished = 'Refurbished',
    Club = 'Club'
}

/**
 * The time range in which an item will likely be shipped once an order has been placed.
 * @export
 * @interface DetailedShippingTimeType
 */
export interface DetailedShippingTimeType {
    /**
     * The minimum time, in hours, that the item will likely be shipped after the order has been placed.
     * @type {number}
     * @memberof DetailedShippingTimeType
     */
    minimumHours?: number;
    /**
     * The maximum time, in hours, that the item will likely be shipped after the order has been placed.
     * @type {number}
     * @memberof DetailedShippingTimeType
     */
    maximumHours?: number;
    /**
     * The date when the item will be available for shipping. Only displayed for items that are not currently available for shipping.
     * @type {number}
     * @memberof DetailedShippingTimeType
     */
    availableDate?: number;
    /**
     * Indicates whether the item is available for shipping now, or on a known or an unknown date in the future. If known, the availableDate property indicates the date that the item will be available for shipping. Possible values: NOW, FUTURE_WITHOUT_DATE, FUTURE_WITH_DATE.
     * @type {string}
     * @memberof DetailedShippingTimeType
     */
    availabilityType?: DetailedShippingTimeTypeAvailabilityTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DetailedShippingTimeTypeAvailabilityTypeEnum {
    NOW = 'NOW',
    FUTUREWITHOUTDATE = 'FUTURE_WITHOUT_DATE',
    FUTUREWITHDATE = 'FUTURE_WITH_DATE'
}

/**
 * Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
 * @export
 * @enum {string}
 */
export enum FulfillmentChannelType {
    Amazon = 'Amazon',
    Merchant = 'Merchant'
}

/**
 * The response schema for the getListingOffers and getItemOffers operations.
 * @export
 * @interface GetOffersResponse
 */
export interface GetOffersResponse {
    /**
     * 
     * @type {GetOffersResult}
     * @memberof GetOffersResponse
     */
    payload?: GetOffersResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOffersResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetOffersResult
 */
export interface GetOffersResult {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof GetOffersResult
     */
    marketplaceID: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof GetOffersResult
     */
    ASIN?: string;
    /**
     * The stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof GetOffersResult
     */
    SKU?: string;
    /**
     * 
     * @type {ConditionType}
     * @memberof GetOffersResult
     */
    itemCondition: ConditionType;
    /**
     * The status of the operation.
     * @type {string}
     * @memberof GetOffersResult
     */
    status: string;
    /**
     * 
     * @type {ItemIdentifier}
     * @memberof GetOffersResult
     */
    identifier: ItemIdentifier;
    /**
     * 
     * @type {Summary}
     * @memberof GetOffersResult
     */
    summary: Summary;
    /**
     * 
     * @type {Array<OfferDetail>}
     * @memberof GetOffersResult
     */
    offers: Array<OfferDetail>;
}
/**
 * The response schema for the getPricing and getCompetitivePricing operations.
 * @export
 * @interface GetPricingResponse
 */
export interface GetPricingResponse {
    /**
     * 
     * @type {Array<Price>}
     * @memberof GetPricingResponse
     */
    payload?: Array<Price>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPricingResponse
     */
    errors?: Array<Error>;
}
/**
 * Specifies the identifiers used to uniquely identify an item.
 * @export
 * @interface IdentifierType
 */
export interface IdentifierType {
    /**
     * 
     * @type {ASINIdentifier}
     * @memberof IdentifierType
     */
    marketplaceASIN: ASINIdentifier;
    /**
     * 
     * @type {SellerSKUIdentifier}
     * @memberof IdentifierType
     */
    sKUIdentifier?: SellerSKUIdentifier;
}
/**
 * Information that identifies an item.
 * @export
 * @interface ItemIdentifier
 */
export interface ItemIdentifier {
    /**
     * A marketplace identifier. Specifies the marketplace from which prices are returned.
     * @type {string}
     * @memberof ItemIdentifier
     */
    marketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ItemIdentifier
     */
    ASIN?: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof ItemIdentifier
     */
    sellerSKU?: string;
    /**
     * 
     * @type {ConditionType}
     * @memberof ItemIdentifier
     */
    itemCondition: ConditionType;
}
/**
 * 
 * @export
 * @interface LowestPriceType
 */
export interface LowestPriceType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof LowestPriceType
     */
    condition: string;
    /**
     * Indicates whether the item is fulfilled by Amazon or by the seller.
     * @type {string}
     * @memberof LowestPriceType
     */
    fulfillmentChannel: string;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    landedPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    listingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof LowestPriceType
     */
    shipping: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof LowestPriceType
     */
    points?: Points;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface MoneyType
 */
export interface MoneyType {
    /**
     * The currency code in ISO 4217 format.
     * @type {string}
     * @memberof MoneyType
     */
    currencyCode?: string;
    /**
     * The monetary value.
     * @type {number}
     * @memberof MoneyType
     */
    amount?: number;
}
/**
 * The total number of offers for the specified condition and fulfillment channel.
 * @export
 * @interface OfferCountType
 */
export interface OfferCountType {
    /**
     * Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof OfferCountType
     */
    condition?: string;
    /**
     * 
     * @type {FulfillmentChannelType}
     * @memberof OfferCountType
     */
    fulfillmentChannel?: FulfillmentChannelType;
    /**
     * The number of offers in a fulfillment channel that meet a specific condition.
     * @type {number}
     * @memberof OfferCountType
     */
    offerCount?: number;
}
/**
 * 
 * @export
 * @interface OfferDetail
 */
export interface OfferDetail {
    /**
     * When true, this is the seller\'s offer.
     * @type {boolean}
     * @memberof OfferDetail
     */
    myOffer?: boolean;
    /**
     * The subcondition of the item. Subcondition values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof OfferDetail
     */
    subCondition: string;
    /**
     * 
     * @type {SellerFeedbackType}
     * @memberof OfferDetail
     */
    sellerFeedbackRating?: SellerFeedbackType;
    /**
     * 
     * @type {DetailedShippingTimeType}
     * @memberof OfferDetail
     */
    shippingTime: DetailedShippingTimeType;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferDetail
     */
    listingPrice: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof OfferDetail
     */
    points?: Points;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferDetail
     */
    shipping: MoneyType;
    /**
     * 
     * @type {ShipsFromType}
     * @memberof OfferDetail
     */
    shipsFrom?: ShipsFromType;
    /**
     * When true, the offer is fulfilled by Amazon.
     * @type {boolean}
     * @memberof OfferDetail
     */
    isFulfilledByAmazon: boolean;
    /**
     * When true, the offer is currently in the Buy Box. There can be up to two Buy Box winners at any time per ASIN, one that is eligible for Prime and one that is not eligible for Prime.
     * @type {boolean}
     * @memberof OfferDetail
     */
    isBuyBoxWinner?: boolean;
    /**
     * When true, the seller of the item is eligible to win the Buy Box.
     * @type {boolean}
     * @memberof OfferDetail
     */
    isFeaturedMerchant?: boolean;
}
/**
 * The number of offer listings with the specified condition.
 * @export
 * @interface OfferListingCountType
 */
export interface OfferListingCountType {
    /**
     * The number of offer listings.
     * @type {number}
     * @memberof OfferListingCountType
     */
    count: number;
    /**
     * The condition of the item.
     * @type {string}
     * @memberof OfferListingCountType
     */
    condition: string;
}
/**
 * 
 * @export
 * @interface OfferType
 */
export interface OfferType {
    /**
     * 
     * @type {PriceType}
     * @memberof OfferType
     */
    buyingPrice: PriceType;
    /**
     * 
     * @type {MoneyType}
     * @memberof OfferType
     */
    regularPrice: MoneyType;
    /**
     * The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
     * @type {string}
     * @memberof OfferType
     */
    fulfillmentChannel: string;
    /**
     * The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof OfferType
     */
    itemCondition: string;
    /**
     * The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof OfferType
     */
    itemSubCondition: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof OfferType
     */
    sellerSKU: string;
}
/**
 * 
 * @export
 * @interface Points
 */
export interface Points {
    /**
     * The number of points.
     * @type {number}
     * @memberof Points
     */
    pointsNumber?: number;
    /**
     * 
     * @type {MoneyType}
     * @memberof Points
     */
    pointsMonetaryValue?: MoneyType;
}
/**
 * 
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The status of the operation.
     * @type {string}
     * @memberof Price
     */
    status: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof Price
     */
    sellerSKU?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof Price
     */
    ASIN?: string;
    /**
     * 
     * @type {Product}
     * @memberof Price
     */
    product?: Product;
}
/**
 * 
 * @export
 * @interface PriceType
 */
export interface PriceType {
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    landedPrice?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    listingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceType
     */
    shipping?: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof PriceType
     */
    points?: Points;
}
/**
 * An item.
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {IdentifierType}
     * @memberof Product
     */
    identifiers: IdentifierType;
    /**
     * A list of product attributes if they are applicable to the product that is returned.
     * @type {Array<object>}
     * @memberof Product
     */
    attributeSets?: Array<object>;
    /**
     * A list that contains product variation information, if applicable.
     * @type {Array<object>}
     * @memberof Product
     */
    relationships?: Array<object>;
    /**
     * 
     * @type {CompetitivePricingType}
     * @memberof Product
     */
    competitivePricing?: CompetitivePricingType;
    /**
     * A list of sales rank information for the item, by category.
     * @type {Array<SalesRankType>}
     * @memberof Product
     */
    salesRankings?: Array<SalesRankType>;
    /**
     * A list of offers.
     * @type {Array<OfferType>}
     * @memberof Product
     */
    offers?: Array<OfferType>;
}
/**
 * 
 * @export
 * @interface SalesRankType
 */
export interface SalesRankType {
    /**
     *  Identifies the item category from which the sales rank is taken.
     * @type {string}
     * @memberof SalesRankType
     */
    productCategoryId: string;
    /**
     * The sales rank of the item within the item category.
     * @type {number}
     * @memberof SalesRankType
     */
    rank: number;
}
/**
 * Information about the seller\'s feedback, including the percentage of positive feedback, and the total number of ratings received.
 * @export
 * @interface SellerFeedbackType
 */
export interface SellerFeedbackType {
    /**
     * The percentage of positive feedback for the seller in the past 365 days.
     * @type {number}
     * @memberof SellerFeedbackType
     */
    sellerPositiveFeedbackRating?: number;
    /**
     * The number of ratings received about the seller.
     * @type {number}
     * @memberof SellerFeedbackType
     */
    feedbackCount: number;
}
/**
 * 
 * @export
 * @interface SellerSKUIdentifier
 */
export interface SellerSKUIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    marketplaceId: string;
    /**
     * The seller identifier submitted for the operation.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    sellerId: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    sellerSKU: string;
}
/**
 * The state and country from where the item is shipped.
 * @export
 * @interface ShipsFromType
 */
export interface ShipsFromType {
    /**
     * The state from where the item is shipped.
     * @type {string}
     * @memberof ShipsFromType
     */
    state?: string;
    /**
     * The country from where the item is shipped.
     * @type {string}
     * @memberof ShipsFromType
     */
    country?: string;
}
/**
 * Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
 * @export
 * @interface Summary
 */
export interface Summary {
    /**
     * The number of unique offers contained in NumberOfOffers.
     * @type {number}
     * @memberof Summary
     */
    totalOfferCount: number;
    /**
     * 
     * @type {Array<OfferCountType>}
     * @memberof Summary
     */
    numberOfOffers?: Array<OfferCountType>;
    /**
     * 
     * @type {Array<LowestPriceType>}
     * @memberof Summary
     */
    lowestPrices?: Array<LowestPriceType>;
    /**
     * 
     * @type {Array<BuyBoxPriceType>}
     * @memberof Summary
     */
    buyBoxPrices?: Array<BuyBoxPriceType>;
    /**
     * 
     * @type {MoneyType}
     * @memberof Summary
     */
    listPrice?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof Summary
     */
    suggestedLowerPricePlusShipping?: MoneyType;
    /**
     * 
     * @type {Array<OfferCountType>}
     * @memberof Summary
     */
    buyBoxEligibleOffers?: Array<OfferCountType>;
    /**
     * When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
     * @type {Date}
     * @memberof Summary
     */
    offersAvailableTime?: Date;
}

/**
 * ProductPricingApi - axios parameter creator
 * @export
 */
export const ProductPricingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling getCompetitivePricing.');
            }
            // verify required parameter 'itemType' is not null or undefined
            if (itemType === null || itemType === undefined) {
                throw new RequiredError('itemType','Required parameter itemType was null or undefined when calling getCompetitivePricing.');
            }
            const localVarPath = `/products/pricing/v0/competitivePrice`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling getItemOffers.');
            }
            // verify required parameter 'itemCondition' is not null or undefined
            if (itemCondition === null || itemCondition === undefined) {
                throw new RequiredError('itemCondition','Required parameter itemCondition was null or undefined when calling getItemOffers.');
            }
            // verify required parameter 'asin' is not null or undefined
            if (asin === null || asin === undefined) {
                throw new RequiredError('asin','Required parameter asin was null or undefined when calling getItemOffers.');
            }
            const localVarPath = `/products/pricing/v0/items/{Asin}/offers`
                .replace(`{${"Asin"}}`, encodeURIComponent(String(asin)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling getListingOffers.');
            }
            // verify required parameter 'itemCondition' is not null or undefined
            if (itemCondition === null || itemCondition === undefined) {
                throw new RequiredError('itemCondition','Required parameter itemCondition was null or undefined when calling getListingOffers.');
            }
            // verify required parameter 'sellerSKU' is not null or undefined
            if (sellerSKU === null || sellerSKU === undefined) {
                throw new RequiredError('sellerSKU','Required parameter sellerSKU was null or undefined when calling getListingOffers.');
            }
            const localVarPath = `/products/pricing/v0/listings/{SellerSKU}/offers`
                .replace(`{${"SellerSKU"}}`, encodeURIComponent(String(sellerSKU)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling getPricing.');
            }
            // verify required parameter 'itemType' is not null or undefined
            if (itemType === null || itemType === undefined) {
                throw new RequiredError('itemType','Required parameter itemType was null or undefined when calling getPricing.');
            }
            const localVarPath = `/products/pricing/v0/price`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (asins) {
                localVarQueryParameter['Asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (skus) {
                localVarQueryParameter['Skus'] = skus.join(COLLECTION_FORMATS.csv);
            }

            if (itemType !== undefined) {
                localVarQueryParameter['ItemType'] = itemType;
            }

            if (itemCondition !== undefined) {
                localVarQueryParameter['ItemCondition'] = itemCondition;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductPricingApi - functional programming interface
 * @export
 */
export const ProductPricingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse> {
            const localVarAxiosArgs = ProductPricingApiAxiosParamCreator(configuration).getCompetitivePricing(marketplaceId, itemType, asins, skus, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse> {
            const localVarAxiosArgs = ProductPricingApiAxiosParamCreator(configuration).getItemOffers(marketplaceId, itemCondition, asin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOffersResponse> {
            const localVarAxiosArgs = ProductPricingApiAxiosParamCreator(configuration).getListingOffers(marketplaceId, itemCondition, sellerSKU, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPricingResponse> {
            const localVarAxiosArgs = ProductPricingApiAxiosParamCreator(configuration).getPricing(marketplaceId, itemType, asins, skus, itemCondition, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ProductPricingApi - factory interface
 * @export
 */
export const ProductPricingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, options?: any) {
            return ProductPricingApiFp(configuration).getCompetitivePricing(marketplaceId, itemType, asins, skus, options)(axios, basePath);
        },
        /**
         * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, options?: any) {
            return ProductPricingApiFp(configuration).getItemOffers(marketplaceId, itemCondition, asin, options)(axios, basePath);
        },
        /**
         * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, options?: any) {
            return ProductPricingApiFp(configuration).getListingOffers(marketplaceId, itemCondition, sellerSKU, options)(axios, basePath);
        },
        /**
         * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
         * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
         * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
         * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
         * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', options?: any) {
            return ProductPricingApiFp(configuration).getPricing(marketplaceId, itemType, asins, skus, itemCondition, options)(axios, basePath);
        },
    };
};

/**
 * ProductPricingApi - object-oriented interface
 * @export
 * @class ProductPricingApi
 * @extends {BaseAPI}
 */
export class ProductPricingApi extends BaseAPI {
    /**
     * Returns competitive pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter. Possible values: Asin, Sku.
     * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getCompetitivePricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, options?: any) {
        return ProductPricingApiFp(this.configuration).getCompetitivePricing(marketplaceId, itemType, asins, skus, options)(this.axios, this.basePath);
    }

    /**
     * Returns the lowest priced offers for a single item based on ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getItemOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', asin: string, options?: any) {
        return ProductPricingApiFp(this.configuration).getItemOffers(marketplaceId, itemCondition, asin, options)(this.axios, this.basePath);
    }

    /**
     * Returns the lowest priced offers for a single SKU listing.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} itemCondition Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {string} sellerSKU Identifies an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getListingOffers(marketplaceId: string, itemCondition: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', sellerSKU: string, options?: any) {
        return ProductPricingApiFp(this.configuration).getListingOffers(marketplaceId, itemCondition, sellerSKU, options)(this.axios, this.basePath);
    }

    /**
     * Returns pricing information for a seller\'s offer listings based on seller SKU or ASIN.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which prices are returned.
     * @param {'Asin' | 'Sku'} itemType Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
     * @param {Array<string>} [asins] A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
     * @param {Array<string>} [skus] A list of up to twenty seller SKU values used to identify items in the given marketplace.
     * @param {'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club'} [itemCondition] Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductPricingApi
     */
    public getPricing(marketplaceId: string, itemType: 'Asin' | 'Sku', asins?: Array<string>, skus?: Array<string>, itemCondition?: 'New' | 'Used' | 'Collectible' | 'Refurbished' | 'Club', options?: any) {
        return ProductPricingApiFp(this.configuration).getPricing(marketplaceId, itemType, asins, skus, itemCondition, options)(this.axios, this.basePath);
    }

}


