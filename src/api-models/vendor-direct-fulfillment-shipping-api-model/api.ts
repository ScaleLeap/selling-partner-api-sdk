/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor\'s shipping data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Address of the party.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * 
 * @export
 * @interface Container
 */
export interface Container {
    /**
     * The type of container.
     * @type {string}
     * @memberof Container
     */
    containerType: ContainerContainerTypeEnum | 'carton' | 'pallet';
    /**
     * The container identifier.
     * @type {string}
     * @memberof Container
     */
    containerIdentifier: string;
    /**
     * The tracking number.
     * @type {string}
     * @memberof Container
     */
    trackingNumber?: string;
    /**
     * The manifest identifier.
     * @type {string}
     * @memberof Container
     */
    manifestId?: string;
    /**
     * The date of the manifest.
     * @type {string}
     * @memberof Container
     */
    manifestDate?: string;
    /**
     * The shipment method.
     * @type {string}
     * @memberof Container
     */
    shipMethod?: string;
    /**
     * SCAC code required for NA VOC vendors only.
     * @type {string}
     * @memberof Container
     */
    scacCode?: string;
    /**
     * Carrier required for EU VOC vendors only.
     * @type {string}
     * @memberof Container
     */
    carrier?: string;
    /**
     * An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     * @type {number}
     * @memberof Container
     */
    containerSequenceNumber?: number;
    /**
     * 
     * @type {Dimensions}
     * @memberof Container
     */
    dimensions?: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Container
     */
    weight?: Weight;
    /**
     * A list of packed items.
     * @type {Array<PackedItem>}
     * @memberof Container
     */
    packedItems: Array<PackedItem>;
}

/**
    * @export
    * @enum {string}
    */
export enum ContainerContainerTypeEnum {
    Carton = 'carton',
    Pallet = 'pallet'
}

/**
 * 
 * @export
 * @interface CustomerInvoice
 */
export interface CustomerInvoice {
    /**
     * The purchase order number for this order.
     * @type {string}
     * @memberof CustomerInvoice
     */
    purchaseOrderNumber: string;
    /**
     * The Base64encoded customer invoice.
     * @type {string}
     * @memberof CustomerInvoice
     */
    content: string;
}
/**
 * 
 * @export
 * @interface CustomerInvoiceList
 */
export interface CustomerInvoiceList {
    /**
     * 
     * @type {Pagination}
     * @memberof CustomerInvoiceList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<CustomerInvoice>}
     * @memberof CustomerInvoiceList
     */
    customerInvoices?: Array<CustomerInvoice>;
}
/**
 * Physical dimensional measurements of a container.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    length: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    width: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    height: string;
    /**
     * The unit of measure for dimensions.
     * @type {string}
     * @memberof Dimensions
     */
    unitOfMeasure: DimensionsUnitOfMeasureEnum | 'IN' | 'CM';
}

/**
    * @export
    * @enum {string}
    */
export enum DimensionsUnitOfMeasureEnum {
    In = 'IN',
    Cm = 'CM'
}

/**
 * The response schema for the getCustomerInvoice operation.
 * @export
 * @interface GetCustomerInvoiceResponse
 */
export interface GetCustomerInvoiceResponse {
    /**
     * 
     * @type {CustomerInvoice}
     * @memberof GetCustomerInvoiceResponse
     */
    payload?: CustomerInvoice;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetCustomerInvoiceResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getCustomerInvoices operation.
 * @export
 * @interface GetCustomerInvoicesResponse
 */
export interface GetCustomerInvoicesResponse {
    /**
     * 
     * @type {CustomerInvoiceList}
     * @memberof GetCustomerInvoicesResponse
     */
    payload?: CustomerInvoiceList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetCustomerInvoicesResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetPackingSlipListResponse
 */
export interface GetPackingSlipListResponse {
    /**
     * 
     * @type {PackingSlipList}
     * @memberof GetPackingSlipListResponse
     */
    payload?: PackingSlipList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPackingSlipListResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetPackingSlipResponse
 */
export interface GetPackingSlipResponse {
    /**
     * 
     * @type {PackingSlip}
     * @memberof GetPackingSlipResponse
     */
    payload?: PackingSlip;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPackingSlipResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getShippingLabels operation.
 * @export
 * @interface GetShippingLabelListResponse
 */
export interface GetShippingLabelListResponse {
    /**
     * 
     * @type {ShippingLabelList}
     * @memberof GetShippingLabelListResponse
     */
    payload?: ShippingLabelList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetShippingLabelListResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getShippingLabel operation.
 * @export
 * @interface GetShippingLabelResponse
 */
export interface GetShippingLabelResponse {
    /**
     * 
     * @type {ShippingLabel}
     * @memberof GetShippingLabelResponse
     */
    payload?: ShippingLabel;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetShippingLabelResponse
     */
    errors?: Array<Error>;
}
/**
 * Details of the item being shipped.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Item Sequence Number for the item. This must be the same value as sent in order for a given item.
     * @type {number}
     * @memberof Item
     */
    itemSequenceNumber: number;
    /**
     * Buyer\'s Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
     * @type {string}
     * @memberof Item
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the purchase order, like SKU Number.
     * @type {string}
     * @memberof Item
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof Item
     */
    shippedQuantity: ItemQuantity;
}
/**
 * Details of item quantity.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Quantity of units shipped for a specific item at a shipment level. If the item is present only in certain packages or pallets within the shipment, please provide this at the appropriate package or pallet level.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount: number;
    /**
     * Unit of measure for the shipped quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure: string;
}
/**
 * Details of the shipment label.
 * @export
 * @interface LabelData
 */
export interface LabelData {
    /**
     * Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
     * @type {string}
     * @memberof LabelData
     */
    packageIdentifier?: string;
    /**
     * Package tracking identifier from the shipping carrier.
     * @type {string}
     * @memberof LabelData
     */
    trackingNumber?: string;
    /**
     * Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.
     * @type {string}
     * @memberof LabelData
     */
    shipMethod?: string;
    /**
     * Shipping method name for internal reference.
     * @type {string}
     * @memberof LabelData
     */
    shipMethodName?: string;
    /**
     * This field will contain the Base64encoded string of the shipment label content.
     * @type {string}
     * @memberof LabelData
     */
    content: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * Details of the package being shipped.
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * Package identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
     * @type {string}
     * @memberof Package
     */
    packageIdentifier: string;
    /**
     * This is required to be provided for every package in the small parcel shipments.
     * @type {string}
     * @memberof Package
     */
    trackingNumber?: string;
    /**
     * Carrier manifest Id (Applicable for LTL shipments).
     * @type {string}
     * @memberof Package
     */
    manifestId?: string;
    /**
     * Carrier manifest Date (Applicable for LTL shipments).
     * @type {string}
     * @memberof Package
     */
    manifestDate?: string;
    /**
     * Shipment method.
     * @type {string}
     * @memberof Package
     */
    shipMethod?: string;
    /**
     * 
     * @type {Weight}
     * @memberof Package
     */
    weight: Weight;
    /**
     * 
     * @type {Dimensions}
     * @memberof Package
     */
    dimensions?: Dimensions;
}
/**
 * 
 * @export
 * @interface PackedItem
 */
export interface PackedItem {
    /**
     * Item Sequence Number for the item. This must be the same value as sent in the order for a given item.
     * @type {number}
     * @memberof PackedItem
     */
    itemSequenceNumber: number;
    /**
     * Buyer\'s Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
     * @type {string}
     * @memberof PackedItem
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the Purchase Order, like SKU Number.
     * @type {string}
     * @memberof PackedItem
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof PackedItem
     */
    packedQuantity: ItemQuantity;
}
/**
 * Packing slip information.
 * @export
 * @interface PackingSlip
 */
export interface PackingSlip {
    /**
     * Purchase order number of the shipment that the packing slip is for.
     * @type {string}
     * @memberof PackingSlip
     */
    purchaseOrderNumber: string;
    /**
     * A Base64encoded string of the packing slip PDF.
     * @type {string}
     * @memberof PackingSlip
     */
    content: string;
    /**
     * The format of the file such as PDF, JPEG etc.
     * @type {string}
     * @memberof PackingSlip
     */
    contentType?: PackingSlipContentTypeEnum | 'application/pdf';
}

/**
    * @export
    * @enum {string}
    */
export enum PackingSlipContentTypeEnum {
    ApplicationPdf = 'application/pdf'
}

/**
 * A list of packing slips.
 * @export
 * @interface PackingSlipList
 */
export interface PackingSlipList {
    /**
     * 
     * @type {Pagination}
     * @memberof PackingSlipList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<PackingSlip>}
     * @memberof PackingSlipList
     */
    packingSlips?: Array<PackingSlip>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * Assigned Identification for the party.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
    /**
     * 
     * @type {Address}
     * @memberof PartyIdentification
     */
    address?: Address;
    /**
     * Tax registration details of the entity.
     * @type {Array<TaxRegistrationDetails>}
     * @memberof PartyIdentification
     */
    taxRegistrationDetails?: Array<TaxRegistrationDetails>;
}
/**
 * 
 * @export
 * @interface ShipmentConfirmation
 */
export interface ShipmentConfirmation {
    /**
     * Purchase order number corresponding to the shipment.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {ShipmentDetails}
     * @memberof ShipmentConfirmation
     */
    shipmentDetails: ShipmentDetails;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentConfirmation
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentConfirmation
     */
    shipFromParty: PartyIdentification;
    /**
     * Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.
     * @type {Array<Item>}
     * @memberof ShipmentConfirmation
     */
    items: Array<Item>;
    /**
     * Provide the details of the items in this shipment. If any of the item details field is common at a package or a pallet level, then provide them at the corresponding package.
     * @type {Array<Container>}
     * @memberof ShipmentConfirmation
     */
    containers?: Array<Container>;
}
/**
 * Details about a shipment.
 * @export
 * @interface ShipmentDetails
 */
export interface ShipmentDetails {
    /**
     * This field indicates the date of the departure of the shipment from vendor\'s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.
     * @type {string}
     * @memberof ShipmentDetails
     */
    shippedDate: string;
    /**
     * Indicate the shipment status.
     * @type {string}
     * @memberof ShipmentDetails
     */
    shipmentStatus: ShipmentDetailsShipmentStatusEnum | 'SHIPPED' | 'FLOOR_DENIAL';
    /**
     * Provide the priority of the shipment.
     * @type {boolean}
     * @memberof ShipmentDetails
     */
    isPriorityShipment?: boolean;
    /**
     * The vendor order number is a unique identifier generated by a vendor for their reference.
     * @type {string}
     * @memberof ShipmentDetails
     */
    vendorOrderNumber?: string;
    /**
     * Date on which the shipment is expected to reach the buyer\'s warehouse. It needs to be an estimate based on the average transit time between the ship-from location and the destination. The exact appointment time will be provided by buyer and is potentially not known when creating the shipment confirmation.
     * @type {string}
     * @memberof ShipmentDetails
     */
    estimatedDeliveryDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ShipmentDetailsShipmentStatusEnum {
    Shipped = 'SHIPPED',
    FloorDenial = 'FLOOR_DENIAL'
}

/**
 * 
 * @export
 * @interface ShipmentStatusUpdate
 */
export interface ShipmentStatusUpdate {
    /**
     * Purchase order number of the shipment for which to update the shipment status.
     * @type {string}
     * @memberof ShipmentStatusUpdate
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentStatusUpdate
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentStatusUpdate
     */
    shipFromParty: PartyIdentification;
    /**
     * 
     * @type {StatusUpdateDetails}
     * @memberof ShipmentStatusUpdate
     */
    statusUpdateDetails: StatusUpdateDetails;
}
/**
 * 
 * @export
 * @interface ShippingLabel
 */
export interface ShippingLabel {
    /**
     * This field will contain the Purchase Order Number for this order.
     * @type {string}
     * @memberof ShippingLabel
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabel
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabel
     */
    shipFromParty: PartyIdentification;
    /**
     * Format of the label.
     * @type {string}
     * @memberof ShippingLabel
     */
    labelFormat: ShippingLabelLabelFormatEnum | 'PNG' | 'ZPL';
    /**
     * Provides the details of the packages in this shipment.
     * @type {Array<LabelData>}
     * @memberof ShippingLabel
     */
    labelData: Array<LabelData>;
}

/**
    * @export
    * @enum {string}
    */
export enum ShippingLabelLabelFormatEnum {
    Png = 'PNG',
    Zpl = 'ZPL'
}

/**
 * 
 * @export
 * @interface ShippingLabelList
 */
export interface ShippingLabelList {
    /**
     * 
     * @type {Pagination}
     * @memberof ShippingLabelList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<ShippingLabel>}
     * @memberof ShippingLabelList
     */
    shippingLabels?: Array<ShippingLabel>;
}
/**
 * 
 * @export
 * @interface ShippingLabelRequest
 */
export interface ShippingLabelRequest {
    /**
     * Purchase order number of the order for which to create a shipping label.
     * @type {string}
     * @memberof ShippingLabelRequest
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabelRequest
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabelRequest
     */
    shipFromParty: PartyIdentification;
    /**
     * A list of the packages in this shipment.
     * @type {Array<Container>}
     * @memberof ShippingLabelRequest
     */
    containers?: Array<Container>;
}
/**
 * Details for the shipment status update given by the vendor for the specific package.
 * @export
 * @interface StatusUpdateDetails
 */
export interface StatusUpdateDetails {
    /**
     * This is required to be provided for every package and should match with the trackingNumber sent for the shipment confirmation.
     * @type {string}
     * @memberof StatusUpdateDetails
     */
    trackingNumber: string;
    /**
     * Indicates the shipment status code of the package that provides transportation information for Amazon tracking systems and ultimately for the final customer.
     * @type {string}
     * @memberof StatusUpdateDetails
     */
    statusCode: string;
    /**
     * Provides a reason code for the status of the package that will provide additional information about the transportation status.
     * @type {string}
     * @memberof StatusUpdateDetails
     */
    reasonCode: string;
    /**
     * The date and time when the shipment status was updated. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     * @type {string}
     * @memberof StatusUpdateDetails
     */
    statusDateTime: string;
    /**
     * 
     * @type {Address}
     * @memberof StatusUpdateDetails
     */
    statusLocationAddress: Address;
    /**
     * 
     * @type {StatusUpdateDetailsShipmentSchedule}
     * @memberof StatusUpdateDetails
     */
    shipmentSchedule?: StatusUpdateDetailsShipmentSchedule;
}
/**
 * 
 * @export
 * @interface StatusUpdateDetailsShipmentSchedule
 */
export interface StatusUpdateDetailsShipmentSchedule {
    /**
     * Date on which the shipment is expected to reach the customer delivery location. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     * @type {string}
     * @memberof StatusUpdateDetailsShipmentSchedule
     */
    estimatedDeliveryDateTime?: string;
    /**
     * This field indicates the date and time at the start of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     * @type {string}
     * @memberof StatusUpdateDetailsShipmentSchedule
     */
    apptWindowStartDateTime?: string;
    /**
     * This field indicates the date and time at the end of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
     * @type {string}
     * @memberof StatusUpdateDetailsShipmentSchedule
     */
    apptWindowEndDateTime?: string;
}
/**
 * 
 * @export
 * @interface SubmitShipmentConfirmationsRequest
 */
export interface SubmitShipmentConfirmationsRequest {
    /**
     * 
     * @type {Array<ShipmentConfirmation>}
     * @memberof SubmitShipmentConfirmationsRequest
     */
    shipmentConfirmations?: Array<ShipmentConfirmation>;
}
/**
 * The response schema for the submitShipmentConfirmations operation.
 * @export
 * @interface SubmitShipmentConfirmationsResponse
 */
export interface SubmitShipmentConfirmationsResponse {
    /**
     * 
     * @type {TransactionReference}
     * @memberof SubmitShipmentConfirmationsResponse
     */
    payload?: TransactionReference;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitShipmentConfirmationsResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface SubmitShipmentStatusUpdatesRequest
 */
export interface SubmitShipmentStatusUpdatesRequest {
    /**
     * 
     * @type {Array<ShipmentStatusUpdate>}
     * @memberof SubmitShipmentStatusUpdatesRequest
     */
    shipmentStatusUpdates?: Array<ShipmentStatusUpdate>;
}
/**
 * The response schema for the submitShipmentStatusUpdates operation.
 * @export
 * @interface SubmitShipmentStatusUpdatesResponse
 */
export interface SubmitShipmentStatusUpdatesResponse {
    /**
     * 
     * @type {TransactionReference}
     * @memberof SubmitShipmentStatusUpdatesResponse
     */
    payload?: TransactionReference;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitShipmentStatusUpdatesResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface SubmitShippingLabelsRequest
 */
export interface SubmitShippingLabelsRequest {
    /**
     * 
     * @type {Array<ShippingLabelRequest>}
     * @memberof SubmitShippingLabelsRequest
     */
    shippingLabelRequests?: Array<ShippingLabelRequest>;
}
/**
 * The response schema for the submitShippingLabelRequest operation.
 * @export
 * @interface SubmitShippingLabelsResponse
 */
export interface SubmitShippingLabelsResponse {
    /**
     * 
     * @type {TransactionReference}
     * @memberof SubmitShippingLabelsResponse
     */
    payload?: TransactionReference;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitShippingLabelsResponse
     */
    errors?: Array<Error>;
}
/**
 * Tax registration details of the entity.
 * @export
 * @interface TaxRegistrationDetails
 */
export interface TaxRegistrationDetails {
    /**
     * Tax registration type for the entity.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationType?: TaxRegistrationDetailsTaxRegistrationTypeEnum | 'VAT' | 'GST';
    /**
     * Tax registration number for the party. For example, VAT ID.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationNumber: string;
    /**
     * 
     * @type {Address}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationAddress?: Address;
    /**
     * Tax registration message that can be used for additional tax related details.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationMessages?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxRegistrationDetailsTaxRegistrationTypeEnum {
    Vat = 'VAT',
    Gst = 'GST'
}

/**
 * 
 * @export
 * @interface TransactionReference
 */
export interface TransactionReference {
    /**
     * GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionReference
     */
    transactionId?: string;
}
/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Weight
     */
    unitOfMeasure: WeightUnitOfMeasureEnum | 'KG' | 'LB';
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Weight
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitOfMeasureEnum {
    Kg = 'KG',
    Lb = 'LB'
}


/**
 * CustomerInvoicesApi - axios parameter creator
 * @export
 */
export const CustomerInvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a customer invoice based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber Purchase order number of the shipment for which to return the invoice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoice: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getCustomerInvoice', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/customerInvoices/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoices: async (createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAfter' is not null or undefined
            assertParamExists('getCustomerInvoices', 'createdAfter', createdAfter)
            // verify required parameter 'createdBefore' is not null or undefined
            assertParamExists('getCustomerInvoices', 'createdBefore', createdBefore)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/customerInvoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipFromPartyId !== undefined) {
                localVarQueryParameter['shipFromPartyId'] = shipFromPartyId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerInvoicesApi - functional programming interface
 * @export
 */
export const CustomerInvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerInvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a customer invoice based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber Purchase order number of the shipment for which to return the invoice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerInvoice(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerInvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerInvoice(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerInvoices(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCustomerInvoicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerInvoices(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerInvoicesApi - factory interface
 * @export
 */
export const CustomerInvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerInvoicesApiFp(configuration)
    return {
        /**
         * Returns a customer invoice based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber Purchase order number of the shipment for which to return the invoice.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoice(purchaseOrderNumber: string, options?: any): AxiosPromise<GetCustomerInvoiceResponse> {
            return localVarFp.getCustomerInvoice(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoices(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): AxiosPromise<GetCustomerInvoicesResponse> {
            return localVarFp.getCustomerInvoices(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCustomerInvoice operation in CustomerInvoicesApi.
 * @export
 * @interface CustomerInvoicesApiGetCustomerInvoiceRequest
 */
export interface CustomerInvoicesApiGetCustomerInvoiceRequest {
    /**
     * Purchase order number of the shipment for which to return the invoice.
     * @type {string}
     * @memberof CustomerInvoicesApiGetCustomerInvoice
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getCustomerInvoices operation in CustomerInvoicesApi.
 * @export
 * @interface CustomerInvoicesApiGetCustomerInvoicesRequest
 */
export interface CustomerInvoicesApiGetCustomerInvoicesRequest {
    /**
     * Orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly createdAfter: string

    /**
     * Orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly createdBefore: string

    /**
     * The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
     * @type {string}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly shipFromPartyId?: string

    /**
     * The limit to the number of records returned
     * @type {number}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly limit?: number

    /**
     * Sort ASC or DESC by order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
     * @type {string}
     * @memberof CustomerInvoicesApiGetCustomerInvoices
     */
    readonly nextToken?: string
}

/**
 * CustomerInvoicesApi - object-oriented interface
 * @export
 * @class CustomerInvoicesApi
 * @extends {BaseAPI}
 */
export class CustomerInvoicesApi extends BaseAPI {
    /**
     * Returns a customer invoice based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CustomerInvoicesApiGetCustomerInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerInvoicesApi
     */
    public getCustomerInvoice(requestParameters: CustomerInvoicesApiGetCustomerInvoiceRequest, options?: any) {
        return CustomerInvoicesApiFp(this.configuration).getCustomerInvoice(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of customer invoices created during a time frame that you specify. You define the  time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must be no more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CustomerInvoicesApiGetCustomerInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerInvoicesApi
     */
    public getCustomerInvoices(requestParameters: CustomerInvoicesApiGetCustomerInvoicesRequest, options?: any) {
        return CustomerInvoicesApiFp(this.configuration).getCustomerInvoices(requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipFromPartyId, requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VendorShippingApi - axios parameter creator
 * @export
 */
export const VendorShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchaseOrderNumber for the packing slip you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackingSlip: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getPackingSlip', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/packingSlips/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by packing slip creation date.
         * @param {string} [nextToken] Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackingSlips: async (createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAfter' is not null or undefined
            assertParamExists('getPackingSlips', 'createdAfter', createdAfter)
            // verify required parameter 'createdBefore' is not null or undefined
            assertParamExists('getPackingSlips', 'createdBefore', createdBefore)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/packingSlips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipFromPartyId !== undefined) {
                localVarQueryParameter['shipFromPartyId'] = shipFromPartyId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations: async (body: SubmitShipmentConfirmationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShipmentConfirmations', 'body', body)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/shipmentConfirmations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentStatusUpdatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentStatusUpdates: async (body: SubmitShipmentStatusUpdatesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShipmentStatusUpdates', 'body', body)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/shipmentStatusUpdates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorShippingApi - functional programming interface
 * @export
 */
export const VendorShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchaseOrderNumber for the packing slip you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackingSlip(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPackingSlipResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackingSlip(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by packing slip creation date.
         * @param {string} [nextToken] Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackingSlips(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPackingSlipListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackingSlips(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShipmentConfirmations(body: SubmitShipmentConfirmationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShipmentConfirmationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShipmentConfirmations(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentStatusUpdatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShipmentStatusUpdates(body: SubmitShipmentStatusUpdatesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShipmentStatusUpdatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShipmentStatusUpdates(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorShippingApi - factory interface
 * @export
 */
export const VendorShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorShippingApiFp(configuration)
    return {
        /**
         * Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchaseOrderNumber for the packing slip you want.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackingSlip(purchaseOrderNumber: string, options?: any): AxiosPromise<GetPackingSlipResponse> {
            return localVarFp.getPackingSlip(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by packing slip creation date.
         * @param {string} [nextToken] Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackingSlips(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): AxiosPromise<GetPackingSlipListResponse> {
            return localVarFp.getPackingSlips(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations(body: SubmitShipmentConfirmationsRequest, options?: any): AxiosPromise<SubmitShipmentConfirmationsResponse> {
            return localVarFp.submitShipmentConfirmations(body, options).then((request) => request(axios, basePath));
        },
        /**
         * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentStatusUpdatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentStatusUpdates(body: SubmitShipmentStatusUpdatesRequest, options?: any): AxiosPromise<SubmitShipmentStatusUpdatesResponse> {
            return localVarFp.submitShipmentStatusUpdates(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPackingSlip operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiGetPackingSlipRequest
 */
export interface VendorShippingApiGetPackingSlipRequest {
    /**
     * The purchaseOrderNumber for the packing slip you want.
     * @type {string}
     * @memberof VendorShippingApiGetPackingSlip
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getPackingSlips operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiGetPackingSlipsRequest
 */
export interface VendorShippingApiGetPackingSlipsRequest {
    /**
     * Packing slips that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly createdAfter: string

    /**
     * Packing slips that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly createdBefore: string

    /**
     * The vendor warehouseId for order fulfillment. If not specified the result will contain orders for all warehouses.
     * @type {string}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly shipFromPartyId?: string

    /**
     * The limit to the number of records returned
     * @type {number}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly limit?: number

    /**
     * Sort ASC or DESC by packing slip creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more packing slips than the specified result size limit. The token value is returned in the previous API call.
     * @type {string}
     * @memberof VendorShippingApiGetPackingSlips
     */
    readonly nextToken?: string
}

/**
 * Request parameters for submitShipmentConfirmations operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiSubmitShipmentConfirmationsRequest
 */
export interface VendorShippingApiSubmitShipmentConfirmationsRequest {
    /**
     * 
     * @type {SubmitShipmentConfirmationsRequest}
     * @memberof VendorShippingApiSubmitShipmentConfirmations
     */
    readonly body: SubmitShipmentConfirmationsRequest
}

/**
 * Request parameters for submitShipmentStatusUpdates operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiSubmitShipmentStatusUpdatesRequest
 */
export interface VendorShippingApiSubmitShipmentStatusUpdatesRequest {
    /**
     * 
     * @type {SubmitShipmentStatusUpdatesRequest}
     * @memberof VendorShippingApiSubmitShipmentStatusUpdates
     */
    readonly body: SubmitShipmentStatusUpdatesRequest
}

/**
 * VendorShippingApi - object-oriented interface
 * @export
 * @class VendorShippingApi
 * @extends {BaseAPI}
 */
export class VendorShippingApi extends BaseAPI {
    /**
     * Returns a packing slip based on the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingApiGetPackingSlipRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public getPackingSlip(requestParameters: VendorShippingApiGetPackingSlipRequest, options?: any) {
        return VendorShippingApiFp(this.configuration).getPackingSlip(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of packing slips for the purchase orders that match the criteria specified. Date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingApiGetPackingSlipsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public getPackingSlips(requestParameters: VendorShippingApiGetPackingSlipsRequest, options?: any) {
        return VendorShippingApiFp(this.configuration).getPackingSlips(requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipFromPartyId, requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingApiSubmitShipmentConfirmationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public submitShipmentConfirmations(requestParameters: VendorShippingApiSubmitShipmentConfirmationsRequest, options?: any) {
        return VendorShippingApiFp(this.configuration).submitShipmentConfirmations(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This API call is only to be used by Vendor-Own-Carrier (VOC) vendors. Calling this API will submit a shipment status update for the package that a vendor has shipped. It will provide the Amazon customer visibility on their order, when the package is outside of Amazon Network visibility.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingApiSubmitShipmentStatusUpdatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public submitShipmentStatusUpdates(requestParameters: VendorShippingApiSubmitShipmentStatusUpdatesRequest, options?: any) {
        return VendorShippingApiFp(this.configuration).submitShipmentStatusUpdates(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * VendorShippingLabelsApi - axios parameter creator
 * @export
 */
export const VendorShippingLabelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabel: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getShippingLabel', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/shippingLabels/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabels: async (createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAfter' is not null or undefined
            assertParamExists('getShippingLabels', 'createdAfter', createdAfter)
            // verify required parameter 'createdBefore' is not null or undefined
            assertParamExists('getShippingLabels', 'createdBefore', createdBefore)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/shippingLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipFromPartyId !== undefined) {
                localVarQueryParameter['shipFromPartyId'] = shipFromPartyId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShippingLabelRequest: async (body: SubmitShippingLabelsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShippingLabelRequest', 'body', body)
            const localVarPath = `/vendor/directFulfillment/shipping/v1/shippingLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorShippingLabelsApi - functional programming interface
 * @export
 */
export const VendorShippingLabelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorShippingLabelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingLabel(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShippingLabelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingLabel(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingLabels(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShippingLabelListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingLabels(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShippingLabelRequest(body: SubmitShippingLabelsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShippingLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShippingLabelRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorShippingLabelsApi - factory interface
 * @export
 */
export const VendorShippingLabelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorShippingLabelsApiFp(configuration)
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabel(purchaseOrderNumber: string, options?: any): AxiosPromise<GetShippingLabelResponse> {
            return localVarFp.getShippingLabel(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabels(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): AxiosPromise<GetShippingLabelListResponse> {
            return localVarFp.getShippingLabels(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShippingLabelRequest(body: SubmitShippingLabelsRequest, options?: any): AxiosPromise<SubmitShippingLabelsResponse> {
            return localVarFp.submitShippingLabelRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getShippingLabel operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiGetShippingLabelRequest
 */
export interface VendorShippingLabelsApiGetShippingLabelRequest {
    /**
     * The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabel
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getShippingLabels operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiGetShippingLabelsRequest
 */
export interface VendorShippingLabelsApiGetShippingLabelsRequest {
    /**
     * Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly createdAfter: string

    /**
     * Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly createdBefore: string

    /**
     * The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly shipFromPartyId?: string

    /**
     * The limit to the number of records returned.
     * @type {number}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly limit?: number

    /**
     * Sort ASC or DESC by order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly nextToken?: string
}

/**
 * Request parameters for submitShippingLabelRequest operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiSubmitShippingLabelRequestRequest
 */
export interface VendorShippingLabelsApiSubmitShippingLabelRequestRequest {
    /**
     * 
     * @type {SubmitShippingLabelsRequest}
     * @memberof VendorShippingLabelsApiSubmitShippingLabelRequest
     */
    readonly body: SubmitShippingLabelsRequest
}

/**
 * VendorShippingLabelsApi - object-oriented interface
 * @export
 * @class VendorShippingLabelsApi
 * @extends {BaseAPI}
 */
export class VendorShippingLabelsApi extends BaseAPI {
    /**
     * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingLabelsApiGetShippingLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public getShippingLabel(requestParameters: VendorShippingLabelsApiGetShippingLabelRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).getShippingLabel(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingLabelsApiGetShippingLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public getShippingLabels(requestParameters: VendorShippingLabelsApiGetShippingLabelsRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).getShippingLabels(requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipFromPartyId, requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingLabelsApiSubmitShippingLabelRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public submitShippingLabelRequest(requestParameters: VendorShippingLabelsApiSubmitShippingLabelRequestRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).submitShippingLabelRequest(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


