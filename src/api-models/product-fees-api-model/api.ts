// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Selling Partner API for Product Fees
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The type of fee, fee amount, and other details.
 * @export
 * @interface FeeDetail
 */
export interface FeeDetail {
    /**
     * The type of fee charged to a seller.
     * @type {string}
     * @memberof FeeDetail
     */
    feeType: string;
    /**
     * 
     * @type {MoneyType}
     * @memberof FeeDetail
     */
    feeAmount: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof FeeDetail
     */
    feePromotion?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof FeeDetail
     */
    taxAmount?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof FeeDetail
     */
    finalFee: MoneyType;
    /**
     * A list of other fees that contribute to a given fee.
     * @type {Array<IncludedFeeDetail>}
     * @memberof FeeDetail
     */
    includedFeeDetailList?: Array<IncludedFeeDetail>;
}
/**
 * The total estimated fees for an item and a list of details.
 * @export
 * @interface FeesEstimate
 */
export interface FeesEstimate {
    /**
     * The time at which the fees were estimated. This defaults to the time the request is made.
     * @type {Date}
     * @memberof FeesEstimate
     */
    timeOfFeesEstimation: Date;
    /**
     * 
     * @type {MoneyType}
     * @memberof FeesEstimate
     */
    totalFeesEstimate?: MoneyType;
    /**
     * A list of other fees that contribute to a given fee.
     * @type {Array<FeeDetail>}
     * @memberof FeesEstimate
     */
    feeDetailList?: Array<FeeDetail>;
}
/**
 * An unexpected error occurred during this operation.
 * @export
 * @interface FeesEstimateError
 */
export interface FeesEstimateError {
    /**
     * An error type, identifying either the receiver or the sender as the originator of the error.
     * @type {string}
     * @memberof FeesEstimateError
     */
    type: string;
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof FeesEstimateError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof FeesEstimateError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {Array<object>}
     * @memberof FeesEstimateError
     */
    detail: Array<object>;
}
/**
 * An item identifier, marketplace, time of request, and other details that identify an estimate.
 * @export
 * @interface FeesEstimateIdentifier
 */
export interface FeesEstimateIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof FeesEstimateIdentifier
     */
    marketplaceId?: string;
    /**
     * The seller identifier.
     * @type {string}
     * @memberof FeesEstimateIdentifier
     */
    sellerId?: string;
    /**
     * The type of item identifier specified.
     * @type {string}
     * @memberof FeesEstimateIdentifier
     */
    idType?: string;
    /**
     * The item identifier.
     * @type {string}
     * @memberof FeesEstimateIdentifier
     */
    idValue?: string;
    /**
     * When true, the offer is fulfilled by Amazon.
     * @type {boolean}
     * @memberof FeesEstimateIdentifier
     */
    isAmazonFulfilled?: boolean;
    /**
     * 
     * @type {PriceToEstimateFees}
     * @memberof FeesEstimateIdentifier
     */
    priceToEstimateFees?: PriceToEstimateFees;
    /**
     * A unique identifier provided by the caller to track this request.
     * @type {string}
     * @memberof FeesEstimateIdentifier
     */
    sellerInputIdentifier?: string;
    /**
     * 
     * @type {OptionalFulfillmentProgram}
     * @memberof FeesEstimateIdentifier
     */
    optionalFulfillmentProgram?: OptionalFulfillmentProgram;
}
/**
 * 
 * @export
 * @interface FeesEstimateRequest
 */
export interface FeesEstimateRequest {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof FeesEstimateRequest
     */
    marketplaceId: string;
    /**
     * When true, the offer is fulfilled by Amazon.
     * @type {boolean}
     * @memberof FeesEstimateRequest
     */
    isAmazonFulfilled?: boolean;
    /**
     * 
     * @type {PriceToEstimateFees}
     * @memberof FeesEstimateRequest
     */
    priceToEstimateFees: PriceToEstimateFees;
    /**
     * A unique identifier provided by the caller to track this request.
     * @type {string}
     * @memberof FeesEstimateRequest
     */
    identifier: string;
    /**
     * 
     * @type {OptionalFulfillmentProgram}
     * @memberof FeesEstimateRequest
     */
    optionalFulfillmentProgram?: OptionalFulfillmentProgram;
}
/**
 * An item identifier and the estimated fees for the item.
 * @export
 * @interface FeesEstimateResult
 */
export interface FeesEstimateResult {
    /**
     * The status of the fee request. Possible values: Success, ClientError, ServiceError.
     * @type {string}
     * @memberof FeesEstimateResult
     */
    status?: string;
    /**
     * 
     * @type {FeesEstimateIdentifier}
     * @memberof FeesEstimateResult
     */
    feesEstimateIdentifier?: FeesEstimateIdentifier;
    /**
     * 
     * @type {FeesEstimate}
     * @memberof FeesEstimateResult
     */
    feesEstimate?: FeesEstimate;
    /**
     * 
     * @type {FeesEstimateError}
     * @memberof FeesEstimateResult
     */
    error?: FeesEstimateError;
}
/**
 * Request schema.
 * @export
 * @interface GetMyFeesEstimateRequest
 */
export interface GetMyFeesEstimateRequest {
    /**
     * 
     * @type {FeesEstimateRequest}
     * @memberof GetMyFeesEstimateRequest
     */
    feesEstimateRequest?: FeesEstimateRequest;
}
/**
 * 
 * @export
 * @interface GetMyFeesEstimateResponse
 */
export interface GetMyFeesEstimateResponse {
    /**
     * 
     * @type {GetMyFeesEstimateResult}
     * @memberof GetMyFeesEstimateResponse
     */
    payload?: GetMyFeesEstimateResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetMyFeesEstimateResponse
     */
    errors?: Array<Error>;
}
/**
 * Response schema.
 * @export
 * @interface GetMyFeesEstimateResult
 */
export interface GetMyFeesEstimateResult {
    /**
     * 
     * @type {FeesEstimateResult}
     * @memberof GetMyFeesEstimateResult
     */
    feesEstimateResult?: FeesEstimateResult;
}
/**
 * The type of fee, fee amount, and other details.
 * @export
 * @interface IncludedFeeDetail
 */
export interface IncludedFeeDetail {
    /**
     * The type of fee charged to a seller.
     * @type {string}
     * @memberof IncludedFeeDetail
     */
    feeType: string;
    /**
     * 
     * @type {MoneyType}
     * @memberof IncludedFeeDetail
     */
    feeAmount: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof IncludedFeeDetail
     */
    feePromotion?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof IncludedFeeDetail
     */
    taxAmount?: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof IncludedFeeDetail
     */
    finalFee: MoneyType;
}
/**
 * 
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface MoneyType
 */
export interface MoneyType {
    /**
     * The currency code in ISO 4217 format.
     * @type {string}
     * @memberof MoneyType
     */
    currencyCode?: string;
    /**
     * The monetary value.
     * @type {number}
     * @memberof MoneyType
     */
    amount?: number;
}
/**
 * An optional enrollment program for which to return the estimated fees when the offer is fulfilled by Amazon (IsAmazonFulfilled is set to true).
 * @export
 * @enum {string}
 */
export enum OptionalFulfillmentProgram {
    CORE = 'FBA_CORE',
    SNL = 'FBA_SNL',
    EFN = 'FBA_EFN'
}

/**
 * 
 * @export
 * @interface Points
 */
export interface Points {
    /**
     * 
     * @type {number}
     * @memberof Points
     */
    pointsNumber?: number;
    /**
     * 
     * @type {MoneyType}
     * @memberof Points
     */
    pointsMonetaryValue?: MoneyType;
}
/**
 * Price information for an item, used to estimate fees.
 * @export
 * @interface PriceToEstimateFees
 */
export interface PriceToEstimateFees {
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceToEstimateFees
     */
    listingPrice: MoneyType;
    /**
     * 
     * @type {MoneyType}
     * @memberof PriceToEstimateFees
     */
    shipping?: MoneyType;
    /**
     * 
     * @type {Points}
     * @memberof PriceToEstimateFees
     */
    points?: Points;
}

/**
 * FeesApi - axios parameter creator
 * @export
 */
export const FeesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the estimated fees for the item indicated by the specified Asin in the marketplace specified in the request body.  You can call getMyFeesEstimateForASIN for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each product fees request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForASIN(asin: string, body: GetMyFeesEstimateRequest, options: any = {}): RequestArgs {
            // verify required parameter 'asin' is not null or undefined
            if (asin === null || asin === undefined) {
                throw new RequiredError('asin','Required parameter asin was null or undefined when calling getMyFeesEstimateForASIN.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getMyFeesEstimateForASIN.');
            }
            const localVarPath = `/products/fees/v0/items/{Asin}/feesEstimate`
                .replace(`{${"Asin"}}`, encodeURIComponent(String(asin)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"GetMyFeesEstimateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the estimated fees for the item indicated by the specified seller SKU in the marketplace specified in the request body.  You can call getMyFeesEstimateForSKU for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each fees estimate request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForSKU(sellerSKU: string, body: GetMyFeesEstimateRequest, options: any = {}): RequestArgs {
            // verify required parameter 'sellerSKU' is not null or undefined
            if (sellerSKU === null || sellerSKU === undefined) {
                throw new RequiredError('sellerSKU','Required parameter sellerSKU was null or undefined when calling getMyFeesEstimateForSKU.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling getMyFeesEstimateForSKU.');
            }
            const localVarPath = `/products/fees/v0/listings/{SellerSKU}/feesEstimate`
                .replace(`{${"SellerSKU"}}`, encodeURIComponent(String(sellerSKU)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"GetMyFeesEstimateRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FeesApi - functional programming interface
 * @export
 */
export const FeesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the estimated fees for the item indicated by the specified Asin in the marketplace specified in the request body.  You can call getMyFeesEstimateForASIN for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each product fees request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForASIN(asin: string, body: GetMyFeesEstimateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyFeesEstimateResponse> {
            const localVarAxiosArgs = FeesApiAxiosParamCreator(configuration).getMyFeesEstimateForASIN(asin, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the estimated fees for the item indicated by the specified seller SKU in the marketplace specified in the request body.  You can call getMyFeesEstimateForSKU for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each fees estimate request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForSKU(sellerSKU: string, body: GetMyFeesEstimateRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMyFeesEstimateResponse> {
            const localVarAxiosArgs = FeesApiAxiosParamCreator(configuration).getMyFeesEstimateForSKU(sellerSKU, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FeesApi - factory interface
 * @export
 */
export const FeesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the estimated fees for the item indicated by the specified Asin in the marketplace specified in the request body.  You can call getMyFeesEstimateForASIN for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each product fees request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForASIN(asin: string, body: GetMyFeesEstimateRequest, options?: any) {
            return FeesApiFp(configuration).getMyFeesEstimateForASIN(asin, body, options)(axios, basePath);
        },
        /**
         * Returns the estimated fees for the item indicated by the specified seller SKU in the marketplace specified in the request body.  You can call getMyFeesEstimateForSKU for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each fees estimate request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {GetMyFeesEstimateRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMyFeesEstimateForSKU(sellerSKU: string, body: GetMyFeesEstimateRequest, options?: any) {
            return FeesApiFp(configuration).getMyFeesEstimateForSKU(sellerSKU, body, options)(axios, basePath);
        },
    };
};

/**
 * FeesApi - object-oriented interface
 * @export
 * @class FeesApi
 * @extends {BaseAPI}
 */
export class FeesApi extends BaseAPI {
    /**
     * Returns the estimated fees for the item indicated by the specified Asin in the marketplace specified in the request body.  You can call getMyFeesEstimateForASIN for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each product fees request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
     * @param {GetMyFeesEstimateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeesApi
     */
    public getMyFeesEstimateForASIN(asin: string, body: GetMyFeesEstimateRequest, options?: any) {
        return FeesApiFp(this.configuration).getMyFeesEstimateForASIN(asin, body, options)(this.axios, this.basePath);
    }

    /**
     * Returns the estimated fees for the item indicated by the specified seller SKU in the marketplace specified in the request body.  You can call getMyFeesEstimateForSKU for an item on behalf of a seller before the seller sets the item\'s price. They can then take estimated fees into account. With each fees estimate request, you must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 1 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} sellerSKU Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @param {GetMyFeesEstimateRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FeesApi
     */
    public getMyFeesEstimateForSKU(sellerSKU: string, body: GetMyFeesEstimateRequest, options?: any) {
        return FeesApiFp(this.configuration).getMyFeesEstimateForSKU(sellerSKU, body, options)(this.axios, this.basePath);
    }

}


