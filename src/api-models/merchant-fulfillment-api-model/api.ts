/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Merchant Fulfillment
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Maps the additional seller input to the definition. The key to the map is the field name.
 * @export
 * @interface AdditionalInputs
 */
export interface AdditionalInputs {
    /**
     * The field name.
     * @type {string}
     * @memberof AdditionalInputs
     */
    AdditionalInputFieldName?: string;
    /**
     * 
     * @type {SellerInputDefinition}
     * @memberof AdditionalInputs
     */
    SellerInputDefinition?: SellerInputDefinition;
}
/**
 * Additional information required to purchase shipping.
 * @export
 * @interface AdditionalSellerInput
 */
export interface AdditionalSellerInput {
    /**
     * The data type of the additional information.
     * @type {string}
     * @memberof AdditionalSellerInput
     */
    DataType?: string;
    /**
     * The value when the data type is string.
     * @type {string}
     * @memberof AdditionalSellerInput
     */
    ValueAsString?: string;
    /**
     * The value when the data type is boolean.
     * @type {boolean}
     * @memberof AdditionalSellerInput
     */
    ValueAsBoolean?: boolean;
    /**
     * The value when the data type is integer.
     * @type {number}
     * @memberof AdditionalSellerInput
     */
    ValueAsInteger?: number;
    /**
     * 
     * @type {string}
     * @memberof AdditionalSellerInput
     */
    ValueAsTimestamp?: string;
    /**
     * 
     * @type {Address}
     * @memberof AdditionalSellerInput
     */
    ValueAsAddress?: Address;
    /**
     * 
     * @type {Weight}
     * @memberof AdditionalSellerInput
     */
    ValueAsWeight?: Weight;
    /**
     * 
     * @type {Length}
     * @memberof AdditionalSellerInput
     */
    ValueAsDimension?: Length;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof AdditionalSellerInput
     */
    ValueAsCurrency?: CurrencyAmount;
}
/**
 * An additional set of seller inputs required to purchase shipping.
 * @export
 * @interface AdditionalSellerInputs
 */
export interface AdditionalSellerInputs {
    /**
     * The name of the additional input field.
     * @type {string}
     * @memberof AdditionalSellerInputs
     */
    AdditionalInputFieldName: string;
    /**
     * 
     * @type {AdditionalSellerInput}
     * @memberof AdditionalSellerInputs
     */
    AdditionalSellerInput: AdditionalSellerInput;
}
/**
 * The postal address information.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the addressee, or business name.
     * @type {string}
     * @memberof Address
     */
    Name: string;
    /**
     * The street address information.
     * @type {string}
     * @memberof Address
     */
    AddressLine1: string;
    /**
     * Additional street address information.
     * @type {string}
     * @memberof Address
     */
    AddressLine2?: string;
    /**
     * Additional street address information.
     * @type {string}
     * @memberof Address
     */
    AddressLine3?: string;
    /**
     * The district or county.
     * @type {string}
     * @memberof Address
     */
    DistrictOrCounty?: string;
    /**
     * The email address.
     * @type {string}
     * @memberof Address
     */
    Email: string;
    /**
     * The city.
     * @type {string}
     * @memberof Address
     */
    City: string;
    /**
     * The state or province code.
     * @type {string}
     * @memberof Address
     */
    StateOrProvinceCode?: string;
    /**
     * The zip code or postal code.
     * @type {string}
     * @memberof Address
     */
    PostalCode: string;
    /**
     * The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    CountryCode: string;
    /**
     * The phone number.
     * @type {string}
     * @memberof Address
     */
    Phone: string;
}
/**
 * Indicates whether the carrier will pick up the package, and what fee is charged, if any.
 * @export
 * @interface AvailableCarrierWillPickUpOption
 */
export interface AvailableCarrierWillPickUpOption {
    /**
     * 
     * @type {CarrierWillPickUpOption}
     * @memberof AvailableCarrierWillPickUpOption
     */
    CarrierWillPickUpOption: CarrierWillPickUpOption;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof AvailableCarrierWillPickUpOption
     */
    Charge: CurrencyAmount;
}
/**
 * The available delivery confirmation options, and the fee charged, if any.
 * @export
 * @interface AvailableDeliveryExperienceOption
 */
export interface AvailableDeliveryExperienceOption {
    /**
     * 
     * @type {DeliveryExperienceOption}
     * @memberof AvailableDeliveryExperienceOption
     */
    DeliveryExperienceOption: DeliveryExperienceOption;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof AvailableDeliveryExperienceOption
     */
    Charge: CurrencyAmount;
}
/**
 * The available shipping service options.
 * @export
 * @interface AvailableShippingServiceOptions
 */
export interface AvailableShippingServiceOptions {
    /**
     * List of available carrier pickup options.
     * @type {Array<AvailableCarrierWillPickUpOption>}
     * @memberof AvailableShippingServiceOptions
     */
    AvailableCarrierWillPickUpOptions: Array<AvailableCarrierWillPickUpOption>;
    /**
     * List of available delivery experience options.
     * @type {Array<AvailableDeliveryExperienceOption>}
     * @memberof AvailableShippingServiceOptions
     */
    AvailableDeliveryExperienceOptions: Array<AvailableDeliveryExperienceOption>;
}
/**
 * Response schema.
 * @export
 * @interface CancelShipmentResponse
 */
export interface CancelShipmentResponse {
    /**
     * 
     * @type {Shipment}
     * @memberof CancelShipmentResponse
     */
    payload?: Shipment;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * Carrier will pick up option.
 * @export
 * @enum {string}
 */
export enum CarrierWillPickUpOption {
    CarrierWillPickUp = 'CarrierWillPickUp',
    ShipperWillDropOff = 'ShipperWillDropOff',
    NoPreference = 'NoPreference'
}

/**
 * A validation constraint.
 * @export
 * @interface Constraint
 */
export interface Constraint {
    /**
     * A regular expression.
     * @type {string}
     * @memberof Constraint
     */
    ValidationRegEx?: string;
    /**
     * A validation string.
     * @type {string}
     * @memberof Constraint
     */
    ValidationString: string;
}
/**
 * Request schema.
 * @export
 * @interface CreateShipmentRequest
 */
export interface CreateShipmentRequest {
    /**
     * 
     * @type {ShipmentRequestDetails}
     * @memberof CreateShipmentRequest
     */
    ShipmentRequestDetails: ShipmentRequestDetails;
    /**
     * An Amazon-defined shipping service identifier.
     * @type {string}
     * @memberof CreateShipmentRequest
     */
    ShippingServiceId: string;
    /**
     * Identifies a shipping service order made by a carrier.
     * @type {string}
     * @memberof CreateShipmentRequest
     */
    ShippingServiceOfferId?: string;
    /**
     * 
     * @type {HazmatType}
     * @memberof CreateShipmentRequest
     */
    HazmatType?: HazmatType;
    /**
     * 
     * @type {LabelFormatOptionRequest}
     * @memberof CreateShipmentRequest
     */
    LabelFormatOption?: LabelFormatOptionRequest;
    /**
     * A list of additional seller input pairs required to purchase shipping.
     * @type {Array<AdditionalSellerInputs>}
     * @memberof CreateShipmentRequest
     */
    ShipmentLevelSellerInputsList?: Array<AdditionalSellerInputs>;
}
/**
 * Response schema.
 * @export
 * @interface CreateShipmentResponse
 */
export interface CreateShipmentResponse {
    /**
     * 
     * @type {Shipment}
     * @memberof CreateShipmentResponse
     */
    payload?: Shipment;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * Currency type and amount.
 * @export
 * @interface CurrencyAmount
 */
export interface CurrencyAmount {
    /**
     * Three-digit currency code in ISO 4217 format.
     * @type {string}
     * @memberof CurrencyAmount
     */
    CurrencyCode: string;
    /**
     * The currency amount.
     * @type {number}
     * @memberof CurrencyAmount
     */
    Amount: number;
}
/**
 * The delivery confirmation level.
 * @export
 * @enum {string}
 */
export enum DeliveryExperienceOption {
    DeliveryConfirmationWithAdultSignature = 'DeliveryConfirmationWithAdultSignature',
    DeliveryConfirmationWithSignature = 'DeliveryConfirmationWithSignature',
    DeliveryConfirmationWithoutSignature = 'DeliveryConfirmationWithoutSignature',
    NoTracking = 'NoTracking',
    NoPreference = 'NoPreference'
}

/**
 * The delivery confirmation level.
 * @export
 * @enum {string}
 */
export enum DeliveryExperienceType {
    DeliveryConfirmationWithAdultSignature = 'DeliveryConfirmationWithAdultSignature',
    DeliveryConfirmationWithSignature = 'DeliveryConfirmationWithSignature',
    DeliveryConfirmationWithoutSignature = 'DeliveryConfirmationWithoutSignature',
    NoTracking = 'NoTracking'
}

/**
 * The document data and checksum.
 * @export
 * @interface FileContents
 */
export interface FileContents {
    /**
     * Data for printing labels, in the form of a Base64-encoded, GZip-compressed string.
     * @type {string}
     * @memberof FileContents
     */
    Contents: string;
    /**
     * 
     * @type {FileType}
     * @memberof FileContents
     */
    FileType: FileType;
    /**
     * An MD5 hash to validate the PDF document data, in the form of a Base64-encoded string.
     * @type {string}
     * @memberof FileContents
     */
    Checksum: string;
}
/**
 * The file type for a label.
 * @export
 * @enum {string}
 */
export enum FileType {
    ApplicationPdf = 'application/pdf',
    ApplicationZpl = 'application/zpl',
    ImagePng = 'image/png'
}

/**
 * Request schema.
 * @export
 * @interface GetAdditionalSellerInputsRequest
 */
export interface GetAdditionalSellerInputsRequest {
    /**
     * An Amazon-defined shipping service identifier.
     * @type {string}
     * @memberof GetAdditionalSellerInputsRequest
     */
    ShippingServiceId: string;
    /**
     * 
     * @type {Address}
     * @memberof GetAdditionalSellerInputsRequest
     */
    ShipFromAddress: Address;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format. <br>**Pattern** : `[0-9A-Z]{3}-[0-9]{7}-[0-9]{7}`.
     * @type {string}
     * @memberof GetAdditionalSellerInputsRequest
     */
    OrderId: string;
}
/**
 * Response schema.
 * @export
 * @interface GetAdditionalSellerInputsResponse
 */
export interface GetAdditionalSellerInputsResponse {
    /**
     * 
     * @type {GetAdditionalSellerInputsResult}
     * @memberof GetAdditionalSellerInputsResponse
     */
    payload?: GetAdditionalSellerInputsResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetAdditionalSellerInputsResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the getAdditionalSellerInputs operation.
 * @export
 * @interface GetAdditionalSellerInputsResult
 */
export interface GetAdditionalSellerInputsResult {
    /**
     * A list of additional inputs.
     * @type {Array<AdditionalInputs>}
     * @memberof GetAdditionalSellerInputsResult
     */
    ShipmentLevelFields?: Array<AdditionalInputs>;
    /**
     * A list of item level fields.
     * @type {Array<ItemLevelFields>}
     * @memberof GetAdditionalSellerInputsResult
     */
    ItemLevelFieldsList?: Array<ItemLevelFields>;
}
/**
 * Request schema.
 * @export
 * @interface GetEligibleShipmentServicesRequest
 */
export interface GetEligibleShipmentServicesRequest {
    /**
     * 
     * @type {ShipmentRequestDetails}
     * @memberof GetEligibleShipmentServicesRequest
     */
    ShipmentRequestDetails: ShipmentRequestDetails;
    /**
     * 
     * @type {ShippingOfferingFilter}
     * @memberof GetEligibleShipmentServicesRequest
     */
    ShippingOfferingFilter?: ShippingOfferingFilter;
}
/**
 * Response schema.
 * @export
 * @interface GetEligibleShipmentServicesResponse
 */
export interface GetEligibleShipmentServicesResponse {
    /**
     * 
     * @type {GetEligibleShipmentServicesResult}
     * @memberof GetEligibleShipmentServicesResponse
     */
    payload?: GetEligibleShipmentServicesResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetEligibleShipmentServicesResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the getEligibleShipmentServices operation.
 * @export
 * @interface GetEligibleShipmentServicesResult
 */
export interface GetEligibleShipmentServicesResult {
    /**
     * A list of shipping services offers.
     * @type {Array<ShippingService>}
     * @memberof GetEligibleShipmentServicesResult
     */
    ShippingServiceList: Array<ShippingService>;
    /**
     * List of services that were for some reason unavailable for this request
     * @type {Array<RejectedShippingService>}
     * @memberof GetEligibleShipmentServicesResult
     */
    RejectedShippingServiceList?: Array<RejectedShippingService>;
    /**
     * A list of temporarily unavailable carriers.
     * @type {Array<TemporarilyUnavailableCarrier>}
     * @memberof GetEligibleShipmentServicesResult
     */
    TemporarilyUnavailableCarrierList?: Array<TemporarilyUnavailableCarrier>;
    /**
     * List of carriers whose terms and conditions were not accepted by the seller.
     * @type {Array<TermsAndConditionsNotAcceptedCarrier>}
     * @memberof GetEligibleShipmentServicesResult
     */
    TermsAndConditionsNotAcceptedCarrierList?: Array<TermsAndConditionsNotAcceptedCarrier>;
}
/**
 * Response schema.
 * @export
 * @interface GetShipmentResponse
 */
export interface GetShipmentResponse {
    /**
     * 
     * @type {Shipment}
     * @memberof GetShipmentResponse
     */
    payload?: Shipment;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information on hazardous materials.
 * @export
 * @enum {string}
 */
export enum HazmatType {
    None = 'None',
    LqHazmat = 'LQHazmat'
}

/**
 * Indicates whether the additional seller input is at the item or shipment level.
 * @export
 * @enum {string}
 */
export enum InputTargetType {
    ShipmentLevel = 'SHIPMENT_LEVEL',
    ItemLevel = 'ITEM_LEVEL'
}

/**
 * An Amazon order item identifier and a quantity.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * An Amazon-defined identifier for an individual item in an order.
     * @type {string}
     * @memberof Item
     */
    OrderItemId: string;
    /**
     * The number of items.
     * @type {number}
     * @memberof Item
     */
    Quantity: number;
    /**
     * 
     * @type {Weight}
     * @memberof Item
     */
    ItemWeight?: Weight;
    /**
     * The description of the item.
     * @type {string}
     * @memberof Item
     */
    ItemDescription?: string;
    /**
     * A list of transparency codes.
     * @type {Array<string>}
     * @memberof Item
     */
    TransparencyCodeList?: Array<string>;
    /**
     * A list of additional seller input pairs required to purchase shipping.
     * @type {Array<AdditionalSellerInputs>}
     * @memberof Item
     */
    ItemLevelSellerInputsList?: Array<AdditionalSellerInputs>;
}
/**
 * 
 * @export
 * @interface ItemLevelFields
 */
export interface ItemLevelFields {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ItemLevelFields
     */
    Asin: string;
    /**
     * A list of additional inputs.
     * @type {Array<AdditionalInputs>}
     * @memberof ItemLevelFields
     */
    AdditionalInputs: Array<AdditionalInputs>;
}
/**
 * Data for creating a shipping label and dimensions for printing the label.
 * @export
 * @interface Label
 */
export interface Label {
    /**
     * Custom text to print on the label.  Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support CustomTextForLabel.
     * @type {string}
     * @memberof Label
     */
    CustomTextForLabel?: string;
    /**
     * 
     * @type {LabelDimensions}
     * @memberof Label
     */
    Dimensions: LabelDimensions;
    /**
     * 
     * @type {FileContents}
     * @memberof Label
     */
    FileContents: FileContents;
    /**
     * 
     * @type {LabelFormat}
     * @memberof Label
     */
    LabelFormat?: LabelFormat;
    /**
     * 
     * @type {StandardIdForLabel}
     * @memberof Label
     */
    StandardIdForLabel?: StandardIdForLabel;
}
/**
 * Custom text for shipping labels.
 * @export
 * @interface LabelCustomization
 */
export interface LabelCustomization {
    /**
     * Custom text to print on the label.  Note: Custom text is only included on labels that are in ZPL format (ZPL203). FedEx does not support CustomTextForLabel.
     * @type {string}
     * @memberof LabelCustomization
     */
    CustomTextForLabel?: string;
    /**
     * 
     * @type {StandardIdForLabel}
     * @memberof LabelCustomization
     */
    StandardIdForLabel?: StandardIdForLabel;
}
/**
 * Dimensions for printing a shipping label.
 * @export
 * @interface LabelDimensions
 */
export interface LabelDimensions {
    /**
     * A label dimension.
     * @type {number}
     * @memberof LabelDimensions
     */
    Length: number;
    /**
     * A label dimension.
     * @type {number}
     * @memberof LabelDimensions
     */
    Width: number;
    /**
     * 
     * @type {UnitOfLength}
     * @memberof LabelDimensions
     */
    Unit: UnitOfLength;
}
/**
 * The label format.
 * @export
 * @enum {string}
 */
export enum LabelFormat {
    Pdf = 'PDF',
    Png = 'PNG',
    Zpl203 = 'ZPL203',
    Zpl300 = 'ZPL300',
    ShippingServiceDefault = 'ShippingServiceDefault'
}

/**
 * The label format details and whether to include a packing slip.
 * @export
 * @interface LabelFormatOption
 */
export interface LabelFormatOption {
    /**
     * When true, include a packing slip with the label.
     * @type {boolean}
     * @memberof LabelFormatOption
     */
    IncludePackingSlipWithLabel?: boolean;
    /**
     * 
     * @type {LabelFormat}
     * @memberof LabelFormatOption
     */
    LabelFormat?: LabelFormat;
}
/**
 * Whether to include a packing slip.
 * @export
 * @interface LabelFormatOptionRequest
 */
export interface LabelFormatOptionRequest {
    /**
     * When true, include a packing slip with the label.
     * @type {boolean}
     * @memberof LabelFormatOptionRequest
     */
    IncludePackingSlipWithLabel?: boolean;
}
/**
 * The length.
 * @export
 * @interface Length
 */
export interface Length {
    /**
     * The value in units.
     * @type {number}
     * @memberof Length
     */
    value?: number;
    /**
     * 
     * @type {UnitOfLength}
     * @memberof Length
     */
    unit?: UnitOfLength;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occured.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The dimensions of a package contained in a shipment.
 * @export
 * @interface PackageDimensions
 */
export interface PackageDimensions {
    /**
     * 
     * @type {number}
     * @memberof PackageDimensions
     */
    Length?: number;
    /**
     * 
     * @type {number}
     * @memberof PackageDimensions
     */
    Width?: number;
    /**
     * 
     * @type {number}
     * @memberof PackageDimensions
     */
    Height?: number;
    /**
     * 
     * @type {UnitOfLength}
     * @memberof PackageDimensions
     */
    Unit?: UnitOfLength;
    /**
     * 
     * @type {PredefinedPackageDimensions}
     * @memberof PackageDimensions
     */
    PredefinedPackageDimensions?: PredefinedPackageDimensions;
}
/**
 * An enumeration of predefined parcel tokens. If you specify a PredefinedPackageDimensions token, you are not obligated to use a branded package from a carrier. For example, if you specify the FedEx_Box_10kg token, you do not have to use that particular package from FedEx. You are only obligated to use a box that matches the dimensions specified by the token.  Note: Please note that carriers can have restrictions on the type of package allowed for certain ship methods. Check the carrier website for all details. Example: Flat rate pricing is available when materials are sent by USPS in a USPS-produced Flat Rate Envelope or Box.
 * @export
 * @enum {string}
 */
export enum PredefinedPackageDimensions {
    FedExBox10kg = 'FedEx_Box_10kg',
    FedExBox25kg = 'FedEx_Box_25kg',
    FedExBoxExtraLarge1 = 'FedEx_Box_Extra_Large_1',
    FedExBoxExtraLarge2 = 'FedEx_Box_Extra_Large_2',
    FedExBoxLarge1 = 'FedEx_Box_Large_1',
    FedExBoxLarge2 = 'FedEx_Box_Large_2',
    FedExBoxMedium1 = 'FedEx_Box_Medium_1',
    FedExBoxMedium2 = 'FedEx_Box_Medium_2',
    FedExBoxSmall1 = 'FedEx_Box_Small_1',
    FedExBoxSmall2 = 'FedEx_Box_Small_2',
    FedExEnvelope = 'FedEx_Envelope',
    FedExPaddedPak = 'FedEx_Padded_Pak',
    FedExPak1 = 'FedEx_Pak_1',
    FedExPak2 = 'FedEx_Pak_2',
    FedExTube = 'FedEx_Tube',
    FedExXlPak = 'FedEx_XL_Pak',
    UpsBox10kg = 'UPS_Box_10kg',
    UpsBox25kg = 'UPS_Box_25kg',
    UpsExpressBox = 'UPS_Express_Box',
    UpsExpressBoxLarge = 'UPS_Express_Box_Large',
    UpsExpressBoxMedium = 'UPS_Express_Box_Medium',
    UpsExpressBoxSmall = 'UPS_Express_Box_Small',
    UpsExpressEnvelope = 'UPS_Express_Envelope',
    UpsExpressHardPak = 'UPS_Express_Hard_Pak',
    UpsExpressLegalEnvelope = 'UPS_Express_Legal_Envelope',
    UpsExpressPak = 'UPS_Express_Pak',
    UpsExpressTube = 'UPS_Express_Tube',
    UpsLaboratoryPak = 'UPS_Laboratory_Pak',
    UpsPadPak = 'UPS_Pad_Pak',
    UpsPallet = 'UPS_Pallet',
    UspsCard = 'USPS_Card',
    UspsFlat = 'USPS_Flat',
    UspsFlatRateCardboardEnvelope = 'USPS_FlatRateCardboardEnvelope',
    UspsFlatRateEnvelope = 'USPS_FlatRateEnvelope',
    UspsFlatRateGiftCardEnvelope = 'USPS_FlatRateGiftCardEnvelope',
    UspsFlatRateLegalEnvelope = 'USPS_FlatRateLegalEnvelope',
    UspsFlatRatePaddedEnvelope = 'USPS_FlatRatePaddedEnvelope',
    UspsFlatRateWindowEnvelope = 'USPS_FlatRateWindowEnvelope',
    UspsLargeFlatRateBoardGameBox = 'USPS_LargeFlatRateBoardGameBox',
    UspsLargeFlatRateBox = 'USPS_LargeFlatRateBox',
    UspsLetter = 'USPS_Letter',
    UspsMediumFlatRateBox1 = 'USPS_MediumFlatRateBox1',
    UspsMediumFlatRateBox2 = 'USPS_MediumFlatRateBox2',
    UspsRegionalRateBoxA1 = 'USPS_RegionalRateBoxA1',
    UspsRegionalRateBoxA2 = 'USPS_RegionalRateBoxA2',
    UspsRegionalRateBoxB1 = 'USPS_RegionalRateBoxB1',
    UspsRegionalRateBoxB2 = 'USPS_RegionalRateBoxB2',
    UspsRegionalRateBoxC = 'USPS_RegionalRateBoxC',
    UspsSmallFlatRateBox = 'USPS_SmallFlatRateBox',
    UspsSmallFlatRateEnvelope = 'USPS_SmallFlatRateEnvelope'
}

/**
 * Information about a rejected shipping service
 * @export
 * @interface RejectedShippingService
 */
export interface RejectedShippingService {
    /**
     * The rejected shipping carrier name. e.g. USPS
     * @type {string}
     * @memberof RejectedShippingService
     */
    CarrierName: string;
    /**
     * The rejected shipping service localized name. e.g. FedEx Standard Overnight
     * @type {string}
     * @memberof RejectedShippingService
     */
    ShippingServiceName: string;
    /**
     * An Amazon-defined shipping service identifier.
     * @type {string}
     * @memberof RejectedShippingService
     */
    ShippingServiceId: string;
    /**
     * A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
     * @type {string}
     * @memberof RejectedShippingService
     */
    RejectionReasonCode: string;
    /**
     * A localized human readable description of the rejected reason.
     * @type {string}
     * @memberof RejectedShippingService
     */
    RejectionReasonMessage?: string;
}
/**
 * Specifies characteristics that apply to a seller input.
 * @export
 * @interface SellerInputDefinition
 */
export interface SellerInputDefinition {
    /**
     * When true, the additional input field is required.
     * @type {boolean}
     * @memberof SellerInputDefinition
     */
    IsRequired: boolean;
    /**
     * The data type of the additional input field.
     * @type {string}
     * @memberof SellerInputDefinition
     */
    DataType: string;
    /**
     * List of constraints.
     * @type {Array<Constraint>}
     * @memberof SellerInputDefinition
     */
    Constraints: Array<Constraint>;
    /**
     * The display text for the additional input field.
     * @type {string}
     * @memberof SellerInputDefinition
     */
    InputDisplayText: string;
    /**
     * 
     * @type {InputTargetType}
     * @memberof SellerInputDefinition
     */
    InputTarget?: InputTargetType;
    /**
     * 
     * @type {AdditionalSellerInput}
     * @memberof SellerInputDefinition
     */
    StoredValue: AdditionalSellerInput;
    /**
     * The set of fixed values in an additional seller input.
     * @type {Array<string>}
     * @memberof SellerInputDefinition
     */
    RestrictedSetValues?: Array<string>;
}
/**
 * The details of a shipment, including the shipment status.
 * @export
 * @interface Shipment
 */
export interface Shipment {
    /**
     * An Amazon-defined shipment identifier.
     * @type {string}
     * @memberof Shipment
     */
    ShipmentId: string;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format. <br>**Pattern** : `[0-9A-Z]{3}-[0-9]{7}-[0-9]{7}`.
     * @type {string}
     * @memberof Shipment
     */
    AmazonOrderId: string;
    /**
     * A seller-defined order identifier.
     * @type {string}
     * @memberof Shipment
     */
    SellerOrderId?: string;
    /**
     * The list of items to be included in a shipment.
     * @type {Array<Item>}
     * @memberof Shipment
     */
    ItemList: Array<Item>;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    ShipFromAddress: Address;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    ShipToAddress: Address;
    /**
     * 
     * @type {PackageDimensions}
     * @memberof Shipment
     */
    PackageDimensions: PackageDimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Shipment
     */
    Weight: Weight;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof Shipment
     */
    Insurance: CurrencyAmount;
    /**
     * 
     * @type {ShippingService}
     * @memberof Shipment
     */
    ShippingService: ShippingService;
    /**
     * 
     * @type {Label}
     * @memberof Shipment
     */
    Label: Label;
    /**
     * 
     * @type {ShipmentStatus}
     * @memberof Shipment
     */
    Status: ShipmentStatus;
    /**
     * The shipment tracking identifier provided by the carrier.
     * @type {string}
     * @memberof Shipment
     */
    TrackingId?: string;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    CreatedDate: string;
    /**
     * 
     * @type {string}
     * @memberof Shipment
     */
    LastUpdatedDate?: string;
}
/**
 * Shipment information required for requesting shipping service offers or for creating a shipment.
 * @export
 * @interface ShipmentRequestDetails
 */
export interface ShipmentRequestDetails {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format. <br>**Pattern** : `[0-9A-Z]{3}-[0-9]{7}-[0-9]{7}`.
     * @type {string}
     * @memberof ShipmentRequestDetails
     */
    AmazonOrderId: string;
    /**
     * A seller-defined order identifier.
     * @type {string}
     * @memberof ShipmentRequestDetails
     */
    SellerOrderId?: string;
    /**
     * The list of items to be included in a shipment.
     * @type {Array<Item>}
     * @memberof ShipmentRequestDetails
     */
    ItemList: Array<Item>;
    /**
     * 
     * @type {Address}
     * @memberof ShipmentRequestDetails
     */
    ShipFromAddress: Address;
    /**
     * 
     * @type {PackageDimensions}
     * @memberof ShipmentRequestDetails
     */
    PackageDimensions: PackageDimensions;
    /**
     * 
     * @type {Weight}
     * @memberof ShipmentRequestDetails
     */
    Weight: Weight;
    /**
     * 
     * @type {string}
     * @memberof ShipmentRequestDetails
     */
    MustArriveByDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ShipmentRequestDetails
     */
    ShipDate?: string;
    /**
     * 
     * @type {ShippingServiceOptions}
     * @memberof ShipmentRequestDetails
     */
    ShippingServiceOptions: ShippingServiceOptions;
    /**
     * 
     * @type {LabelCustomization}
     * @memberof ShipmentRequestDetails
     */
    LabelCustomization?: LabelCustomization;
}
/**
 * The shipment status.
 * @export
 * @enum {string}
 */
export enum ShipmentStatus {
    Purchased = 'Purchased',
    RefundPending = 'RefundPending',
    RefundRejected = 'RefundRejected',
    RefundApplied = 'RefundApplied'
}

/**
 * Filter for use when requesting eligible shipping services.
 * @export
 * @interface ShippingOfferingFilter
 */
export interface ShippingOfferingFilter {
    /**
     * When true, include a packing slip with the label.
     * @type {boolean}
     * @memberof ShippingOfferingFilter
     */
    IncludePackingSlipWithLabel?: boolean;
    /**
     * When true, include complex shipping options.
     * @type {boolean}
     * @memberof ShippingOfferingFilter
     */
    IncludeComplexShippingOptions?: boolean;
    /**
     * 
     * @type {CarrierWillPickUpOption}
     * @memberof ShippingOfferingFilter
     */
    CarrierWillPickUp?: CarrierWillPickUpOption;
    /**
     * 
     * @type {DeliveryExperienceOption}
     * @memberof ShippingOfferingFilter
     */
    DeliveryExperience?: DeliveryExperienceOption;
}
/**
 * A shipping service offer made by a carrier.
 * @export
 * @interface ShippingService
 */
export interface ShippingService {
    /**
     * A plain text representation of a carrier\'s shipping service. For example, \"UPS Ground\" or \"FedEx Standard Overnight\". 
     * @type {string}
     * @memberof ShippingService
     */
    ShippingServiceName: string;
    /**
     * The name of the carrier.
     * @type {string}
     * @memberof ShippingService
     */
    CarrierName: string;
    /**
     * An Amazon-defined shipping service identifier.
     * @type {string}
     * @memberof ShippingService
     */
    ShippingServiceId: string;
    /**
     * An Amazon-defined shipping service offer identifier.
     * @type {string}
     * @memberof ShippingService
     */
    ShippingServiceOfferId: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingService
     */
    ShipDate: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingService
     */
    EarliestEstimatedDeliveryDate?: string;
    /**
     * 
     * @type {string}
     * @memberof ShippingService
     */
    LatestEstimatedDeliveryDate?: string;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof ShippingService
     */
    Rate: CurrencyAmount;
    /**
     * 
     * @type {ShippingServiceOptions}
     * @memberof ShippingService
     */
    ShippingServiceOptions: ShippingServiceOptions;
    /**
     * 
     * @type {AvailableShippingServiceOptions}
     * @memberof ShippingService
     */
    AvailableShippingServiceOptions?: AvailableShippingServiceOptions;
    /**
     * List of label formats.
     * @type {Array<LabelFormat>}
     * @memberof ShippingService
     */
    AvailableLabelFormats?: Array<LabelFormat>;
    /**
     * The available label formats.
     * @type {Array<LabelFormatOption>}
     * @memberof ShippingService
     */
    AvailableFormatOptionsForLabel?: Array<LabelFormatOption>;
    /**
     * When true, additional seller inputs are required.
     * @type {boolean}
     * @memberof ShippingService
     */
    RequiresAdditionalSellerInputs: boolean;
}
/**
 * Extra services provided by a carrier.
 * @export
 * @interface ShippingServiceOptions
 */
export interface ShippingServiceOptions {
    /**
     * 
     * @type {DeliveryExperienceType}
     * @memberof ShippingServiceOptions
     */
    DeliveryExperience: DeliveryExperienceType;
    /**
     * 
     * @type {CurrencyAmount}
     * @memberof ShippingServiceOptions
     */
    DeclaredValue?: CurrencyAmount;
    /**
     * When true, the carrier will pick up the package.  Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
     * @type {boolean}
     * @memberof ShippingServiceOptions
     */
    CarrierWillPickUp: boolean;
    /**
     * 
     * @type {CarrierWillPickUpOption}
     * @memberof ShippingServiceOptions
     */
    CarrierWillPickUpOption?: CarrierWillPickUpOption;
    /**
     * 
     * @type {LabelFormat}
     * @memberof ShippingServiceOptions
     */
    LabelFormat?: LabelFormat;
}
/**
 * The type of standard identifier to print on the label.
 * @export
 * @enum {string}
 */
export enum StandardIdForLabel {
    AmazonOrderId = 'AmazonOrderId'
}

/**
 * A carrier who is temporarily unavailable, most likely due to a service outage experienced by the carrier.
 * @export
 * @interface TemporarilyUnavailableCarrier
 */
export interface TemporarilyUnavailableCarrier {
    /**
     * The name of the carrier.
     * @type {string}
     * @memberof TemporarilyUnavailableCarrier
     */
    CarrierName: string;
}
/**
 * A carrier whose terms and conditions have not been accepted by the seller.
 * @export
 * @interface TermsAndConditionsNotAcceptedCarrier
 */
export interface TermsAndConditionsNotAcceptedCarrier {
    /**
     * The name of the carrier.
     * @type {string}
     * @memberof TermsAndConditionsNotAcceptedCarrier
     */
    CarrierName: string;
}
/**
 * The unit of length.
 * @export
 * @enum {string}
 */
export enum UnitOfLength {
    Inches = 'inches',
    Centimeters = 'centimeters'
}

/**
 * The unit of weight.
 * @export
 * @enum {string}
 */
export enum UnitOfWeight {
    Oz = 'oz',
    G = 'g'
}

/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The weight value.
     * @type {number}
     * @memberof Weight
     */
    Value: number;
    /**
     * 
     * @type {UnitOfWeight}
     * @memberof Weight
     */
    Unit: UnitOfWeight;
}

/**
 * MerchantFulfillmentApi - axios parameter creator
 * @export
 */
export const MerchantFulfillmentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: async (shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipment', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipmentOld: async (shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipmentOld', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}/cancel`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment: async (body: CreateShipmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createShipment', 'body', body)
            const localVarPath = `/mfn/v0/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputs: async (body: GetAdditionalSellerInputsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAdditionalSellerInputs', 'body', body)
            const localVarPath = `/mfn/v0/additionalSellerInputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputsOld: async (body: GetAdditionalSellerInputsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getAdditionalSellerInputsOld', 'body', body)
            const localVarPath = `/mfn/v0/sellerInputs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServices: async (body: GetEligibleShipmentServicesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getEligibleShipmentServices', 'body', body)
            const localVarPath = `/mfn/v0/eligibleShippingServices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServicesOld: async (body: GetEligibleShipmentServicesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getEligibleShipmentServicesOld', 'body', body)
            const localVarPath = `/mfn/v0/eligibleServices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/mfn/v0/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MerchantFulfillmentApi - functional programming interface
 * @export
 */
export const MerchantFulfillmentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MerchantFulfillmentApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipmentOld(shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipmentOld(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipment(body: CreateShipmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipment(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalSellerInputs(body: GetAdditionalSellerInputsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdditionalSellerInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalSellerInputs(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalSellerInputsOld(body: GetAdditionalSellerInputsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAdditionalSellerInputsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalSellerInputsOld(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEligibleShipmentServices(body: GetEligibleShipmentServicesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEligibleShipmentServicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEligibleShipmentServices(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEligibleShipmentServicesOld(body: GetEligibleShipmentServicesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetEligibleShipmentServicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEligibleShipmentServicesOld(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MerchantFulfillmentApi - factory interface
 * @export
 */
export const MerchantFulfillmentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MerchantFulfillmentApiFp(configuration)
    return {
        /**
         * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment to cancel.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipmentOld(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipmentOld(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment(body: CreateShipmentRequest, options?: any): AxiosPromise<CreateShipmentResponse> {
            return localVarFp.createShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputs(body: GetAdditionalSellerInputsRequest, options?: any): AxiosPromise<GetAdditionalSellerInputsResponse> {
            return localVarFp.getAdditionalSellerInputs(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetAdditionalSellerInputsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalSellerInputsOld(body: GetAdditionalSellerInputsRequest, options?: any): AxiosPromise<GetAdditionalSellerInputsResponse> {
            return localVarFp.getAdditionalSellerInputsOld(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServices(body: GetEligibleShipmentServicesRequest, options?: any): AxiosPromise<GetEligibleShipmentServicesResponse> {
            return localVarFp.getEligibleShipmentServices(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetEligibleShipmentServicesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEligibleShipmentServicesOld(body: GetEligibleShipmentServicesRequest, options?: any): AxiosPromise<GetEligibleShipmentServicesResponse> {
            return localVarFp.getEligibleShipmentServicesOld(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId The Amazon-defined shipment identifier for the shipment.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(shipmentId: string, options?: any): AxiosPromise<GetShipmentResponse> {
            return localVarFp.getShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCancelShipmentRequest
 */
export interface MerchantFulfillmentApiCancelShipmentRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment to cancel.
     * @type {string}
     * @memberof MerchantFulfillmentApiCancelShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for cancelShipmentOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCancelShipmentOldRequest
 */
export interface MerchantFulfillmentApiCancelShipmentOldRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment to cancel.
     * @type {string}
     * @memberof MerchantFulfillmentApiCancelShipmentOld
     */
    readonly shipmentId: string
}

/**
 * Request parameters for createShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiCreateShipmentRequest
 */
export interface MerchantFulfillmentApiCreateShipmentRequest {
    /**
     * 
     * @type {CreateShipmentRequest}
     * @memberof MerchantFulfillmentApiCreateShipment
     */
    readonly body: CreateShipmentRequest
}

/**
 * Request parameters for getAdditionalSellerInputs operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetAdditionalSellerInputsRequest
 */
export interface MerchantFulfillmentApiGetAdditionalSellerInputsRequest {
    /**
     * 
     * @type {GetAdditionalSellerInputsRequest}
     * @memberof MerchantFulfillmentApiGetAdditionalSellerInputs
     */
    readonly body: GetAdditionalSellerInputsRequest
}

/**
 * Request parameters for getAdditionalSellerInputsOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest
 */
export interface MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest {
    /**
     * 
     * @type {GetAdditionalSellerInputsRequest}
     * @memberof MerchantFulfillmentApiGetAdditionalSellerInputsOld
     */
    readonly body: GetAdditionalSellerInputsRequest
}

/**
 * Request parameters for getEligibleShipmentServices operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetEligibleShipmentServicesRequest
 */
export interface MerchantFulfillmentApiGetEligibleShipmentServicesRequest {
    /**
     * 
     * @type {GetEligibleShipmentServicesRequest}
     * @memberof MerchantFulfillmentApiGetEligibleShipmentServices
     */
    readonly body: GetEligibleShipmentServicesRequest
}

/**
 * Request parameters for getEligibleShipmentServicesOld operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest
 */
export interface MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest {
    /**
     * 
     * @type {GetEligibleShipmentServicesRequest}
     * @memberof MerchantFulfillmentApiGetEligibleShipmentServicesOld
     */
    readonly body: GetEligibleShipmentServicesRequest
}

/**
 * Request parameters for getShipment operation in MerchantFulfillmentApi.
 * @export
 * @interface MerchantFulfillmentApiGetShipmentRequest
 */
export interface MerchantFulfillmentApiGetShipmentRequest {
    /**
     * The Amazon-defined shipment identifier for the shipment.
     * @type {string}
     * @memberof MerchantFulfillmentApiGetShipment
     */
    readonly shipmentId: string
}

/**
 * MerchantFulfillmentApi - object-oriented interface
 * @export
 * @class MerchantFulfillmentApi
 * @extends {BaseAPI}
 */
export class MerchantFulfillmentApi extends BaseAPI {
    /**
     * Cancel the shipment indicated by the specified shipment identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCancelShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public cancelShipment(requestParameters: MerchantFulfillmentApiCancelShipmentRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).cancelShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel the shipment indicated by the specified shipment identifer.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCancelShipmentOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public cancelShipmentOld(requestParameters: MerchantFulfillmentApiCancelShipmentOldRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).cancelShipmentOld(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a shipment with the information provided.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiCreateShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public createShipment(requestParameters: MerchantFulfillmentApiCreateShipmentRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).createShipment(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetAdditionalSellerInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getAdditionalSellerInputs(requestParameters: MerchantFulfillmentApiGetAdditionalSellerInputsRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).getAdditionalSellerInputs(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of additional seller inputs required for a ship method. This is generally used for international shipping.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getAdditionalSellerInputsOld(requestParameters: MerchantFulfillmentApiGetAdditionalSellerInputsOldRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).getAdditionalSellerInputsOld(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetEligibleShipmentServicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getEligibleShipmentServices(requestParameters: MerchantFulfillmentApiGetEligibleShipmentServicesRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).getEligibleShipmentServices(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping service offers that satisfy the specified shipment request details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getEligibleShipmentServicesOld(requestParameters: MerchantFulfillmentApiGetEligibleShipmentServicesOldRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).getEligibleShipmentServicesOld(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the shipment information for an existing shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MerchantFulfillmentApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MerchantFulfillmentApi
     */
    public getShipment(requestParameters: MerchantFulfillmentApiGetShipmentRequest, options?: any) {
        return MerchantFulfillmentApiFp(this.configuration).getShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }
}


