/* tslint:disable */
/* eslint-disable */
/**
 * Amazon Shipping API Model
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * The version of the OpenAPI document: v2
 * Contact: amazon-shipping-api@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of that address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * Name of the business or institution associated with address.
     * @type {string}
     * @memberof Address
     */
    companyName?: string;
    /**
     * The state, county or region where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion: string;
    /**
     * The city or town where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * The two digit country code. Follows ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The email address of the contact associated with the address.
     * @type {string}
     * @memberof Address
     */
    email?: string;
    /**
     * The phone number of the person, business or institution located at that address and should be included with country Extensions Code.
     * @type {string}
     * @memberof Address
     */
    phoneNumber?: string;
}
/**
 * Amazon Order information, populating this field is compulsory if shipment source channel is Amazon.
 * @export
 * @interface AmazonOrderDetails
 */
export interface AmazonOrderDetails {
    /**
     * Unique identifier for an Amazon Order, provided by Amazon. Purchase orderId should be populated in case of DF shipments.
     * @type {string}
     * @memberof AmazonOrderDetails
     */
    orderId: string;
}
/**
 * Amazon shipment information, populating this field is compulsory for shipment
 * @export
 * @interface AmazonShipmentDetails
 */
export interface AmazonShipmentDetails {
    /**
     * Unique identifier for an Amazon Shipment. Purchase orderId should be populated in case of DF shipments
     * @type {string}
     * @memberof AmazonShipmentDetails
     */
    shipmentId: string;
}
/**
 * Value Added Services that is available for a shipping service offering.
 * @export
 * @interface AvailableValueAddedServiceGroup
 */
export interface AvailableValueAddedServiceGroup {
    /**
     * Type of the Value Added Service group.
     * @type {string}
     * @memberof AvailableValueAddedServiceGroup
     */
    groupId: string;
    /**
     * Name of the Value Added Service group.
     * @type {string}
     * @memberof AvailableValueAddedServiceGroup
     */
    groupDescription: string;
    /**
     * Indicates that the value added service group requires one of the option to be specified. If the group is not required then a specific VAS does not need to be selected; otherwise, one must be supplied.
     * @type {boolean}
     * @memberof AvailableValueAddedServiceGroup
     */
    isRequired: boolean;
    /**
     * 
     * @type {Array<ValueAddedService>}
     * @memberof AvailableValueAddedServiceGroup
     */
    valueAddedServices?: Array<ValueAddedService>;
}
/**
 * Response schema for CancelShipment operation.
 * @export
 * @interface CancelShipmentResponse
 */
export interface CancelShipmentResponse {
    /**
     * The payload for getRates operation.
     * @type {object}
     * @memberof CancelShipmentResponse
     */
    payload?: object;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * Shipment source channel related information.
 * @export
 * @interface ChannelDetails
 */
export interface ChannelDetails {
    /**
     * Type of shipment source Channels. AMAZON has to be selected if shipment source is Amazon, else select EXTERNAL.
     * @type {string}
     * @memberof ChannelDetails
     */
    channelType: ChannelDetailsChannelTypeEnum | 'AMAZON' | 'EXTERNAL';
    /**
     * 
     * @type {AmazonOrderDetails}
     * @memberof ChannelDetails
     */
    amazonOrderDetails?: AmazonOrderDetails;
    /**
     * 
     * @type {AmazonShipmentDetails}
     * @memberof ChannelDetails
     */
    amazonShipmentDetails?: AmazonShipmentDetails;
}

/**
    * @export
    * @enum {string}
    */
export enum ChannelDetailsChannelTypeEnum {
    Amazon = 'AMAZON',
    External = 'EXTERNAL'
}

/**
 * Amount and currency defined in the ISO 4217 standard format.
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * Currency amount value.
     * @type {number}
     * @memberof Currency
     */
    value: number;
    /**
     * ISO 4217 format 3-character currency code.
     * @type {string}
     * @memberof Currency
     */
    unit: string;
}
/**
 * A set of measurements for a three-dimensional object.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * The length of the package.
     * @type {number}
     * @memberof Dimensions
     */
    length: number;
    /**
     * The width of the package.
     * @type {number}
     * @memberof Dimensions
     */
    width: number;
    /**
     * The height of the package.
     * @type {number}
     * @memberof Dimensions
     */
    height: number;
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Dimensions
     */
    unit: DimensionsUnitEnum | 'INCH' | 'CENTIMETER';
}

/**
    * @export
    * @enum {string}
    */
export enum DimensionsUnitEnum {
    Inch = 'INCH',
    Centimeter = 'CENTIMETER'
}

/**
 * Item details specific for DF shipments.
 * @export
 * @interface DirectFulfillmentItemIdentifiers
 */
export interface DirectFulfillmentItemIdentifiers {
    /**
     * Unique identifier for an Item provided by the client for DF shipments. This is only populated for DF multi piece shipments and mandatory if vendor wants to change the configuration of packages in which the purchase order is shipped.
     * @type {string}
     * @memberof DirectFulfillmentItemIdentifiers
     */
    lineItemID: string;
    /**
     * Unique identifier for an Item provided by the client for DF shipments. This is only populated for DF shipments if single line item has multiple pieces and will be defaulted to 1 if not provided.
     * @type {string}
     * @memberof DirectFulfillmentItemIdentifiers
     */
    pieceNumber?: string;
}
/**
 * The payload schema for the direct purchase operation. ShipTo address is not needed if channelType is Amazon.
 * @export
 * @interface DirectPurchaseRequest
 */
export interface DirectPurchaseRequest {
    /**
     * 
     * @type {Address}
     * @memberof DirectPurchaseRequest
     */
    shipTo?: Address;
    /**
     * 
     * @type {Address}
     * @memberof DirectPurchaseRequest
     */
    shipFrom?: Address;
    /**
     * 
     * @type {Address}
     * @memberof DirectPurchaseRequest
     */
    returnTo?: Address;
    /**
     * List of packages that are to be shipped through a shipping service offering.
     * @type {Array<Package>}
     * @memberof DirectPurchaseRequest
     */
    packages?: Array<Package>;
    /**
     * 
     * @type {ChannelDetails}
     * @memberof DirectPurchaseRequest
     */
    channelDetails: ChannelDetails;
    /**
     * 
     * @type {RequestedDocumentSpecification}
     * @memberof DirectPurchaseRequest
     */
    labelSpecifications?: RequestedDocumentSpecification;
}
/**
 * The response schema for the DirectPurchase operation.
 * @export
 * @interface DirectPurchaseResponse
 */
export interface DirectPurchaseResponse {
    /**
     * 
     * @type {DirectPurchaseResponsePayload}
     * @memberof DirectPurchaseResponse
     */
    payload?: DirectPurchaseResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof DirectPurchaseResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for DirectPurchase operation.
 * @export
 * @interface DirectPurchaseResponsePayload
 */
export interface DirectPurchaseResponsePayload {
    /**
     * The unique shipment identifier provided by service.
     * @type {string}
     * @memberof DirectPurchaseResponsePayload
     */
    shipmentId: string;
    /**
     * Post purchase details of the package that will be shipped through a shipping service.
     * @type {Array<PackageDocumentDetail>}
     * @memberof DirectPurchaseResponsePayload
     */
    packageDocumentDetailList?: Array<PackageDocumentDetail>;
}
/**
 * File Format of the document.
 * @export
 * @enum {string}
 */
export enum DocumentFormat {
    Pdf = 'PDF',
    Png = 'PNG',
    Zpl = 'ZPL'
}

/**
 * Size dimensions of the label.
 * @export
 * @interface DocumentSize
 */
export interface DocumentSize {
    /**
     * 
     * @type {number}
     * @memberof DocumentSize
     */
    width: number;
    /**
     * 
     * @type {number}
     * @memberof DocumentSize
     */
    length: number;
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof DocumentSize
     */
    unit: DocumentSizeUnitEnum | 'INCH' | 'CENTIMETER';
}

/**
    * @export
    * @enum {string}
    */
export enum DocumentSizeUnitEnum {
    Inch = 'INCH',
    Centimeter = 'CENTIMETER'
}

/**
 * Type of shipping document.
 * @export
 * @enum {string}
 */
export enum DocumentType {
    Packslip = 'PACKSLIP',
    Label = 'LABEL',
    Receipt = 'RECEIPT',
    CustomForm = 'CUSTOM_FORM'
}

/**
 * A Tracking Event.
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {EventCode}
     * @memberof Event
     */
    eventCode: EventCode | 'READY_FOR_RECEIVE' | 'PICKUP_DONE' | 'DELIVERED' | 'DEPARTED' | 'DELIVERY_ATTEMPTED' | 'LOST' | 'OUT_FOR_DELIVERY' | 'ARRIVED_AT_CARRIER_FACILITY' | 'REJECTED' | 'UNDELIVERABLE' | 'PICKUP_CANCELLED';
    /**
     * 
     * @type {Location}
     * @memberof Event
     */
    location?: Location;
    /**
     * ISO 8601 formatted timestamp of an event.
     * @type {string}
     * @memberof Event
     */
    eventTime: string;
}
/**
 * Code for an event that indicates the Event Type.
 * @export
 * @enum {string}
 */
export enum EventCode {
    ReadyForReceive = 'READY_FOR_RECEIVE',
    PickupDone = 'PICKUP_DONE',
    Delivered = 'DELIVERED',
    Departed = 'DEPARTED',
    DeliveryAttempted = 'DELIVERY_ATTEMPTED',
    Lost = 'LOST',
    OutForDelivery = 'OUT_FOR_DELIVERY',
    ArrivedAtCarrierFacility = 'ARRIVED_AT_CARRIER_FACILITY',
    Rejected = 'REJECTED',
    Undeliverable = 'UNDELIVERABLE',
    PickupCancelled = 'PICKUP_CANCELLED'
}

/**
 * The response schema for the GetAdditionalInputs operation.
 * @export
 * @interface GetAdditionalInputsResponse
 */
export interface GetAdditionalInputsResponse {
    /**
     * JSON Schema for additional inputs required to purchase a shipping offering.
     * @type {object}
     * @memberof GetAdditionalInputsResponse
     */
    payload?: object;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetAdditionalInputsResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the getRates operation. ShipTo address is not needed if channelType is Amazon.
 * @export
 * @interface GetRatesRequest
 */
export interface GetRatesRequest {
    /**
     * 
     * @type {Address}
     * @memberof GetRatesRequest
     */
    shipTo?: Address;
    /**
     * 
     * @type {Address}
     * @memberof GetRatesRequest
     */
    shipFrom: Address;
    /**
     * 
     * @type {Address}
     * @memberof GetRatesRequest
     */
    returnTo?: Address;
    /**
     * The start date and time. This defaults to the current date and time.
     * @type {string}
     * @memberof GetRatesRequest
     */
    shipDate?: string;
    /**
     * List of packages that are to be shipped through a shipping service offering.
     * @type {Array<Package>}
     * @memberof GetRatesRequest
     */
    packages: Array<Package>;
    /**
     * 
     * @type {ChannelDetails}
     * @memberof GetRatesRequest
     */
    channelDetails: ChannelDetails;
}
/**
 * The response schema for the getRates operation.
 * @export
 * @interface GetRatesResponse
 */
export interface GetRatesResponse {
    /**
     * 
     * @type {GetRatesResponsePayload}
     * @memberof GetRatesResponse
     */
    payload?: GetRatesResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetRatesResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for getRates operation.
 * @export
 * @interface GetRatesResponsePayload
 */
export interface GetRatesResponsePayload {
    /**
     * Unique token generated for a GetRates request.
     * @type {string}
     * @memberof GetRatesResponsePayload
     */
    requestToken: string;
    /**
     * List of eligible shipping service offerings.
     * @type {Array<Rate>}
     * @memberof GetRatesResponsePayload
     */
    rates: Array<Rate>;
    /**
     * Details of an ineligible shipping service offering.
     * @type {Array<IneligibleRate>}
     * @memberof GetRatesResponsePayload
     */
    ineligibleRates?: Array<IneligibleRate>;
}
/**
 * The response schema for the GetShipmentDocuments operation.
 * @export
 * @interface GetShipmentDocumentsResponse
 */
export interface GetShipmentDocumentsResponse {
    /**
     * 
     * @type {GetShipmentDocumentsResponsePayload}
     * @memberof GetShipmentDocumentsResponse
     */
    payload?: GetShipmentDocumentsResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetShipmentDocumentsResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for GetShipmentDocuments operation.
 * @export
 * @interface GetShipmentDocumentsResponsePayload
 */
export interface GetShipmentDocumentsResponsePayload {
    /**
     * The unique shipment identifier provided by service.
     * @type {string}
     * @memberof GetShipmentDocumentsResponsePayload
     */
    shipmentId: string;
    /**
     * 
     * @type {PackageDocumentDetail}
     * @memberof GetShipmentDocumentsResponsePayload
     */
    packageDocumentDetail: PackageDocumentDetail;
}
/**
 * The response schema for the GetTracking operation.
 * @export
 * @interface GetTrackingResponse
 */
export interface GetTrackingResponse {
    /**
     * 
     * @type {GetTrackingResponsePayload}
     * @memberof GetTrackingResponse
     */
    payload?: GetTrackingResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetTrackingResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for GetTracking operation.
 * @export
 * @interface GetTrackingResponsePayload
 */
export interface GetTrackingResponsePayload {
    /**
     * Carrier generated identifier for a package in a purchased shipment.
     * @type {string}
     * @memberof GetTrackingResponsePayload
     */
    trackingId: string;
    /**
     * List of tracking events.
     * @type {Array<Event>}
     * @memberof GetTrackingResponsePayload
     */
    eventHistory: Array<Event>;
    /**
     * ISO 8601 standard date-time by when the shipment is promised to be delivered.
     * @type {string}
     * @memberof GetTrackingResponsePayload
     */
    promisedDeliveryDate: string;
    /**
     * 
     * @type {TrackingSummary}
     * @memberof GetTrackingResponsePayload
     */
    summary: TrackingSummary;
}
/**
 * Reason that makes a shipping service offering ineligible.
 * @export
 * @interface IneligibilityReason
 */
export interface IneligibilityReason {
    /**
     * 
     * @type {IneligibilityReasonCode}
     * @memberof IneligibilityReason
     */
    code: IneligibilityReasonCode | 'NO_COVERAGE' | 'PICKUP_SLOT_RESTRICTION' | 'UNSUPPORTED_VAS' | 'VAS_COMBINATION_RESTRICTION' | 'SIZE_RESTRICTIONS' | 'WEIGHT_RESTRICTIONS' | 'LATE_DELIVERY' | 'PROGRAM_CONSTRAINTS' | 'TERMS_AND_CONDITIONS_NOT_ACCEPTED' | 'UNKNOWN';
    /**
     * Descriptive message for the ineligibility reason.
     * @type {string}
     * @memberof IneligibilityReason
     */
    message: string;
}
/**
 * Code for the ineligibility reason.
 * @export
 * @enum {string}
 */
export enum IneligibilityReasonCode {
    NoCoverage = 'NO_COVERAGE',
    PickupSlotRestriction = 'PICKUP_SLOT_RESTRICTION',
    UnsupportedVas = 'UNSUPPORTED_VAS',
    VasCombinationRestriction = 'VAS_COMBINATION_RESTRICTION',
    SizeRestrictions = 'SIZE_RESTRICTIONS',
    WeightRestrictions = 'WEIGHT_RESTRICTIONS',
    LateDelivery = 'LATE_DELIVERY',
    ProgramConstraints = 'PROGRAM_CONSTRAINTS',
    TermsAndConditionsNotAccepted = 'TERMS_AND_CONDITIONS_NOT_ACCEPTED',
    Unknown = 'UNKNOWN'
}

/**
 * List of ineligible shipping service offerings.
 * @export
 * @interface IneligibleRate
 */
export interface IneligibleRate {
    /**
     * An identifier for the shipping service provided by service.
     * @type {string}
     * @memberof IneligibleRate
     */
    serviceId: string;
    /**
     * Name of the shipping service provided by service.
     * @type {string}
     * @memberof IneligibleRate
     */
    serviceName: string;
    /**
     * Carrier name for the offering.
     * @type {string}
     * @memberof IneligibleRate
     */
    carrierName: string;
    /**
     * Carrier identifier for the offering, provided by Carrier.
     * @type {string}
     * @memberof IneligibleRate
     */
    carrierId: string;
    /**
     * List of reasons that makes a service offering ineligible.
     * @type {Array<IneligibilityReason>}
     * @memberof IneligibleRate
     */
    ineligibilityReasons: Array<IneligibilityReason>;
}
/**
 * Item in the package.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {Currency}
     * @memberof Item
     */
    itemValue?: Currency;
    /**
     * Product description of the item.
     * @type {string}
     * @memberof Item
     */
    description?: string;
    /**
     * Unique identifier for an Item provided by the client.
     * @type {string}
     * @memberof Item
     */
    itemIdentifier?: string;
    /**
     * Number of units. Item quantity is required.
     * @type {number}
     * @memberof Item
     */
    quantity: number;
    /**
     * 
     * @type {Weight}
     * @memberof Item
     */
    weight?: Weight;
    /**
     * Boolean indicator whether an item is Hazmat or not. Defaults to false.
     * @type {boolean}
     * @memberof Item
     */
    isHazmat?: boolean;
    /**
     * List of unique serial numbers to match against an Amazon package to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped in the request. Only applicable when channel source is Amazon.
     * @type {Array<string>}
     * @memberof Item
     */
    serialNumbers?: Array<string>;
    /**
     * 
     * @type {DirectFulfillmentItemIdentifiers}
     * @memberof Item
     */
    directFulfillmentItemIdentifiers?: DirectFulfillmentItemIdentifiers;
}
/**
 * Linear measurement value.
 * @export
 * @interface Length
 */
export interface Length {
    /**
     * Value.
     * @type {number}
     * @memberof Length
     */
    value: number;
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Length
     */
    unit: LengthUnitEnum | 'INCH' | 'CENTIMETER';
}

/**
    * @export
    * @enum {string}
    */
export enum LengthUnitEnum {
    Inch = 'INCH',
    Centimeter = 'CENTIMETER'
}

/**
 * The location where the person, business or institution is located.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The state, county or region where the person, business or institution is located.
     * @type {string}
     * @memberof Location
     */
    stateOrRegion?: string;
    /**
     * The city or town where the person, business or institution is located.
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * The two digit country code. Follows ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Location
     */
    countryCode?: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Location
     */
    postalCode?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * Package that is to be shipped through a shipping service offering.
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * 
     * @type {Dimensions}
     * @memberof Package
     */
    dimensions: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Package
     */
    weight: Weight;
    /**
     * 
     * @type {Currency}
     * @memberof Package
     */
    insuredValue: Currency;
    /**
     * Indicator whether the package is Hazmat or not. Defaults to false.
     * @type {boolean}
     * @memberof Package
     */
    isHazmat?: boolean;
    /**
     * Client provided unique identifier for a package being shipped. Should be preserved by client as this is used as a parameter in GetShipmentDocuments call.
     * @type {string}
     * @memberof Package
     */
    packageClientReferenceId: string;
    /**
     * List of items.
     * @type {Array<Item>}
     * @memberof Package
     */
    items: Array<Item>;
}
/**
 * Document related to a package.
 * @export
 * @interface PackageDocument
 */
export interface PackageDocument {
    /**
     * 
     * @type {DocumentType}
     * @memberof PackageDocument
     */
    type: DocumentType | 'PACKSLIP' | 'LABEL' | 'RECEIPT' | 'CUSTOM_FORM';
    /**
     * 
     * @type {DocumentFormat}
     * @memberof PackageDocument
     */
    format: DocumentFormat | 'PDF' | 'PNG' | 'ZPL';
    /**
     * Base 64 encoded file contents.
     * @type {string}
     * @memberof PackageDocument
     */
    contents: string;
}
/**
 * Post purchase detail of the package that will be shipped through a shipping service.
 * @export
 * @interface PackageDocumentDetail
 */
export interface PackageDocumentDetail {
    /**
     * Client provided unique identifier for a package being shipped. Should be preserved by client as this is used as a parameter in GetShipmentDocuments call.
     * @type {string}
     * @memberof PackageDocumentDetail
     */
    packageClientReferenceId: string;
    /**
     * List of documents related to a package.
     * @type {Array<PackageDocument>}
     * @memberof PackageDocumentDetail
     */
    packageDocuments: Array<PackageDocument>;
    /**
     * Carrier generated identifier for a package in a purchased shipment.
     * @type {string}
     * @memberof PackageDocumentDetail
     */
    trackingId?: string;
}
/**
 * Format options available for a label.
 * @export
 * @interface PrintOption
 */
export interface PrintOption {
    /**
     * List of supported DPI options for a document.
     * @type {Array<number>}
     * @memberof PrintOption
     */
    supportedDPIs?: Array<number>;
    /**
     * List of supported page layout options for a document.
     * @type {Array<string>}
     * @memberof PrintOption
     */
    supportedPageLayouts: Array<string>;
    /**
     * List of supported needFileJoining boolean values for a document.
     * @type {Array<boolean>}
     * @memberof PrintOption
     */
    supportedFileJoiningOptions: Array<boolean>;
    /**
     * 
     * @type {Array<SupportedDocumentDetail>}
     * @memberof PrintOption
     */
    supportedDocumentDetails: Array<SupportedDocumentDetail>;
}
/**
 * Time windows promised for pickup and delivery events.
 * @export
 * @interface Promise
 */
export interface Promise {
    /**
     * 
     * @type {TimeWindow}
     * @memberof Promise
     */
    deliveryWindow?: TimeWindow;
    /**
     * 
     * @type {TimeWindow}
     * @memberof Promise
     */
    pickupWindow?: TimeWindow;
}
/**
 * The payload schema for the PurchaseShipment operation.
 * @export
 * @interface PurchaseShipmentRequest
 */
export interface PurchaseShipmentRequest {
    /**
     * Unique token generated for a GetRates request.
     * @type {string}
     * @memberof PurchaseShipmentRequest
     */
    requestToken: string;
    /**
     * An identifier for the rating/offering provided by service.
     * @type {string}
     * @memberof PurchaseShipmentRequest
     */
    rateId: string;
    /**
     * 
     * @type {RequestedDocumentSpecification}
     * @memberof PurchaseShipmentRequest
     */
    requestedDocumentSpecification: RequestedDocumentSpecification;
    /**
     * Value Added Services that are to be applied for a shipping service purchase.
     * @type {Array<RequestedValueAddedService>}
     * @memberof PurchaseShipmentRequest
     */
    requestedValueAddedServices?: Array<RequestedValueAddedService>;
    /**
     * Additional inputs required to purchase an offering. JSON should adhere to the json schema returned in GetAdditionalInputsResponse. Applicable only if \'requiresAdditionalInputs\' field of GetRates response is true.
     * @type {object}
     * @memberof PurchaseShipmentRequest
     */
    additionalInputs?: object;
}
/**
 * The response schema for the PurchaseShipment operation.
 * @export
 * @interface PurchaseShipmentResponse
 */
export interface PurchaseShipmentResponse {
    /**
     * 
     * @type {PurchaseShipmentResponsePayload}
     * @memberof PurchaseShipmentResponse
     */
    payload?: PurchaseShipmentResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof PurchaseShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for PurchaseShipment operation.
 * @export
 * @interface PurchaseShipmentResponsePayload
 */
export interface PurchaseShipmentResponsePayload {
    /**
     * The unique shipment identifier provided by service.
     * @type {string}
     * @memberof PurchaseShipmentResponsePayload
     */
    shipmentId: string;
    /**
     * Post purchase details of the package that will be shipped through a shipping service.
     * @type {Array<PackageDocumentDetail>}
     * @memberof PurchaseShipmentResponsePayload
     */
    packageDocumentDetails: Array<PackageDocumentDetail>;
    /**
     * 
     * @type {Promise}
     * @memberof PurchaseShipmentResponsePayload
     */
    promise: Promise;
}
/**
 * Details of a shipping service offering.
 * @export
 * @interface Rate
 */
export interface Rate {
    /**
     * An identifier for the rating/offering provided by service.
     * @type {string}
     * @memberof Rate
     */
    rateId: string;
    /**
     * Carrier identifier for the offering, provided by Carrier.
     * @type {string}
     * @memberof Rate
     */
    carrierId: string;
    /**
     * Carrier name for the offering.
     * @type {string}
     * @memberof Rate
     */
    carrierName: string;
    /**
     * An identifier for the shipping service provided by service.
     * @type {string}
     * @memberof Rate
     */
    serviceId: string;
    /**
     * Name of the shipping service provided by service.
     * @type {string}
     * @memberof Rate
     */
    serviceName: string;
    /**
     * 
     * @type {Weight}
     * @memberof Rate
     */
    billedWeight?: Weight;
    /**
     * 
     * @type {Currency}
     * @memberof Rate
     */
    totalCharge: Currency;
    /**
     * 
     * @type {Promise}
     * @memberof Rate
     */
    promise: Promise;
    /**
     * Document Specifications that are supported for a service offering.
     * @type {Array<SupportedDocumentSpecification>}
     * @memberof Rate
     */
    supportedDocumentSpecifications: Array<SupportedDocumentSpecification>;
    /**
     * Value Added Services that are available for a shipping service offering.
     * @type {Array<AvailableValueAddedServiceGroup>}
     * @memberof Rate
     */
    availableValueAddedServiceGroups?: Array<AvailableValueAddedServiceGroup>;
    /**
     * This boolean flag indicates if the shipping offering requires additional inputs to be passed for purchase. GetAdditionalInputs API should be invoked if this value is true.
     * @type {boolean}
     * @memberof Rate
     */
    requiresAdditionalInputs: boolean;
}
/**
 * Document\'s specifications requested in purchase. Should be inline with Supported Specifications provided in getRates response, else purchase fails.
 * @export
 * @interface RequestedDocumentSpecification
 */
export interface RequestedDocumentSpecification {
    /**
     * 
     * @type {DocumentFormat}
     * @memberof RequestedDocumentSpecification
     */
    format: DocumentFormat | 'PDF' | 'PNG' | 'ZPL';
    /**
     * 
     * @type {DocumentSize}
     * @memberof RequestedDocumentSpecification
     */
    size: DocumentSize;
    /**
     * Dpi (Dots per Inch) value used in printing.
     * @type {number}
     * @memberof RequestedDocumentSpecification
     */
    dpi?: number;
    /**
     * Indicator for position of label on the paper. Should be the same value as returned in GetRates response.
     * @type {string}
     * @memberof RequestedDocumentSpecification
     */
    pageLayout?: string;
    /**
     * Indicator whether files should be stitched together or returned separately. Defaults to false.
     * @type {boolean}
     * @memberof RequestedDocumentSpecification
     */
    needFileJoining: boolean;
    /**
     * 
     * @type {Array<DocumentType>}
     * @memberof RequestedDocumentSpecification
     */
    requestedDocumentTypes: Array<(DocumentType | 'PACKSLIP' | 'LABEL' | 'RECEIPT' | 'CUSTOM_FORM')>;
}
/**
 * Value Added Services that is to be applied for a shipping service purchase.
 * @export
 * @interface RequestedValueAddedService
 */
export interface RequestedValueAddedService {
    /**
     * Identifier of the selected value added service. The ID should be among the list of IDs returned in GetRates call, else purchase will fail.
     * @type {string}
     * @memberof RequestedValueAddedService
     */
    id: string;
}
/**
 * Status of the package being shipped.
 * @export
 * @enum {string}
 */
export enum Status {
    PreTransit = 'PRE_TRANSIT',
    InTransit = 'IN_TRANSIT',
    Delivered = 'DELIVERED',
    Lost = 'LOST',
    OutForDelivery = 'OUT_FOR_DELIVERY',
    Rejected = 'REJECTED',
    Undeliverable = 'UNDELIVERABLE',
    DeliveryAttempted = 'DELIVERY_ATTEMPTED',
    PickupCancelled = 'PICKUP_CANCELLED'
}

/**
 * Document types that are supported for a service offering.
 * @export
 * @interface SupportedDocumentDetail
 */
export interface SupportedDocumentDetail {
    /**
     * 
     * @type {DocumentType}
     * @memberof SupportedDocumentDetail
     */
    name: DocumentType | 'PACKSLIP' | 'LABEL' | 'RECEIPT' | 'CUSTOM_FORM';
    /**
     * Indicates whether Supported Document Type is mandatory or not.
     * @type {boolean}
     * @memberof SupportedDocumentDetail
     */
    isMandatory: boolean;
}
/**
 * Document specification that is supported for a service offering.
 * @export
 * @interface SupportedDocumentSpecification
 */
export interface SupportedDocumentSpecification {
    /**
     * 
     * @type {DocumentFormat}
     * @memberof SupportedDocumentSpecification
     */
    format: DocumentFormat | 'PDF' | 'PNG' | 'ZPL';
    /**
     * 
     * @type {DocumentSize}
     * @memberof SupportedDocumentSpecification
     */
    size: DocumentSize;
    /**
     * List of Format Options for a label.
     * @type {Array<PrintOption>}
     * @memberof SupportedDocumentSpecification
     */
    printOptions: Array<PrintOption>;
}
/**
 * Time duration used to specify the interval of an event. Eg: PickUp, Delivery.
 * @export
 * @interface TimeWindow
 */
export interface TimeWindow {
    /**
     * Start time of the window.
     * @type {string}
     * @memberof TimeWindow
     */
    startTime?: string;
    /**
     * End time of the window.
     * @type {string}
     * @memberof TimeWindow
     */
    endTime?: string;
}
/**
 * Summary of the tracking.
 * @export
 * @interface TrackingSummary
 */
export interface TrackingSummary {
    /**
     * 
     * @type {Status}
     * @memberof TrackingSummary
     */
    status?: Status | 'PRE_TRANSIT' | 'IN_TRANSIT' | 'DELIVERED' | 'LOST' | 'OUT_FOR_DELIVERY' | 'REJECTED' | 'UNDELIVERABLE' | 'DELIVERY_ATTEMPTED' | 'PICKUP_CANCELLED';
}
/**
 * Details of a Value Added Service.
 * @export
 * @interface ValueAddedService
 */
export interface ValueAddedService {
    /**
     * Identifier for the value added service.
     * @type {string}
     * @memberof ValueAddedService
     */
    id: string;
    /**
     * Human understandable name for the value added service.
     * @type {string}
     * @memberof ValueAddedService
     */
    name: string;
    /**
     * 
     * @type {Currency}
     * @memberof ValueAddedService
     */
    cost: Currency;
}
/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Weight
     */
    unit: WeightUnitEnum | 'GRAM' | 'KILOGRAM' | 'OUNCE' | 'POUND';
    /**
     * The measurement value.
     * @type {number}
     * @memberof Weight
     */
    value: number;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitEnum {
    Gram = 'GRAM',
    Kilogram = 'KILOGRAM',
    Ounce = 'OUNCE',
    Pound = 'POUND'
}


/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is cancelled. Else throws Error.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: (shipmentId: string, options: any = {}): RequestArgs => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipment', 'shipmentId', shipmentId)
            const localVarPath = `/shipping/v2/shipments/{shipmentId}/cancel`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases the shipping service for a shipment from the best fit service offering. Returns purchase related details and documents.
         * @param {DirectPurchaseRequest} body 
         * @param {string} [xAmznIdempotencyKey] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directPurchaseShipment: (body: DirectPurchaseRequest, xAmznIdempotencyKey?: string, locale?: string, options: any = {}): RequestArgs => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('directPurchaseShipment', 'body', body)
            const localVarPath = `/shipping/v2/shipments/directPurchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xAmznIdempotencyKey !== undefined && xAmznIdempotencyKey !== null) {
                localVarHeaderParameter['x-amzn-IdempotencyKey'] = String(xAmznIdempotencyKey);
            }

            if (locale !== undefined && locale !== null) {
                localVarHeaderParameter['locale'] = String(locale);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the JSON schema for additional inputs required for purchasing a shipping offering.  Should be invoked if \'requiresAdditionalInput\' value of GetRates response is true.
         * @param {string} requestToken RequestToken returned as part of GetRates response.
         * @param {string} rateId RateId for the shipping offering, returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInputs: (requestToken: string, rateId: string, options: any = {}): RequestArgs => {
            // verify required parameter 'requestToken' is not null or undefined
            assertParamExists('getAdditionalInputs', 'requestToken', requestToken)
            // verify required parameter 'rateId' is not null or undefined
            assertParamExists('getAdditionalInputs', 'rateId', rateId)
            const localVarPath = `/shipping/v2/shipments/additionalInputs/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (requestToken !== undefined) {
                localVarQueryParameter['requestToken'] = requestToken;
            }

            if (rateId !== undefined) {
                localVarQueryParameter['rateId'] = rateId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides available shipping service offerings.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates: (body: GetRatesRequest, options: any = {}): RequestArgs => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getRates', 'body', body)
            const localVarPath = `/shipping/v2/shipments/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets shipping documents associated with the package of a purchased shipment.
         * @param {string} shipmentId 
         * @param {string} packageClientReferenceId Package client reference identifier provided in the GetRates request.
         * @param {string} [format] File Format of the document (Eg: PDF, PNG, ZPL). Should be one of the supported formats returned in GetRates response.
         * @param {number} [dpi] Resolution of the document (Eg: 203, 300). Should be one of the supported resolutions returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDocuments: (shipmentId: string, packageClientReferenceId: string, format?: string, dpi?: number, options: any = {}): RequestArgs => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipmentDocuments', 'shipmentId', shipmentId)
            // verify required parameter 'packageClientReferenceId' is not null or undefined
            assertParamExists('getShipmentDocuments', 'packageClientReferenceId', packageClientReferenceId)
            const localVarPath = `/shipping/v2/shipments/{shipmentId}/documents`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageClientReferenceId !== undefined) {
                localVarQueryParameter['packageClientReferenceId'] = packageClientReferenceId;
            }

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (dpi !== undefined) {
                localVarQueryParameter['dpi'] = dpi;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the tracking information for a purchased shipment.
         * @param {string} trackingId Carrier generated tracking identifier provided in the PurchaseShipment response.
         * @param {string} carrierId Carrier identifier for the offering provided in the PurchaseShipment response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTracking: (trackingId: string, carrierId: string, options: any = {}): RequestArgs => {
            // verify required parameter 'trackingId' is not null or undefined
            assertParamExists('getTracking', 'trackingId', trackingId)
            // verify required parameter 'carrierId' is not null or undefined
            assertParamExists('getTracking', 'carrierId', carrierId)
            const localVarPath = `/shipping/v2/tracking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (trackingId !== undefined) {
                localVarQueryParameter['trackingId'] = trackingId;
            }

            if (carrierId !== undefined) {
                localVarQueryParameter['carrierId'] = carrierId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchases the shipping service for a shipment from the provided service offerings. Returns purchase related details and documents.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment: (body: PurchaseShipmentRequest, options: any = {}): RequestArgs => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('purchaseShipment', 'body', body)
            const localVarPath = `/shipping/v2/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is cancelled. Else throws Error.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(shipmentId: string, options?: any) {
            const localVarAxiosArgs = localVarAxiosParamCreator.cancelShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchases the shipping service for a shipment from the best fit service offering. Returns purchase related details and documents.
         * @param {DirectPurchaseRequest} body 
         * @param {string} [xAmznIdempotencyKey] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async directPurchaseShipment(body: DirectPurchaseRequest, xAmznIdempotencyKey?: string, locale?: string, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.directPurchaseShipment(body, xAmznIdempotencyKey, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the JSON schema for additional inputs required for purchasing a shipping offering.  Should be invoked if \'requiresAdditionalInput\' value of GetRates response is true.
         * @param {string} requestToken RequestToken returned as part of GetRates response.
         * @param {string} rateId RateId for the shipping offering, returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAdditionalInputs(requestToken: string, rateId: string, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAdditionalInputs(requestToken, rateId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides available shipping service offerings.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRates(body: GetRatesRequest, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRates(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets shipping documents associated with the package of a purchased shipment.
         * @param {string} shipmentId 
         * @param {string} packageClientReferenceId Package client reference identifier provided in the GetRates request.
         * @param {string} [format] File Format of the document (Eg: PDF, PNG, ZPL). Should be one of the supported formats returned in GetRates response.
         * @param {number} [dpi] Resolution of the document (Eg: 203, 300). Should be one of the supported resolutions returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipmentDocuments(shipmentId: string, packageClientReferenceId: string, format?: string, dpi?: number, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipmentDocuments(shipmentId, packageClientReferenceId, format, dpi, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the tracking information for a purchased shipment.
         * @param {string} trackingId Carrier generated tracking identifier provided in the PurchaseShipment response.
         * @param {string} carrierId Carrier identifier for the offering provided in the PurchaseShipment response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTracking(trackingId: string, carrierId: string, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTracking(trackingId, carrierId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchases the shipping service for a shipment from the provided service offerings. Returns purchase related details and documents.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseShipment(body: PurchaseShipmentRequest, options?: any) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseShipment(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * Cancels a purchased shipment. Returns an empty object if the shipment is cancelled. Else throws Error.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchases the shipping service for a shipment from the best fit service offering. Returns purchase related details and documents.
         * @param {DirectPurchaseRequest} body 
         * @param {string} [xAmznIdempotencyKey] 
         * @param {string} [locale] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        directPurchaseShipment(body: DirectPurchaseRequest, xAmznIdempotencyKey?: string, locale?: string, options?: any): AxiosPromise<DirectPurchaseResponse> {
            return localVarFp.directPurchaseShipment(body, xAmznIdempotencyKey, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the JSON schema for additional inputs required for purchasing a shipping offering.  Should be invoked if \'requiresAdditionalInput\' value of GetRates response is true.
         * @param {string} requestToken RequestToken returned as part of GetRates response.
         * @param {string} rateId RateId for the shipping offering, returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAdditionalInputs(requestToken: string, rateId: string, options?: any): AxiosPromise<GetAdditionalInputsResponse> {
            return localVarFp.getAdditionalInputs(requestToken, rateId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides available shipping service offerings.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates(body: GetRatesRequest, options?: any): AxiosPromise<GetRatesResponse> {
            return localVarFp.getRates(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets shipping documents associated with the package of a purchased shipment.
         * @param {string} shipmentId 
         * @param {string} packageClientReferenceId Package client reference identifier provided in the GetRates request.
         * @param {string} [format] File Format of the document (Eg: PDF, PNG, ZPL). Should be one of the supported formats returned in GetRates response.
         * @param {number} [dpi] Resolution of the document (Eg: 203, 300). Should be one of the supported resolutions returned in GetRates response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipmentDocuments(shipmentId: string, packageClientReferenceId: string, format?: string, dpi?: number, options?: any): AxiosPromise<GetShipmentDocumentsResponse> {
            return localVarFp.getShipmentDocuments(shipmentId, packageClientReferenceId, format, dpi, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the tracking information for a purchased shipment.
         * @param {string} trackingId Carrier generated tracking identifier provided in the PurchaseShipment response.
         * @param {string} carrierId Carrier identifier for the offering provided in the PurchaseShipment response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTracking(trackingId: string, carrierId: string, options?: any): AxiosPromise<GetTrackingResponse> {
            return localVarFp.getTracking(trackingId, carrierId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchases the shipping service for a shipment from the provided service offerings. Returns purchase related details and documents.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment(body: PurchaseShipmentRequest, options?: any): AxiosPromise<PurchaseShipmentResponse> {
            return localVarFp.purchaseShipment(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiCancelShipmentRequest
 */
export interface ShippingApiCancelShipmentRequest {
    /**
     * 
     * @type {string}
     * @memberof ShippingApiCancelShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for directPurchaseShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiDirectPurchaseShipmentRequest
 */
export interface ShippingApiDirectPurchaseShipmentRequest {
    /**
     * 
     * @type {DirectPurchaseRequest}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly body: DirectPurchaseRequest

    /**
     * 
     * @type {string}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly xAmznIdempotencyKey?: string

    /**
     * 
     * @type {string}
     * @memberof ShippingApiDirectPurchaseShipment
     */
    readonly locale?: string
}

/**
 * Request parameters for getAdditionalInputs operation in ShippingApi.
 * @export
 * @interface ShippingApiGetAdditionalInputsRequest
 */
export interface ShippingApiGetAdditionalInputsRequest {
    /**
     * RequestToken returned as part of GetRates response.
     * @type {string}
     * @memberof ShippingApiGetAdditionalInputs
     */
    readonly requestToken: string

    /**
     * RateId for the shipping offering, returned in GetRates response.
     * @type {string}
     * @memberof ShippingApiGetAdditionalInputs
     */
    readonly rateId: string
}

/**
 * Request parameters for getRates operation in ShippingApi.
 * @export
 * @interface ShippingApiGetRatesRequest
 */
export interface ShippingApiGetRatesRequest {
    /**
     * 
     * @type {GetRatesRequest}
     * @memberof ShippingApiGetRates
     */
    readonly body: GetRatesRequest
}

/**
 * Request parameters for getShipmentDocuments operation in ShippingApi.
 * @export
 * @interface ShippingApiGetShipmentDocumentsRequest
 */
export interface ShippingApiGetShipmentDocumentsRequest {
    /**
     * 
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly shipmentId: string

    /**
     * Package client reference identifier provided in the GetRates request.
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly packageClientReferenceId: string

    /**
     * File Format of the document (Eg: PDF, PNG, ZPL). Should be one of the supported formats returned in GetRates response.
     * @type {string}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly format?: string

    /**
     * Resolution of the document (Eg: 203, 300). Should be one of the supported resolutions returned in GetRates response.
     * @type {number}
     * @memberof ShippingApiGetShipmentDocuments
     */
    readonly dpi?: number
}

/**
 * Request parameters for getTracking operation in ShippingApi.
 * @export
 * @interface ShippingApiGetTrackingRequest
 */
export interface ShippingApiGetTrackingRequest {
    /**
     * Carrier generated tracking identifier provided in the PurchaseShipment response.
     * @type {string}
     * @memberof ShippingApiGetTracking
     */
    readonly trackingId: string

    /**
     * Carrier identifier for the offering provided in the PurchaseShipment response.
     * @type {string}
     * @memberof ShippingApiGetTracking
     */
    readonly carrierId: string
}

/**
 * Request parameters for purchaseShipment operation in ShippingApi.
 * @export
 * @interface ShippingApiPurchaseShipmentRequest
 */
export interface ShippingApiPurchaseShipmentRequest {
    /**
     * 
     * @type {PurchaseShipmentRequest}
     * @memberof ShippingApiPurchaseShipment
     */
    readonly body: PurchaseShipmentRequest
}

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * Cancels a purchased shipment. Returns an empty object if the shipment is cancelled. Else throws Error.
     * @param {ShippingApiCancelShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public cancelShipment(requestParameters: ShippingApiCancelShipmentRequest, options?: any) {
        return ShippingApiFp(this.configuration).cancelShipment(requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchases the shipping service for a shipment from the best fit service offering. Returns purchase related details and documents.
     * @param {ShippingApiDirectPurchaseShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public directPurchaseShipment(requestParameters: ShippingApiDirectPurchaseShipmentRequest, options?: any) {
        return ShippingApiFp(this.configuration).directPurchaseShipment(requestParameters.body, requestParameters.xAmznIdempotencyKey, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the JSON schema for additional inputs required for purchasing a shipping offering.  Should be invoked if \'requiresAdditionalInput\' value of GetRates response is true.
     * @param {ShippingApiGetAdditionalInputsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getAdditionalInputs(requestParameters: ShippingApiGetAdditionalInputsRequest, options?: any) {
        return ShippingApiFp(this.configuration).getAdditionalInputs(requestParameters.requestToken, requestParameters.rateId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides available shipping service offerings.
     * @param {ShippingApiGetRatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getRates(requestParameters: ShippingApiGetRatesRequest, options?: any) {
        return ShippingApiFp(this.configuration).getRates(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets shipping documents associated with the package of a purchased shipment.
     * @param {ShippingApiGetShipmentDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShipmentDocuments(requestParameters: ShippingApiGetShipmentDocumentsRequest, options?: any) {
        return ShippingApiFp(this.configuration).getShipmentDocuments(requestParameters.shipmentId, requestParameters.packageClientReferenceId, requestParameters.format, requestParameters.dpi, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the tracking information for a purchased shipment.
     * @param {ShippingApiGetTrackingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getTracking(requestParameters: ShippingApiGetTrackingRequest, options?: any) {
        return ShippingApiFp(this.configuration).getTracking(requestParameters.trackingId, requestParameters.carrierId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchases the shipping service for a shipment from the provided service offerings. Returns purchase related details and documents.
     * @param {ShippingApiPurchaseShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public purchaseShipment(requestParameters: ShippingApiPurchaseShipmentRequest, options?: any) {
        return ShippingApiFp(this.configuration).purchaseShipment(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


