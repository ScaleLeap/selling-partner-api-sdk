/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Services
 * With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Input for add appointment operation.
 * @export
 * @interface AddAppointmentRequest
 */
export interface AddAppointmentRequest {
    /**
     * 
     * @type {AppointmentTimeInput}
     * @memberof AddAppointmentRequest
     */
    appointmentTime: AppointmentTimeInput;
}
/**
 * The shipping address for the service job.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business, or institution.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The first line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The postal code. This can contain letters, digits, spaces, and/or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code, in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode?: string;
    /**
     * The phone number.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * The details of an appointment.
 * @export
 * @interface Appointment
 */
export interface Appointment {
    /**
     * The appointment identifier.
     * @type {string}
     * @memberof Appointment
     */
    appointmentId?: string;
    /**
     * The status of the appointment.
     * @type {string}
     * @memberof Appointment
     */
    appointmentStatus?: AppointmentAppointmentStatusEnum;
    /**
     * 
     * @type {AppointmentTime}
     * @memberof Appointment
     */
    appointmentTime?: AppointmentTime;
    /**
     * A list of technicians assigned to the service job.
     * @type {Array<Technician>}
     * @memberof Appointment
     */
    assignedTechnicians?: Array<Technician>;
    /**
     * The appointment identifier.
     * @type {string}
     * @memberof Appointment
     */
    rescheduledAppointmentId?: string;
    /**
     * 
     * @type {Poa}
     * @memberof Appointment
     */
    poa?: Poa;
}

/**
    * @export
    * @enum {string}
    */
export enum AppointmentAppointmentStatusEnum {
    Active = 'ACTIVE',
    Cancelled = 'CANCELLED',
    Completed = 'COMPLETED'
}

/**
 * The resource that performs or performed appointment fulfillment.
 * @export
 * @interface AppointmentResource
 */
export interface AppointmentResource {
    /**
     * The resource identifier.
     * @type {string}
     * @memberof AppointmentResource
     */
    resourceId?: string;
}
/**
 * A time window along with associated capacity in which the service can be performed.
 * @export
 * @interface AppointmentSlot
 */
export interface AppointmentSlot {
    /**
     * Time window start time in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentSlot
     */
    startTime?: string;
    /**
     * Time window end time in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentSlot
     */
    endTime?: string;
    /**
     * Number of resources for which a slot can be reserved.
     * @type {number}
     * @memberof AppointmentSlot
     */
    capacity?: number;
}
/**
 * Availability information as per the service context queried.
 * @export
 * @interface AppointmentSlotReport
 */
export interface AppointmentSlotReport {
    /**
     * Defines the type of slots.
     * @type {string}
     * @memberof AppointmentSlotReport
     */
    schedulingType?: AppointmentSlotReportSchedulingTypeEnum;
    /**
     * Start Time from which the appointment slots are generated in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentSlotReport
     */
    startTime?: string;
    /**
     * End Time up to which the appointment slots are generated in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentSlotReport
     */
    endTime?: string;
    /**
     * A list of time windows along with associated capacity in which the service can be performed.
     * @type {Array<AppointmentSlot>}
     * @memberof AppointmentSlotReport
     */
    appointmentSlots?: Array<AppointmentSlot>;
}

/**
    * @export
    * @enum {string}
    */
export enum AppointmentSlotReportSchedulingTypeEnum {
    RealTimeScheduling = 'REAL_TIME_SCHEDULING',
    NonRealTimeScheduling = 'NON_REAL_TIME_SCHEDULING'
}

/**
 * The time of the appointment window.
 * @export
 * @interface AppointmentTime
 */
export interface AppointmentTime {
    /**
     * The date and time of the start of the appointment window in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentTime
     */
    startTime: string;
    /**
     * The duration of the appointment window, in minutes.
     * @type {number}
     * @memberof AppointmentTime
     */
    durationInMinutes: number;
}
/**
 * The input appointment time details.
 * @export
 * @interface AppointmentTimeInput
 */
export interface AppointmentTimeInput {
    /**
     * The date, time in UTC for the start time of an appointment in ISO 8601 format.
     * @type {string}
     * @memberof AppointmentTimeInput
     */
    startTime: string;
    /**
     * The duration of an appointment in minutes.
     * @type {number}
     * @memberof AppointmentTimeInput
     */
    durationInMinutes?: number;
}
/**
 * Request schema for the `assignAppointmentResources` operation.
 * @export
 * @interface AssignAppointmentResourcesRequest
 */
export interface AssignAppointmentResourcesRequest {
    /**
     * List of resources that performs or performed job appointment fulfillment.
     * @type {Array<AppointmentResource>}
     * @memberof AssignAppointmentResourcesRequest
     */
    resources: Array<AppointmentResource>;
}
/**
 * Response schema for the `assignAppointmentResources` operation.
 * @export
 * @interface AssignAppointmentResourcesResponse
 */
export interface AssignAppointmentResourcesResponse {
    /**
     * 
     * @type {AssignAppointmentResourcesResponsePayload}
     * @memberof AssignAppointmentResourcesResponse
     */
    payload?: AssignAppointmentResourcesResponsePayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof AssignAppointmentResourcesResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the `assignAppointmentResource` operation.
 * @export
 * @interface AssignAppointmentResourcesResponsePayload
 */
export interface AssignAppointmentResourcesResponsePayload {
    /**
     * A list of warnings returned in the sucessful execution response of an API request.
     * @type {Array<Warning>}
     * @memberof AssignAppointmentResourcesResponsePayload
     */
    warnings?: Array<Warning>;
}
/**
 * Information about an item associated with the service job.
 * @export
 * @interface AssociatedItem
 */
export interface AssociatedItem {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof AssociatedItem
     */
    asin?: string;
    /**
     * The title of the item.
     * @type {string}
     * @memberof AssociatedItem
     */
    title?: string;
    /**
     * The total number of items included in the order.
     * @type {number}
     * @memberof AssociatedItem
     */
    quantity?: number;
    /**
     * The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
     * @type {string}
     * @memberof AssociatedItem
     */
    orderId?: string;
    /**
     * The status of the item.
     * @type {string}
     * @memberof AssociatedItem
     */
    itemStatus?: AssociatedItemItemStatusEnum;
    /**
     * The brand name of the item.
     * @type {string}
     * @memberof AssociatedItem
     */
    brandName?: string;
    /**
     * 
     * @type {ItemDelivery}
     * @memberof AssociatedItem
     */
    itemDelivery?: ItemDelivery;
}

/**
    * @export
    * @enum {string}
    */
export enum AssociatedItemItemStatusEnum {
    Active = 'ACTIVE',
    Cancelled = 'CANCELLED',
    Shipped = 'SHIPPED',
    Delivered = 'DELIVERED'
}

/**
 * `AvailabilityRecord` to represent the capacity of a resource over a time range.
 * @export
 * @interface AvailabilityRecord
 */
export interface AvailabilityRecord {
    /**
     * Denotes the time from when the resource is available in a day in ISO-8601 format.
     * @type {string}
     * @memberof AvailabilityRecord
     */
    startTime: string;
    /**
     * Denotes the time till when the resource is available in a day in ISO-8601 format.
     * @type {string}
     * @memberof AvailabilityRecord
     */
    endTime: string;
    /**
     * 
     * @type {Recurrence}
     * @memberof AvailabilityRecord
     */
    recurrence?: Recurrence;
    /**
     * Signifies the capacity of a resource which is available.
     * @type {number}
     * @memberof AvailabilityRecord
     */
    capacity?: number;
}
/**
 * Information about the buyer.
 * @export
 * @interface Buyer
 */
export interface Buyer {
    /**
     * The identifier of the buyer.
     * @type {string}
     * @memberof Buyer
     */
    buyerId?: string;
    /**
     * The name of the buyer.
     * @type {string}
     * @memberof Buyer
     */
    name?: string;
    /**
     * The phone number of the buyer.
     * @type {string}
     * @memberof Buyer
     */
    phone?: string;
    /**
     * When true, the service is for an Amazon Prime buyer.
     * @type {boolean}
     * @memberof Buyer
     */
    isPrimeMember?: boolean;
}
/**
 * Response schema for the `cancelReservation` operation.
 * @export
 * @interface CancelReservationResponse
 */
export interface CancelReservationResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelReservationResponse
     */
    errors?: Array<Error>;
}
/**
 * Response schema for the `cancelServiceJobByServiceJobId` operation.
 * @export
 * @interface CancelServiceJobByServiceJobIdResponse
 */
export interface CancelServiceJobByServiceJobIdResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelServiceJobByServiceJobIdResponse
     */
    errors?: Array<Error>;
}
/**
 * Type of capacity
 * @export
 * @enum {string}
 */
export enum CapacityType {
    ScheduledCapacity = 'SCHEDULED_CAPACITY',
    AvailableCapacity = 'AVAILABLE_CAPACITY',
    EncumberedCapacity = 'ENCUMBERED_CAPACITY',
    ReservedCapacity = 'RESERVED_CAPACITY'
}

/**
 * Response schema for the `completeServiceJobByServiceJobId` operation.
 * @export
 * @interface CompleteServiceJobByServiceJobIdResponse
 */
export interface CompleteServiceJobByServiceJobIdResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CompleteServiceJobByServiceJobIdResponse
     */
    errors?: Array<Error>;
}
/**
 * `CreateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
 * @export
 * @interface CreateReservationRecord
 */
export interface CreateReservationRecord {
    /**
     * 
     * @type {Reservation}
     * @memberof CreateReservationRecord
     */
    reservation?: Reservation;
    /**
     * A list of warnings returned in the sucessful execution response of an API request.
     * @type {Array<Warning>}
     * @memberof CreateReservationRecord
     */
    warnings?: Array<Warning>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateReservationRecord
     */
    errors?: Array<Error>;
}
/**
 * Request schema for the `createReservation` operation.
 * @export
 * @interface CreateReservationRequest
 */
export interface CreateReservationRequest {
    /**
     * Resource (store) identifier.
     * @type {string}
     * @memberof CreateReservationRequest
     */
    resourceId: string;
    /**
     * 
     * @type {Reservation}
     * @memberof CreateReservationRequest
     */
    reservation: Reservation;
}
/**
 * Response schema for the `createReservation` operation.
 * @export
 * @interface CreateReservationResponse
 */
export interface CreateReservationResponse {
    /**
     * 
     * @type {CreateReservationRecord}
     * @memberof CreateReservationResponse
     */
    payload?: CreateReservationRecord;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateReservationResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `createServiceDocumentUploadDestination` operation.
 * @export
 * @interface CreateServiceDocumentUploadDestination
 */
export interface CreateServiceDocumentUploadDestination {
    /**
     * 
     * @type {ServiceDocumentUploadDestination}
     * @memberof CreateServiceDocumentUploadDestination
     */
    payload?: ServiceDocumentUploadDestination;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateServiceDocumentUploadDestination
     */
    errors?: Array<Error>;
}
/**
 * The day of the week.
 * @export
 * @enum {string}
 */
export enum DayOfWeek {
    Monday = 'MONDAY',
    Tuesday = 'TUESDAY',
    Wednesday = 'WEDNESDAY',
    Thursday = 'THURSDAY',
    Friday = 'FRIDAY',
    Saturday = 'SATURDAY',
    Sunday = 'SUNDAY'
}

/**
 * Encryption details for required client-side encryption and decryption of document contents.
 * @export
 * @interface EncryptionDetails
 */
export interface EncryptionDetails {
    /**
     * The encryption standard required to encrypt or decrypt the document contents.
     * @type {string}
     * @memberof EncryptionDetails
     */
    standard: EncryptionDetailsStandardEnum;
    /**
     * The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC).
     * @type {string}
     * @memberof EncryptionDetails
     */
    initializationVector: string;
    /**
     * The encryption key used to encrypt or decrypt the document contents.
     * @type {string}
     * @memberof EncryptionDetails
     */
    key: string;
}

/**
    * @export
    * @enum {string}
    */
export enum EncryptionDetailsStandardEnum {
    Aes = 'AES'
}

/**
 * In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration.
 * @export
 * @interface FixedSlot
 */
export interface FixedSlot {
    /**
     * Start date time of slot in ISO 8601 format with precision of seconds.
     * @type {string}
     * @memberof FixedSlot
     */
    startDateTime?: string;
    /**
     * Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
     * @type {number}
     * @memberof FixedSlot
     */
    scheduledCapacity?: number;
    /**
     * Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
     * @type {number}
     * @memberof FixedSlot
     */
    availableCapacity?: number;
    /**
     * Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
     * @type {number}
     * @memberof FixedSlot
     */
    encumberedCapacity?: number;
    /**
     * Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
     * @type {number}
     * @memberof FixedSlot
     */
    reservedCapacity?: number;
}
/**
 * Response schema for the `getFixedSlotCapacity` operation.
 * @export
 * @interface FixedSlotCapacity
 */
export interface FixedSlotCapacity {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof FixedSlotCapacity
     */
    resourceId?: string;
    /**
     * The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
     * @type {number}
     * @memberof FixedSlotCapacity
     */
    slotDuration?: number;
    /**
     * Array of capacity slots in fixed slot format.
     * @type {Array<FixedSlot>}
     * @memberof FixedSlotCapacity
     */
    capacities?: Array<FixedSlot>;
    /**
     * Next page token, if there are more pages.
     * @type {string}
     * @memberof FixedSlotCapacity
     */
    nextPageToken?: string;
}
/**
 * The error response schema for the `getFixedSlotCapacity` operation.
 * @export
 * @interface FixedSlotCapacityErrors
 */
export interface FixedSlotCapacityErrors {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof FixedSlotCapacityErrors
     */
    errors?: Array<Error>;
}
/**
 * Request schema for the `getFixedSlotCapacity` operation. This schema is used to define the time range, capacity types and slot duration which are being queried.
 * @export
 * @interface FixedSlotCapacityQuery
 */
export interface FixedSlotCapacityQuery {
    /**
     * An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.
     * @type {Array<CapacityType>}
     * @memberof FixedSlotCapacityQuery
     */
    capacityTypes?: Array<CapacityType>;
    /**
     * Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.
     * @type {number}
     * @memberof FixedSlotCapacityQuery
     */
    slotDuration?: number;
    /**
     * Start date time from which the capacity slots are being requested in ISO 8601 format.
     * @type {string}
     * @memberof FixedSlotCapacityQuery
     */
    startDateTime: string;
    /**
     * End date time up to which the capacity slots are being requested in ISO 8601 format.
     * @type {string}
     * @memberof FixedSlotCapacityQuery
     */
    endDateTime: string;
}
/**
 * Document that captured during service appointment fulfillment that portrays proof of completion
 * @export
 * @interface FulfillmentDocument
 */
export interface FulfillmentDocument {
    /**
     * The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API.
     * @type {string}
     * @memberof FulfillmentDocument
     */
    uploadDestinationId?: string;
    /**
     * Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit.
     * @type {string}
     * @memberof FulfillmentDocument
     */
    contentSha256?: string;
}
/**
 * Input for fulfillment time details
 * @export
 * @interface FulfillmentTime
 */
export interface FulfillmentTime {
    /**
     * The date, time in UTC of the fulfillment start time in ISO 8601 format.
     * @type {string}
     * @memberof FulfillmentTime
     */
    startTime?: string;
    /**
     * The date, time in UTC of the fulfillment end time in ISO 8601 format.
     * @type {string}
     * @memberof FulfillmentTime
     */
    endTime?: string;
}
/**
 * The response of fetching appointment slots based on service context.
 * @export
 * @interface GetAppointmentSlotsResponse
 */
export interface GetAppointmentSlotsResponse {
    /**
     * 
     * @type {AppointmentSlotReport}
     * @memberof GetAppointmentSlotsResponse
     */
    payload?: AppointmentSlotReport;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetAppointmentSlotsResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getServiceJobByServiceJobId` operation.
 * @export
 * @interface GetServiceJobByServiceJobIdResponse
 */
export interface GetServiceJobByServiceJobIdResponse {
    /**
     * 
     * @type {ServiceJob}
     * @memberof GetServiceJobByServiceJobIdResponse
     */
    payload?: ServiceJob;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetServiceJobByServiceJobIdResponse
     */
    errors?: Array<Error>;
}
/**
 * Response schema for the `getServiceJobs` operation.
 * @export
 * @interface GetServiceJobsResponse
 */
export interface GetServiceJobsResponse {
    /**
     * 
     * @type {JobListing}
     * @memberof GetServiceJobsResponse
     */
    payload?: JobListing;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetServiceJobsResponse
     */
    errors?: Array<Error>;
}
/**
 * Delivery information for the item.
 * @export
 * @interface ItemDelivery
 */
export interface ItemDelivery {
    /**
     * The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
     * @type {string}
     * @memberof ItemDelivery
     */
    estimatedDeliveryDate?: string;
    /**
     * 
     * @type {ItemDeliveryPromise}
     * @memberof ItemDelivery
     */
    itemDeliveryPromise?: ItemDeliveryPromise;
}
/**
 * Promised delivery information for the item.
 * @export
 * @interface ItemDeliveryPromise
 */
export interface ItemDeliveryPromise {
    /**
     * The date and time of the start of the promised delivery window in ISO 8601 format.
     * @type {string}
     * @memberof ItemDeliveryPromise
     */
    startTime?: string;
    /**
     * The date and time of the end of the promised delivery window in ISO 8601 format.
     * @type {string}
     * @memberof ItemDeliveryPromise
     */
    endTime?: string;
}
/**
 * The payload for the `getServiceJobs` operation.
 * @export
 * @interface JobListing
 */
export interface JobListing {
    /**
     * Total result size of the query result.
     * @type {number}
     * @memberof JobListing
     */
    totalResultSize?: number;
    /**
     * A generated string used to pass information to your next request. If `nextPageToken` is returned, pass the value of `nextPageToken` to the `pageToken` to get next results.
     * @type {string}
     * @memberof JobListing
     */
    nextPageToken?: string;
    /**
     * A generated string used to pass information to your next request. If `previousPageToken` is returned, pass the value of `previousPageToken` to the `pageToken` to get previous page results.
     * @type {string}
     * @memberof JobListing
     */
    previousPageToken?: string;
    /**
     * List of job details for the given input.
     * @type {Array<ServiceJob>}
     * @memberof JobListing
     */
    jobs?: Array<ServiceJob>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
    /**
     * The type of error.
     * @type {string}
     * @memberof ModelError
     */
    errorLevel?: ModelErrorErrorLevelEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ModelErrorErrorLevelEnum {
    Error = 'ERROR',
    Warning = 'WARNING'
}

/**
 * Proof of Appointment (POA) details.
 * @export
 * @interface Poa
 */
export interface Poa {
    /**
     * 
     * @type {AppointmentTime}
     * @memberof Poa
     */
    appointmentTime?: AppointmentTime;
    /**
     * A list of technicians.
     * @type {Array<Technician>}
     * @memberof Poa
     */
    technicians?: Array<Technician>;
    /**
     * The identifier of the technician who uploaded the POA.
     * @type {string}
     * @memberof Poa
     */
    uploadingTechnician?: string;
    /**
     * The date and time when the POA was uploaded in ISO 8601 format.
     * @type {string}
     * @memberof Poa
     */
    uploadTime?: string;
    /**
     * The type of POA uploaded.
     * @type {string}
     * @memberof Poa
     */
    poaType?: PoaPoaTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum PoaPoaTypeEnum {
    NoSignatureDummyPos = 'NO_SIGNATURE_DUMMY_POS',
    CustomerSignature = 'CUSTOMER_SIGNATURE',
    DummyReceipt = 'DUMMY_RECEIPT',
    PoaReceipt = 'POA_RECEIPT'
}

/**
 * Range capacity entity where each entry has a capacity type and corresponding slots.
 * @export
 * @interface RangeCapacity
 */
export interface RangeCapacity {
    /**
     * 
     * @type {CapacityType}
     * @memberof RangeCapacity
     */
    capacityType?: CapacityType;
    /**
     * Array of capacity slots in range slot format.
     * @type {Array<RangeSlot>}
     * @memberof RangeCapacity
     */
    slots?: Array<RangeSlot>;
}
/**
 * Capacity slots represented in a format similar to availability rules.
 * @export
 * @interface RangeSlot
 */
export interface RangeSlot {
    /**
     * Start date time of slot in ISO 8601 format with precision of seconds.
     * @type {string}
     * @memberof RangeSlot
     */
    startDateTime?: string;
    /**
     * End date time of slot in ISO 8601 format with precision of seconds.
     * @type {string}
     * @memberof RangeSlot
     */
    endDateTime?: string;
    /**
     * Capacity of the slot.
     * @type {number}
     * @memberof RangeSlot
     */
    capacity?: number;
}
/**
 * Response schema for the `getRangeSlotCapacity` operation.
 * @export
 * @interface RangeSlotCapacity
 */
export interface RangeSlotCapacity {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof RangeSlotCapacity
     */
    resourceId?: string;
    /**
     * Array of range capacities where each entry is for a specific capacity type.
     * @type {Array<RangeCapacity>}
     * @memberof RangeSlotCapacity
     */
    capacities?: Array<RangeCapacity>;
    /**
     * Next page token, if there are more pages.
     * @type {string}
     * @memberof RangeSlotCapacity
     */
    nextPageToken?: string;
}
/**
 * The error response schema for the `getRangeSlotCapacity` operation.
 * @export
 * @interface RangeSlotCapacityErrors
 */
export interface RangeSlotCapacityErrors {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof RangeSlotCapacityErrors
     */
    errors?: Array<Error>;
}
/**
 * Request schema for the `getRangeSlotCapacity` operation. This schema is used to define the time range and capacity types that are being queried.
 * @export
 * @interface RangeSlotCapacityQuery
 */
export interface RangeSlotCapacityQuery {
    /**
     * An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.
     * @type {Array<CapacityType>}
     * @memberof RangeSlotCapacityQuery
     */
    capacityTypes?: Array<CapacityType>;
    /**
     * Start date time from which the capacity slots are being requested in ISO 8601 format.
     * @type {string}
     * @memberof RangeSlotCapacityQuery
     */
    startDateTime: string;
    /**
     * End date time up to which the capacity slots are being requested in ISO 8601 format.
     * @type {string}
     * @memberof RangeSlotCapacityQuery
     */
    endDateTime: string;
}
/**
 * Repeated occurrence of an event in a time range.
 * @export
 * @interface Recurrence
 */
export interface Recurrence {
    /**
     * End time of the recurrence.
     * @type {string}
     * @memberof Recurrence
     */
    endTime: string;
    /**
     * Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list.
     * @type {Array<DayOfWeek>}
     * @memberof Recurrence
     */
    daysOfWeek?: Array<DayOfWeek>;
    /**
     * Days of the month when recurrence is valid.
     * @type {Array<number>}
     * @memberof Recurrence
     */
    daysOfMonth?: Array<number>;
}
/**
 * Input for rescheduled appointment operation.
 * @export
 * @interface RescheduleAppointmentRequest
 */
export interface RescheduleAppointmentRequest {
    /**
     * 
     * @type {AppointmentTimeInput}
     * @memberof RescheduleAppointmentRequest
     */
    appointmentTime: AppointmentTimeInput;
    /**
     * The appointment reschedule reason code.
     * @type {string}
     * @memberof RescheduleAppointmentRequest
     */
    rescheduleReasonCode: string;
}
/**
 * Reservation object reduces the capacity of a resource.
 * @export
 * @interface Reservation
 */
export interface Reservation {
    /**
     * Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request.
     * @type {string}
     * @memberof Reservation
     */
    reservationId?: string;
    /**
     * Type of reservation.
     * @type {string}
     * @memberof Reservation
     */
    type: ReservationTypeEnum;
    /**
     * 
     * @type {AvailabilityRecord}
     * @memberof Reservation
     */
    availability: AvailabilityRecord;
}

/**
    * @export
    * @enum {string}
    */
export enum ReservationTypeEnum {
    Appointment = 'APPOINTMENT',
    Travel = 'TRAVEL',
    Vacation = 'VACATION',
    Break = 'BREAK',
    Training = 'TRAINING'
}

/**
 * The scope of work for the order.
 * @export
 * @interface ScopeOfWork
 */
export interface ScopeOfWork {
    /**
     * The Amazon Standard Identification Number (ASIN) of the service job.
     * @type {string}
     * @memberof ScopeOfWork
     */
    asin?: string;
    /**
     * The title of the service job.
     * @type {string}
     * @memberof ScopeOfWork
     */
    title?: string;
    /**
     * The number of service jobs.
     * @type {number}
     * @memberof ScopeOfWork
     */
    quantity?: number;
    /**
     * A list of skills required to perform the job.
     * @type {Array<string>}
     * @memberof ScopeOfWork
     */
    requiredSkills?: Array<string>;
}
/**
 * Information about the seller of the service job.
 * @export
 * @interface Seller
 */
export interface Seller {
    /**
     * The identifier of the seller of the service job.
     * @type {string}
     * @memberof Seller
     */
    sellerId?: string;
}
/**
 * Information about an upload destination.
 * @export
 * @interface ServiceDocumentUploadDestination
 */
export interface ServiceDocumentUploadDestination {
    /**
     * The unique identifier to be used by APIs that reference the upload destination.
     * @type {string}
     * @memberof ServiceDocumentUploadDestination
     */
    uploadDestinationId: string;
    /**
     * The URL to which to upload the file.
     * @type {string}
     * @memberof ServiceDocumentUploadDestination
     */
    url: string;
    /**
     * 
     * @type {EncryptionDetails}
     * @memberof ServiceDocumentUploadDestination
     */
    encryptionDetails: EncryptionDetails;
    /**
     * The headers to include in the upload request.
     * @type {object}
     * @memberof ServiceDocumentUploadDestination
     */
    headers?: object;
}
/**
 * The job details of a service.
 * @export
 * @interface ServiceJob
 */
export interface ServiceJob {
    /**
     * The date and time of the creation of the job in ISO 8601 format.
     * @type {string}
     * @memberof ServiceJob
     */
    createTime?: string;
    /**
     * Amazon identifier for the service job.
     * @type {string}
     * @memberof ServiceJob
     */
    serviceJobId?: string;
    /**
     * The status of the service job.
     * @type {string}
     * @memberof ServiceJob
     */
    serviceJobStatus?: ServiceJobServiceJobStatusEnum;
    /**
     * 
     * @type {ScopeOfWork}
     * @memberof ServiceJob
     */
    scopeOfWork?: ScopeOfWork;
    /**
     * 
     * @type {Seller}
     * @memberof ServiceJob
     */
    seller?: Seller;
    /**
     * 
     * @type {ServiceJobProvider}
     * @memberof ServiceJob
     */
    serviceJobProvider?: ServiceJobProvider;
    /**
     * A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
     * @type {Array<AppointmentTime>}
     * @memberof ServiceJob
     */
    preferredAppointmentTimes?: Array<AppointmentTime>;
    /**
     * A list of appointments.
     * @type {Array<Appointment>}
     * @memberof ServiceJob
     */
    appointments?: Array<Appointment>;
    /**
     * The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
     * @type {string}
     * @memberof ServiceJob
     */
    serviceOrderId?: string;
    /**
     * The marketplace identifier.
     * @type {string}
     * @memberof ServiceJob
     */
    marketplaceId?: string;
    /**
     * The Amazon-defined identifier for the region scope.
     * @type {string}
     * @memberof ServiceJob
     */
    storeId?: string;
    /**
     * 
     * @type {Buyer}
     * @memberof ServiceJob
     */
    buyer?: Buyer;
    /**
     * A list of items associated with the service job.
     * @type {Array<AssociatedItem>}
     * @memberof ServiceJob
     */
    associatedItems?: Array<AssociatedItem>;
    /**
     * 
     * @type {ServiceLocation}
     * @memberof ServiceJob
     */
    serviceLocation?: ServiceLocation;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceJobServiceJobStatusEnum {
    NotServiced = 'NOT_SERVICED',
    Cancelled = 'CANCELLED',
    Completed = 'COMPLETED',
    PendingSchedule = 'PENDING_SCHEDULE',
    NotFulfillable = 'NOT_FULFILLABLE',
    Hold = 'HOLD',
    PaymentDeclined = 'PAYMENT_DECLINED'
}

/**
 * Information about the service job provider.
 * @export
 * @interface ServiceJobProvider
 */
export interface ServiceJobProvider {
    /**
     * The identifier of the service job provider.
     * @type {string}
     * @memberof ServiceJobProvider
     */
    serviceJobProviderId?: string;
}
/**
 * Information about the location of the service job.
 * @export
 * @interface ServiceLocation
 */
export interface ServiceLocation {
    /**
     * The location of the service job.
     * @type {string}
     * @memberof ServiceLocation
     */
    serviceLocationType?: ServiceLocationServiceLocationTypeEnum;
    /**
     * 
     * @type {Address}
     * @memberof ServiceLocation
     */
    address?: Address;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceLocationServiceLocationTypeEnum {
    InHome = 'IN_HOME',
    InStore = 'IN_STORE',
    Online = 'ONLINE'
}

/**
 * Input for to be uploaded document.
 * @export
 * @interface ServiceUploadDocument
 */
export interface ServiceUploadDocument {
    /**
     * The content type of the to-be-uploaded file
     * @type {string}
     * @memberof ServiceUploadDocument
     */
    contentType: ServiceUploadDocumentContentTypeEnum;
    /**
     * The content length of the to-be-uploaded file
     * @type {number}
     * @memberof ServiceUploadDocument
     */
    contentLength: number;
    /**
     * An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
     * @type {string}
     * @memberof ServiceUploadDocument
     */
    contentMD5?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ServiceUploadDocumentContentTypeEnum {
    Tiff = 'TIFF',
    Jpg = 'JPG',
    Png = 'PNG',
    Jpeg = 'JPEG',
    Gif = 'GIF',
    Pdf = 'PDF'
}

/**
 * Input for set appointment fulfillment data operation.
 * @export
 * @interface SetAppointmentFulfillmentDataRequest
 */
export interface SetAppointmentFulfillmentDataRequest {
    /**
     * 
     * @type {FulfillmentTime}
     * @memberof SetAppointmentFulfillmentDataRequest
     */
    fulfillmentTime?: FulfillmentTime;
    /**
     * List of resources that performs or performed job appointment fulfillment.
     * @type {Array<AppointmentResource>}
     * @memberof SetAppointmentFulfillmentDataRequest
     */
    appointmentResources?: Array<AppointmentResource>;
    /**
     * List of documents captured during service appointment fulfillment.
     * @type {Array<FulfillmentDocument>}
     * @memberof SetAppointmentFulfillmentDataRequest
     */
    fulfillmentDocuments?: Array<FulfillmentDocument>;
}
/**
 * Response schema for the `addAppointmentForServiceJobByServiceJobId` and `rescheduleAppointmentForServiceJobByServiceJobId` operations.
 * @export
 * @interface SetAppointmentResponse
 */
export interface SetAppointmentResponse {
    /**
     * The appointment identifier.
     * @type {string}
     * @memberof SetAppointmentResponse
     */
    appointmentId?: string;
    /**
     * A list of warnings returned in the sucessful execution response of an API request.
     * @type {Array<Warning>}
     * @memberof SetAppointmentResponse
     */
    warnings?: Array<Warning>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SetAppointmentResponse
     */
    errors?: Array<Error>;
}
/**
 * A technician who is assigned to perform the service job in part or in full.
 * @export
 * @interface Technician
 */
export interface Technician {
    /**
     * The technician identifier.
     * @type {string}
     * @memberof Technician
     */
    technicianId?: string;
    /**
     * The name of the technician.
     * @type {string}
     * @memberof Technician
     */
    name?: string;
}
/**
 * `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
 * @export
 * @interface UpdateReservationRecord
 */
export interface UpdateReservationRecord {
    /**
     * 
     * @type {Reservation}
     * @memberof UpdateReservationRecord
     */
    reservation?: Reservation;
    /**
     * A list of warnings returned in the sucessful execution response of an API request.
     * @type {Array<Warning>}
     * @memberof UpdateReservationRecord
     */
    warnings?: Array<Warning>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateReservationRecord
     */
    errors?: Array<Error>;
}
/**
 * Request schema for the `updateReservation` operation.
 * @export
 * @interface UpdateReservationRequest
 */
export interface UpdateReservationRequest {
    /**
     * Resource (store) identifier.
     * @type {string}
     * @memberof UpdateReservationRequest
     */
    resourceId: string;
    /**
     * 
     * @type {Reservation}
     * @memberof UpdateReservationRequest
     */
    reservation: Reservation;
}
/**
 * Response schema for the `updateReservation` operation.
 * @export
 * @interface UpdateReservationResponse
 */
export interface UpdateReservationResponse {
    /**
     * 
     * @type {UpdateReservationRecord}
     * @memberof UpdateReservationResponse
     */
    payload?: UpdateReservationRecord;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateReservationResponse
     */
    errors?: Array<Error>;
}
/**
 * `UpdateScheduleRecord` entity contains the `AvailabilityRecord` if there is an error/warning while performing the requested operation on it.
 * @export
 * @interface UpdateScheduleRecord
 */
export interface UpdateScheduleRecord {
    /**
     * 
     * @type {AvailabilityRecord}
     * @memberof UpdateScheduleRecord
     */
    availability?: AvailabilityRecord;
    /**
     * A list of warnings returned in the sucessful execution response of an API request.
     * @type {Array<Warning>}
     * @memberof UpdateScheduleRecord
     */
    warnings?: Array<Warning>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateScheduleRecord
     */
    errors?: Array<Error>;
}
/**
 * Request schema for the `updateSchedule` operation.
 * @export
 * @interface UpdateScheduleRequest
 */
export interface UpdateScheduleRequest {
    /**
     * List of `AvailabilityRecord`s to represent the capacity of a resource over a time range.
     * @type {Array<AvailabilityRecord>}
     * @memberof UpdateScheduleRequest
     */
    schedules: Array<AvailabilityRecord>;
}
/**
 * Response schema for the `updateSchedule` operation.
 * @export
 * @interface UpdateScheduleResponse
 */
export interface UpdateScheduleResponse {
    /**
     * Contains the `UpdateScheduleRecords` for which the error/warning has occurred.
     * @type {Array<UpdateScheduleRecord>}
     * @memberof UpdateScheduleResponse
     */
    payload?: Array<UpdateScheduleRecord>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateScheduleResponse
     */
    errors?: Array<Error>;
}
/**
 * Warning returned when the request is successful, but there are important callouts based on which API clients should take defined actions.
 * @export
 * @interface Warning
 */
export interface Warning {
    /**
     * An warning code that identifies the type of warning that occurred.
     * @type {string}
     * @memberof Warning
     */
    code: string;
    /**
     * A message that describes the warning condition in a human-readable form.
     * @type {string}
     * @memberof Warning
     */
    message: string;
    /**
     * Additional details that can help the caller understand or address the warning.
     * @type {string}
     * @memberof Warning
     */
    details?: string;
}

/**
 * ServiceApi - axios parameter creator
 * @export
 */
export const ServiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, body: AddAppointmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('addAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources: async (serviceJobId: string, appointmentId: string, body: AssignAppointmentResourcesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('assignAppointmentResources', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('assignAppointmentResources', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('assignAppointmentResources', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation: async (reservationId: string, marketplaceIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('cancelReservation', 'reservationId', reservationId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('cancelReservation', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId: async (serviceJobId: string, cancellationReasonCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'cancellationReasonCode' is not null or undefined
            assertParamExists('cancelServiceJobByServiceJobId', 'cancellationReasonCode', cancellationReasonCode)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/cancellations`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cancellationReasonCode !== undefined) {
                localVarQueryParameter['cancellationReasonCode'] = cancellationReasonCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId: async (serviceJobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('completeServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/completions`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation: async (marketplaceIds: Array<string>, body: CreateReservationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createReservation', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createReservation', 'body', body)
            const localVarPath = `/service/v1/reservation`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination: async (body: ServiceUploadDocument, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createServiceDocumentUploadDestination', 'body', body)
            const localVarPath = `/service/v1/documents`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots: async (asin: string, storeId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getAppointmentSlots', 'asin', asin)
            // verify required parameter 'storeId' is not null or undefined
            assertParamExists('getAppointmentSlots', 'storeId', storeId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getAppointmentSlots', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/appointmentSlots`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId: async (serviceJobId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('getAppointmmentSlotsByJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getAppointmmentSlotsByJobId', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointmentSlots`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity: async (resourceId: string, marketplaceIds: Array<string>, body: FixedSlotCapacityQuery, nextPageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getFixedSlotCapacity', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/fixed`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity: async (resourceId: string, marketplaceIds: Array<string>, body: RangeSlotCapacityQuery, nextPageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getRangeSlotCapacity', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/capacity/range`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (nextPageToken !== undefined) {
                localVarQueryParameter['nextPageToken'] = nextPageToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId: async (serviceJobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('getServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs: async (marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, asins?: Array<string>, requiredSkills?: Array<string>, storeIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getServiceJobs', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/service/v1/serviceJobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serviceOrderIds) {
                localVarQueryParameter['serviceOrderIds'] = serviceOrderIds.join(COLLECTION_FORMATS.csv);
            }

            if (serviceJobStatus) {
                localVarQueryParameter['serviceJobStatus'] = serviceJobStatus.join(COLLECTION_FORMATS.csv);
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (sortField !== undefined) {
                localVarQueryParameter['sortField'] = sortField;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = createdBefore;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['lastUpdatedAfter'] = lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['lastUpdatedBefore'] = lastUpdatedBefore;
            }

            if (scheduleStartDate !== undefined) {
                localVarQueryParameter['scheduleStartDate'] = scheduleStartDate;
            }

            if (scheduleEndDate !== undefined) {
                localVarQueryParameter['scheduleEndDate'] = scheduleEndDate;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (asins) {
                localVarQueryParameter['asins'] = asins.join(COLLECTION_FORMATS.csv);
            }

            if (requiredSkills) {
                localVarQueryParameter['requiredSkills'] = requiredSkills.join(COLLECTION_FORMATS.csv);
            }

            if (storeIds) {
                localVarQueryParameter['storeIds'] = storeIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId: async (serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('rescheduleAppointmentForServiceJobByServiceJobId', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData: async (serviceJobId: string, appointmentId: string, body: SetAppointmentFulfillmentDataRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'serviceJobId' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'serviceJobId', serviceJobId)
            // verify required parameter 'appointmentId' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'appointmentId', appointmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setAppointmentFulfillmentData', 'body', body)
            const localVarPath = `/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment`
                .replace(`{${"serviceJobId"}}`, encodeURIComponent(String(serviceJobId)))
                .replace(`{${"appointmentId"}}`, encodeURIComponent(String(appointmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation: async (reservationId: string, marketplaceIds: Array<string>, body: UpdateReservationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reservationId' is not null or undefined
            assertParamExists('updateReservation', 'reservationId', reservationId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('updateReservation', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateReservation', 'body', body)
            const localVarPath = `/service/v1/reservation/{reservationId}`
                .replace(`{${"reservationId"}}`, encodeURIComponent(String(reservationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule: async (resourceId: string, marketplaceIds: Array<string>, body: UpdateScheduleRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceId' is not null or undefined
            assertParamExists('updateSchedule', 'resourceId', resourceId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('updateSchedule', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateSchedule', 'body', body)
            const localVarPath = `/service/v1/serviceResources/{resourceId}/schedules`
                .replace(`{${"resourceId"}}`, encodeURIComponent(String(resourceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ServiceApi - functional programming interface
 * @export
 */
export const ServiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ServiceApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAppointmentForServiceJobByServiceJobId(serviceJobId: string, body: AddAppointmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async assignAppointmentResources(serviceJobId: string, appointmentId: string, body: AssignAppointmentResourcesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AssignAppointmentResourcesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.assignAppointmentResources(serviceJobId, appointmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReservation(reservationId: string, marketplaceIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReservation(reservationId, marketplaceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelServiceJobByServiceJobId(serviceJobId: string, cancellationReasonCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async completeServiceJobByServiceJobId(serviceJobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CompleteServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.completeServiceJobByServiceJobId(serviceJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReservation(marketplaceIds: Array<string>, body: CreateReservationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReservation(marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createServiceDocumentUploadDestination(body: ServiceUploadDocument, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateServiceDocumentUploadDestination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceDocumentUploadDestination(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmentSlots(asin: string, storeId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAppointmmentSlotsByJobId(serviceJobId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFixedSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: FixedSlotCapacityQuery, nextPageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FixedSlotCapacity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRangeSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: RangeSlotCapacityQuery, nextPageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RangeSlotCapacity>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobByServiceJobId(serviceJobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobByServiceJobIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobByServiceJobId(serviceJobId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getServiceJobs(marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, asins?: Array<string>, requiredSkills?: Array<string>, storeIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetServiceJobsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setAppointmentFulfillmentData(serviceJobId: string, appointmentId: string, body: SetAppointmentFulfillmentDataRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateReservation(reservationId: string, marketplaceIds: Array<string>, body: UpdateReservationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateReservationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateReservation(reservationId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSchedule(resourceId: string, marketplaceIds: Array<string>, body: UpdateScheduleRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSchedule(resourceId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ServiceApi - factory interface
 * @export
 */
export const ServiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ServiceApiFp(configuration)
    return {
        /**
         * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {AddAppointmentRequest} body Add appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAppointmentForServiceJobByServiceJobId(serviceJobId: string, body: AddAppointmentRequest, options?: any): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.addAppointmentForServiceJobByServiceJobId(serviceJobId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {AssignAppointmentResourcesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        assignAppointmentResources(serviceJobId: string, appointmentId: string, body: AssignAppointmentResourcesRequest, options?: any): AxiosPromise<AssignAppointmentResourcesResponse> {
            return localVarFp.assignAppointmentResources(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReservation(reservationId: string, marketplaceIds: Array<string>, options?: any): AxiosPromise<CancelReservationResponse> {
            return localVarFp.cancelReservation(reservationId, marketplaceIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} cancellationReasonCode A cancel reason code that specifies the reason for cancelling a service job.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelServiceJobByServiceJobId(serviceJobId: string, cancellationReasonCode: string, options?: any): AxiosPromise<CancelServiceJobByServiceJobIdResponse> {
            return localVarFp.cancelServiceJobByServiceJobId(serviceJobId, cancellationReasonCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeServiceJobByServiceJobId(serviceJobId: string, options?: any): AxiosPromise<CompleteServiceJobByServiceJobIdResponse> {
            return localVarFp.completeServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {CreateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReservation(marketplaceIds: Array<string>, body: CreateReservationRequest, options?: any): AxiosPromise<CreateReservationResponse> {
            return localVarFp.createReservation(marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ServiceUploadDocument} body Upload document operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createServiceDocumentUploadDestination(body: ServiceUploadDocument, options?: any): AxiosPromise<CreateServiceDocumentUploadDestination> {
            return localVarFp.createServiceDocumentUploadDestination(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin ASIN associated with the service.
         * @param {string} storeId Store identifier defining the region scope to retrive appointment slots.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace for which appointment slots are queried
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmentSlots(asin: string, storeId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: any): AxiosPromise<GetAppointmentSlotsResponse> {
            return localVarFp.getAppointmentSlots(asin, storeId, marketplaceIds, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier to retrive appointment slots for associated service.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {string} [startTime] A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
         * @param {string} [endTime] A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAppointmmentSlotsByJobId(serviceJobId: string, marketplaceIds: Array<string>, startTime?: string, endTime?: string, options?: any): AxiosPromise<GetAppointmentSlotsResponse> {
            return localVarFp.getAppointmmentSlotsByJobId(serviceJobId, marketplaceIds, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {FixedSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFixedSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: FixedSlotCapacityQuery, nextPageToken?: string, options?: any): AxiosPromise<FixedSlotCapacity> {
            return localVarFp.getFixedSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource Identifier.
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {RangeSlotCapacityQuery} body Request body.
         * @param {string} [nextPageToken] Next page token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRangeSlotCapacity(resourceId: string, marketplaceIds: Array<string>, body: RangeSlotCapacityQuery, nextPageToken?: string, options?: any): AxiosPromise<RangeSlotCapacity> {
            return localVarFp.getRangeSlotCapacity(resourceId, marketplaceIds, body, nextPageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId A service job identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobByServiceJobId(serviceJobId: string, options?: any): AxiosPromise<GetServiceJobByServiceJobIdResponse> {
            return localVarFp.getServiceJobByServiceJobId(serviceJobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds Used to select jobs that were placed in the specified marketplaces.
         * @param {Array<string>} [serviceOrderIds] List of service order ids for the query you want to perform.Max values supported 20.
         * @param {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>} [serviceJobStatus] A list of one or more job status by which to filter the list of jobs.
         * @param {string} [pageToken] String returned in the response of your previous request.
         * @param {number} [pageSize] A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
         * @param {'JOB_DATE' | 'JOB_STATUS'} [sortField] Sort fields on which you want to sort the output.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort order for the query you want to perform.
         * @param {string} [createdAfter] A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [createdBefore] A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
         * @param {string} [lastUpdatedBefore] A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
         * @param {string} [scheduleStartDate] A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {string} [scheduleEndDate] A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
         * @param {Array<string>} [asins] List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
         * @param {Array<string>} [requiredSkills] A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
         * @param {Array<string>} [storeIds] List of Amazon-defined identifiers for the region scope. Max values supported is 50.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getServiceJobs(marketplaceIds: Array<string>, serviceOrderIds?: Array<string>, serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>, pageToken?: string, pageSize?: number, sortField?: 'JOB_DATE' | 'JOB_STATUS', sortOrder?: 'ASC' | 'DESC', createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, scheduleStartDate?: string, scheduleEndDate?: string, asins?: Array<string>, requiredSkills?: Array<string>, storeIds?: Array<string>, options?: any): AxiosPromise<GetServiceJobsResponse> {
            return localVarFp.getServiceJobs(marketplaceIds, serviceOrderIds, serviceJobStatus, pageToken, pageSize, sortField, sortOrder, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, scheduleStartDate, scheduleEndDate, asins, requiredSkills, storeIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon defined service job identifier.
         * @param {string} appointmentId An existing appointment identifier for the Service Job.
         * @param {RescheduleAppointmentRequest} body Reschedule appointment operation input details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId: string, appointmentId: string, body: RescheduleAppointmentRequest, options?: any): AxiosPromise<SetAppointmentResponse> {
            return localVarFp.rescheduleAppointmentForServiceJobByServiceJobId(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} serviceJobId An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
         * @param {string} appointmentId An Amazon-defined identifier of active service job appointment.
         * @param {SetAppointmentFulfillmentDataRequest} body Appointment fulfillment data collection details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setAppointmentFulfillmentData(serviceJobId: string, appointmentId: string, body: SetAppointmentFulfillmentDataRequest, options?: any): AxiosPromise<string> {
            return localVarFp.setAppointmentFulfillmentData(serviceJobId, appointmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} reservationId Reservation Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateReservationRequest} body Reservation details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateReservation(reservationId: string, marketplaceIds: Array<string>, body: UpdateReservationRequest, options?: any): AxiosPromise<UpdateReservationResponse> {
            return localVarFp.updateReservation(reservationId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} resourceId Resource (store) Identifier
         * @param {Array<string>} marketplaceIds An identifier for the marketplace in which the resource operates.
         * @param {UpdateScheduleRequest} body Schedule details
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSchedule(resourceId: string, marketplaceIds: Array<string>, body: UpdateScheduleRequest, options?: any): AxiosPromise<UpdateScheduleResponse> {
            return localVarFp.updateSchedule(resourceId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * Add appointment operation input details.
     * @type {AddAppointmentRequest}
     * @memberof ServiceApiAddAppointmentForServiceJobByServiceJobId
     */
    readonly body: AddAppointmentRequest
}

/**
 * Request parameters for assignAppointmentResources operation in ServiceApi.
 * @export
 * @interface ServiceApiAssignAppointmentResourcesRequest
 */
export interface ServiceApiAssignAppointmentResourcesRequest {
    /**
     * An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @type {string}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly serviceJobId: string

    /**
     * An Amazon-defined identifier of active service job appointment.
     * @type {string}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly appointmentId: string

    /**
     * 
     * @type {AssignAppointmentResourcesRequest}
     * @memberof ServiceApiAssignAppointmentResources
     */
    readonly body: AssignAppointmentResourcesRequest
}

/**
 * Request parameters for cancelReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiCancelReservationRequest
 */
export interface ServiceApiCancelReservationRequest {
    /**
     * Reservation Identifier
     * @type {string}
     * @memberof ServiceApiCancelReservation
     */
    readonly reservationId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiCancelReservation
     */
    readonly marketplaceIds: Array<string>
}

/**
 * Request parameters for cancelServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCancelServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCancelServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * A cancel reason code that specifies the reason for cancelling a service job.
     * @type {string}
     * @memberof ServiceApiCancelServiceJobByServiceJobId
     */
    readonly cancellationReasonCode: string
}

/**
 * Request parameters for completeServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiCompleteServiceJobByServiceJobIdRequest
 */
export interface ServiceApiCompleteServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiCompleteServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for createReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiCreateReservationRequest
 */
export interface ServiceApiCreateReservationRequest {
    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiCreateReservation
     */
    readonly marketplaceIds: Array<string>

    /**
     * Reservation details
     * @type {CreateReservationRequest}
     * @memberof ServiceApiCreateReservation
     */
    readonly body: CreateReservationRequest
}

/**
 * Request parameters for createServiceDocumentUploadDestination operation in ServiceApi.
 * @export
 * @interface ServiceApiCreateServiceDocumentUploadDestinationRequest
 */
export interface ServiceApiCreateServiceDocumentUploadDestinationRequest {
    /**
     * Upload document operation input details.
     * @type {ServiceUploadDocument}
     * @memberof ServiceApiCreateServiceDocumentUploadDestination
     */
    readonly body: ServiceUploadDocument
}

/**
 * Request parameters for getAppointmentSlots operation in ServiceApi.
 * @export
 * @interface ServiceApiGetAppointmentSlotsRequest
 */
export interface ServiceApiGetAppointmentSlotsRequest {
    /**
     * ASIN associated with the service.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly asin: string

    /**
     * Store identifier defining the region scope to retrive appointment slots.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly storeId: string

    /**
     * An identifier for the marketplace for which appointment slots are queried
     * @type {Array<string>}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly marketplaceIds: Array<string>

    /**
     * A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly startTime?: string

    /**
     * A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @type {string}
     * @memberof ServiceApiGetAppointmentSlots
     */
    readonly endTime?: string
}

/**
 * Request parameters for getAppointmmentSlotsByJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiGetAppointmmentSlotsByJobIdRequest
 */
export interface ServiceApiGetAppointmmentSlotsByJobIdRequest {
    /**
     * A service job identifier to retrive appointment slots for associated service.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly serviceJobId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly marketplaceIds: Array<string>

    /**
     * A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly startTime?: string

    /**
     * A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
     * @type {string}
     * @memberof ServiceApiGetAppointmmentSlotsByJobId
     */
    readonly endTime?: string
}

/**
 * Request parameters for getFixedSlotCapacity operation in ServiceApi.
 * @export
 * @interface ServiceApiGetFixedSlotCapacityRequest
 */
export interface ServiceApiGetFixedSlotCapacityRequest {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly marketplaceIds: Array<string>

    /**
     * Request body.
     * @type {FixedSlotCapacityQuery}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly body: FixedSlotCapacityQuery

    /**
     * Next page token returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetFixedSlotCapacity
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for getRangeSlotCapacity operation in ServiceApi.
 * @export
 * @interface ServiceApiGetRangeSlotCapacityRequest
 */
export interface ServiceApiGetRangeSlotCapacityRequest {
    /**
     * Resource Identifier.
     * @type {string}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly marketplaceIds: Array<string>

    /**
     * Request body.
     * @type {RangeSlotCapacityQuery}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly body: RangeSlotCapacityQuery

    /**
     * Next page token returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetRangeSlotCapacity
     */
    readonly nextPageToken?: string
}

/**
 * Request parameters for getServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobByServiceJobIdRequest
 */
export interface ServiceApiGetServiceJobByServiceJobIdRequest {
    /**
     * A service job identifier.
     * @type {string}
     * @memberof ServiceApiGetServiceJobByServiceJobId
     */
    readonly serviceJobId: string
}

/**
 * Request parameters for getServiceJobs operation in ServiceApi.
 * @export
 * @interface ServiceApiGetServiceJobsRequest
 */
export interface ServiceApiGetServiceJobsRequest {
    /**
     * Used to select jobs that were placed in the specified marketplaces.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly marketplaceIds: Array<string>

    /**
     * List of service order ids for the query you want to perform.Max values supported 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceOrderIds?: Array<string>

    /**
     * A list of one or more job status by which to filter the list of jobs.
     * @type {Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly serviceJobStatus?: Array<'NOT_SERVICED' | 'CANCELLED' | 'COMPLETED' | 'PENDING_SCHEDULE' | 'NOT_FULFILLABLE' | 'HOLD' | 'PAYMENT_DECLINED'>

    /**
     * String returned in the response of your previous request.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageToken?: string

    /**
     * A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20.
     * @type {number}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly pageSize?: number

    /**
     * Sort fields on which you want to sort the output.
     * @type {'JOB_DATE' | 'JOB_STATUS'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortField?: 'JOB_DATE' | 'JOB_STATUS'

    /**
     * Sort order for the query you want to perform.
     * @type {'ASC' | 'DESC'}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdAfter?: string

    /**
     * A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly createdBefore?: string

    /**
     * A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedAfter?: string

    /**
     * A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly lastUpdatedBefore?: string

    /**
     * A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleStartDate?: string

    /**
     * A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date.
     * @type {string}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly scheduleEndDate?: string

    /**
     * List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly asins?: Array<string>

    /**
     * A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly requiredSkills?: Array<string>

    /**
     * List of Amazon-defined identifiers for the region scope. Max values supported is 50.
     * @type {Array<string>}
     * @memberof ServiceApiGetServiceJobs
     */
    readonly storeIds?: Array<string>
}

/**
 * Request parameters for rescheduleAppointmentForServiceJobByServiceJobId operation in ServiceApi.
 * @export
 * @interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest
 */
export interface ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest {
    /**
     * An Amazon defined service job identifier.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly serviceJobId: string

    /**
     * An existing appointment identifier for the Service Job.
     * @type {string}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly appointmentId: string

    /**
     * Reschedule appointment operation input details.
     * @type {RescheduleAppointmentRequest}
     * @memberof ServiceApiRescheduleAppointmentForServiceJobByServiceJobId
     */
    readonly body: RescheduleAppointmentRequest
}

/**
 * Request parameters for setAppointmentFulfillmentData operation in ServiceApi.
 * @export
 * @interface ServiceApiSetAppointmentFulfillmentDataRequest
 */
export interface ServiceApiSetAppointmentFulfillmentDataRequest {
    /**
     * An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API.
     * @type {string}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly serviceJobId: string

    /**
     * An Amazon-defined identifier of active service job appointment.
     * @type {string}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly appointmentId: string

    /**
     * Appointment fulfillment data collection details.
     * @type {SetAppointmentFulfillmentDataRequest}
     * @memberof ServiceApiSetAppointmentFulfillmentData
     */
    readonly body: SetAppointmentFulfillmentDataRequest
}

/**
 * Request parameters for updateReservation operation in ServiceApi.
 * @export
 * @interface ServiceApiUpdateReservationRequest
 */
export interface ServiceApiUpdateReservationRequest {
    /**
     * Reservation Identifier
     * @type {string}
     * @memberof ServiceApiUpdateReservation
     */
    readonly reservationId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiUpdateReservation
     */
    readonly marketplaceIds: Array<string>

    /**
     * Reservation details
     * @type {UpdateReservationRequest}
     * @memberof ServiceApiUpdateReservation
     */
    readonly body: UpdateReservationRequest
}

/**
 * Request parameters for updateSchedule operation in ServiceApi.
 * @export
 * @interface ServiceApiUpdateScheduleRequest
 */
export interface ServiceApiUpdateScheduleRequest {
    /**
     * Resource (store) Identifier
     * @type {string}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly resourceId: string

    /**
     * An identifier for the marketplace in which the resource operates.
     * @type {Array<string>}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly marketplaceIds: Array<string>

    /**
     * Schedule details
     * @type {UpdateScheduleRequest}
     * @memberof ServiceApiUpdateSchedule
     */
    readonly body: UpdateScheduleRequest
}

/**
 * ServiceApi - object-oriented interface
 * @export
 * @class ServiceApi
 * @extends {BaseAPI}
 */
export class ServiceApi extends BaseAPI {
    /**
     * Adds an appointment to the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public addAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiAddAppointmentForServiceJobByServiceJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).addAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 2 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiAssignAppointmentResourcesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public assignAppointmentResources(requestParameters: ServiceApiAssignAppointmentResourcesRequest, options?: any) {
        return ServiceApiFp(this.configuration).assignAppointmentResources(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel a reservation.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public cancelReservation(requestParameters: ServiceApiCancelReservationRequest, options?: any) {
        return ServiceApiFp(this.configuration).cancelReservation(requestParameters.reservationId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCancelServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public cancelServiceJobByServiceJobId(requestParameters: ServiceApiCancelServiceJobByServiceJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).cancelServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.cancellationReasonCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completes the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCompleteServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public completeServiceJobByServiceJobId(requestParameters: ServiceApiCompleteServiceJobByServiceJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).completeServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public createReservation(requestParameters: ServiceApiCreateReservationRequest, options?: any) {
        return ServiceApiFp(this.configuration).createReservation(requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an upload destination.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiCreateServiceDocumentUploadDestinationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public createServiceDocumentUploadDestination(requestParameters: ServiceApiCreateServiceDocumentUploadDestinationRequest, options?: any) {
        return ServiceApiFp(this.configuration).createServiceDocumentUploadDestination(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets appointment slots as per the service context specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getAppointmentSlots(requestParameters: ServiceApiGetAppointmentSlotsRequest, options?: any) {
        return ServiceApiFp(this.configuration).getAppointmentSlots(requestParameters.asin, requestParameters.storeId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets appointment slots for the service associated with the service job id specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetAppointmmentSlotsByJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getAppointmmentSlotsByJobId(requestParameters: ServiceApiGetAppointmmentSlotsByJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).getAppointmmentSlotsByJobId(requestParameters.serviceJobId, requestParameters.marketplaceIds, requestParameters.startTime, requestParameters.endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides capacity in fixed-size slots.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetFixedSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getFixedSlotCapacity(requestParameters: ServiceApiGetFixedSlotCapacityRequest, options?: any) {
        return ServiceApiFp(this.configuration).getFixedSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides capacity slots in a format similar to availability records.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetRangeSlotCapacityRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getRangeSlotCapacity(requestParameters: ServiceApiGetRangeSlotCapacityRequest, options?: any) {
        return ServiceApiFp(this.configuration).getRangeSlotCapacity(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, requestParameters.nextPageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets details of service job indicated by the provided `serviceJobID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 20 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobByServiceJobId(requestParameters: ServiceApiGetServiceJobByServiceJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).getServiceJobByServiceJobId(requestParameters.serviceJobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets service job details for the specified filter query.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 40 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiGetServiceJobsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public getServiceJobs(requestParameters: ServiceApiGetServiceJobsRequest, options?: any) {
        return ServiceApiFp(this.configuration).getServiceJobs(requestParameters.marketplaceIds, requestParameters.serviceOrderIds, requestParameters.serviceJobStatus, requestParameters.pageToken, requestParameters.pageSize, requestParameters.sortField, requestParameters.sortOrder, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.scheduleStartDate, requestParameters.scheduleEndDate, requestParameters.asins, requestParameters.requiredSkills, requestParameters.storeIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Reschedules an appointment for the service job indicated by the service job identifier specified.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public rescheduleAppointmentForServiceJobByServiceJobId(requestParameters: ServiceApiRescheduleAppointmentForServiceJobByServiceJobIdRequest, options?: any) {
        return ServiceApiFp(this.configuration).rescheduleAppointmentForServiceJobByServiceJobId(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiSetAppointmentFulfillmentDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public setAppointmentFulfillmentData(requestParameters: ServiceApiSetAppointmentFulfillmentDataRequest, options?: any) {
        return ServiceApiFp(this.configuration).setAppointmentFulfillmentData(requestParameters.serviceJobId, requestParameters.appointmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a reservation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateReservationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public updateReservation(requestParameters: ServiceApiUpdateReservationRequest, options?: any) {
        return ServiceApiFp(this.configuration).updateReservation(requestParameters.reservationId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the schedule of the given resource.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ServiceApiUpdateScheduleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ServiceApi
     */
    public updateSchedule(requestParameters: ServiceApiUpdateScheduleRequest, options?: any) {
        return ServiceApiFp(this.configuration).updateSchedule(requestParameters.resourceId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


