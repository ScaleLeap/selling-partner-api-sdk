/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ASINIdentifier
 */
export interface ASINIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof ASINIdentifier
     */
    MarketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ASINIdentifier
     */
    ASIN: string;
}
/**
 * The attributes of the item.
 * @export
 * @interface AttributeSetListType
 */
export interface AttributeSetListType {
    /**
     * The actor attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Actor?: Array<string>;
    /**
     * The artist attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Artist?: Array<string>;
    /**
     * The aspect ratio attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    AspectRatio?: string;
    /**
     * The audience rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    AudienceRating?: string;
    /**
     * The author attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Author?: Array<string>;
    /**
     * The back finding attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    BackFinding?: string;
    /**
     * The band material type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    BandMaterialType?: string;
    /**
     * The binding attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Binding?: string;
    /**
     * The Bluray region attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    BlurayRegion?: string;
    /**
     * The brand attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Brand?: string;
    /**
     * The CERO age rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    CeroAgeRating?: string;
    /**
     * The chain type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ChainType?: string;
    /**
     * The clasp type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ClaspType?: string;
    /**
     * The color attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Color?: string;
    /**
     * The CPU manufacturer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    CpuManufacturer?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    CpuSpeed?: DecimalWithUnits;
    /**
     * The CPU type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    CpuType?: string;
    /**
     * The creator attributes of the item.
     * @type {Array<CreatorType>}
     * @memberof AttributeSetListType
     */
    Creator?: Array<CreatorType>;
    /**
     * The department attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Department?: string;
    /**
     * The director attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Director?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    DisplaySize?: DecimalWithUnits;
    /**
     * The edition attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Edition?: string;
    /**
     * The episode sequence attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    EpisodeSequence?: string;
    /**
     * The ESRB age rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    EsrbAgeRating?: string;
    /**
     * The feature attributes of the item
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Feature?: Array<string>;
    /**
     * The flavor attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Flavor?: string;
    /**
     * The format attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Format?: Array<string>;
    /**
     * The gem type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    GemType?: Array<string>;
    /**
     * The genre attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Genre?: string;
    /**
     * The golf club flex attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    GolfClubFlex?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    GolfClubLoft?: DecimalWithUnits;
    /**
     * The hand orientation attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    HandOrientation?: string;
    /**
     * The hard disk interface attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    HardDiskInterface?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    HardDiskSize?: DecimalWithUnits;
    /**
     * The hardware platform attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    HardwarePlatform?: string;
    /**
     * The hazardous material type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    HazardousMaterialType?: string;
    /**
     * 
     * @type {DimensionType}
     * @memberof AttributeSetListType
     */
    ItemDimensions?: DimensionType;
    /**
     * The adult product attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    IsAdultProduct?: boolean;
    /**
     * The autographed attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    IsAutographed?: boolean;
    /**
     * The is eligible for trade in attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    IsEligibleForTradeIn?: boolean;
    /**
     * The is memorabilia attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    IsMemorabilia?: boolean;
    /**
     * The issues per year attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    IssuesPerYear?: string;
    /**
     * The item part number attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ItemPartNumber?: string;
    /**
     * The label attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Label?: string;
    /**
     * The languages attribute of the item.
     * @type {Array<LanguageType>}
     * @memberof AttributeSetListType
     */
    Languages?: Array<LanguageType>;
    /**
     * The legal disclaimer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    LegalDisclaimer?: string;
    /**
     * 
     * @type {Price}
     * @memberof AttributeSetListType
     */
    ListPrice?: Price;
    /**
     * The manufacturer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Manufacturer?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    ManufacturerMaximumAge?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    ManufacturerMinimumAge?: DecimalWithUnits;
    /**
     * The manufacturer parts warranty description attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ManufacturerPartsWarrantyDescription?: string;
    /**
     * The material type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    MaterialType?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    MaximumResolution?: DecimalWithUnits;
    /**
     * The media type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    MediaType?: Array<string>;
    /**
     * The metal stamp attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    MetalStamp?: string;
    /**
     * The metal type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    MetalType?: string;
    /**
     * The model attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Model?: string;
    /**
     * The number of discs attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    NumberOfDiscs?: number;
    /**
     * The number of issues attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    NumberOfIssues?: number;
    /**
     * The number of items attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    NumberOfItems?: number;
    /**
     * The number of pages attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    NumberOfPages?: number;
    /**
     * The number of tracks attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    NumberOfTracks?: number;
    /**
     * The operating system attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    OperatingSystem?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    OpticalZoom?: DecimalWithUnits;
    /**
     * 
     * @type {DimensionType}
     * @memberof AttributeSetListType
     */
    PackageDimensions?: DimensionType;
    /**
     * The package quantity attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    PackageQuantity?: number;
    /**
     * The part number attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    PartNumber?: string;
    /**
     * The PEGI rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    PegiRating?: string;
    /**
     * The platform attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    Platform?: Array<string>;
    /**
     * The processor count attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    ProcessorCount?: number;
    /**
     * The product group attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ProductGroup?: string;
    /**
     * The product type name attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ProductTypeName?: string;
    /**
     * The product type subcategory attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ProductTypeSubcategory?: string;
    /**
     * The publication date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    PublicationDate?: string;
    /**
     * The publisher attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Publisher?: string;
    /**
     * The region code attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    RegionCode?: string;
    /**
     * The release date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ReleaseDate?: string;
    /**
     * The ring size attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    RingSize?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    RunningTime?: DecimalWithUnits;
    /**
     * The shaft material attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ShaftMaterial?: string;
    /**
     * The scent attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Scent?: string;
    /**
     * The season sequence attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    SeasonSequence?: string;
    /**
     * The Seikodo product code attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    SeikodoProductCode?: string;
    /**
     * The size attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Size?: string;
    /**
     * The size per pearl attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    SizePerPearl?: string;
    /**
     * 
     * @type {Image}
     * @memberof AttributeSetListType
     */
    SmallImage?: Image;
    /**
     * The studio attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Studio?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    SubscriptionLength?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    SystemMemorySize?: DecimalWithUnits;
    /**
     * The system memory type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    SystemMemoryType?: string;
    /**
     * The theatrical release date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    TheatricalReleaseDate?: string;
    /**
     * The title attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Title?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    TotalDiamondWeight?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    TotalGemWeight?: DecimalWithUnits;
    /**
     * The warranty attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    Warranty?: string;
    /**
     * 
     * @type {Price}
     * @memberof AttributeSetListType
     */
    WeeeTaxValue?: Price;
}
/**
 * 
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     * The identifier for the product category (or browse node).
     * @type {string}
     * @memberof Categories
     */
    ProductCategoryId?: string;
    /**
     * The name of the product category (or browse node).
     * @type {string}
     * @memberof Categories
     */
    ProductCategoryName?: string;
    /**
     * The parent product category.
     * @type {object}
     * @memberof Categories
     */
    parent?: object;
}
/**
 * The creator type attribute of an item.
 * @export
 * @interface CreatorType
 */
export interface CreatorType {
    /**
     * The value of the attribute.
     * @type {string}
     * @memberof CreatorType
     */
    value?: string;
    /**
     * The role of the value.
     * @type {string}
     * @memberof CreatorType
     */
    Role?: string;
}
/**
 * The decimal value and unit.
 * @export
 * @interface DecimalWithUnits
 */
export interface DecimalWithUnits {
    /**
     * The decimal value.
     * @type {number}
     * @memberof DecimalWithUnits
     */
    value?: number;
    /**
     * The unit of the decimal value.
     * @type {string}
     * @memberof DecimalWithUnits
     */
    Units?: string;
}
/**
 * The dimension type attribute of an item.
 * @export
 * @interface DimensionType
 */
export interface DimensionType {
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    Height?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    Length?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    Width?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    Weight?: DecimalWithUnits;
}
/**
 * 
 * @export
 * @interface GetCatalogItemResponse
 */
export interface GetCatalogItemResponse {
    /**
     * 
     * @type {Item}
     * @memberof GetCatalogItemResponse
     */
    payload?: Item;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetCatalogItemResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface IdentifierType
 */
export interface IdentifierType {
    /**
     * 
     * @type {ASINIdentifier}
     * @memberof IdentifierType
     */
    MarketplaceASIN?: ASINIdentifier;
    /**
     * 
     * @type {SellerSKUIdentifier}
     * @memberof IdentifierType
     */
    SKUIdentifier?: SellerSKUIdentifier;
}
/**
 * The image attribute of the item.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * The image URL attribute of the item.
     * @type {string}
     * @memberof Image
     */
    URL?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof Image
     */
    Height?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof Image
     */
    Width?: DecimalWithUnits;
}
/**
 * An item in the Amazon catalog.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {IdentifierType}
     * @memberof Item
     */
    Identifiers: IdentifierType;
    /**
     * A list of attributes for the item.
     * @type {Array<AttributeSetListType>}
     * @memberof Item
     */
    AttributeSets?: Array<AttributeSetListType>;
    /**
     * A list of variation relationship information, if applicable for the item.
     * @type {Array<RelationshipType>}
     * @memberof Item
     */
    Relationships?: Array<RelationshipType>;
    /**
     * A list of sales rank information for the item by category.
     * @type {Array<SalesRankType>}
     * @memberof Item
     */
    SalesRankings?: Array<SalesRankType>;
}
/**
 * The language type attribute of an item.
 * @export
 * @interface LanguageType
 */
export interface LanguageType {
    /**
     * The name attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    Name?: string;
    /**
     * The type attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    Type?: string;
    /**
     * The audio format attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    AudioFormat?: string;
}
/**
 * 
 * @export
 * @interface ListCatalogCategoriesResponse
 */
export interface ListCatalogCategoriesResponse {
    /**
     * 
     * @type {Array<Categories>}
     * @memberof ListCatalogCategoriesResponse
     */
    payload?: Array<Categories>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListCatalogCategoriesResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ListCatalogItemsResponse
 */
export interface ListCatalogItemsResponse {
    /**
     * 
     * @type {ListMatchingItemsResponse}
     * @memberof ListCatalogItemsResponse
     */
    payload?: ListMatchingItemsResponse;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListCatalogItemsResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ListMatchingItemsResponse
 */
export interface ListMatchingItemsResponse {
    /**
     * A list of items.
     * @type {Array<Item>}
     * @memberof ListMatchingItemsResponse
     */
    Items?: Array<Item>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The number of offer listings with the specified condition.
 * @export
 * @interface OfferListingCountType
 */
export interface OfferListingCountType {
    /**
     * The number of offer listings.
     * @type {number}
     * @memberof OfferListingCountType
     */
    Count: number;
    /**
     * The condition of the item.
     * @type {string}
     * @memberof OfferListingCountType
     */
    condition: string;
}
/**
 * The price attribute of the item.
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The amount.
     * @type {number}
     * @memberof Price
     */
    Amount?: number;
    /**
     * The currency code of the amount.
     * @type {string}
     * @memberof Price
     */
    CurrencyCode?: string;
}
/**
 * 
 * @export
 * @interface QualifiersType
 */
export interface QualifiersType {
    /**
     * The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof QualifiersType
     */
    ItemCondition: string;
    /**
     * The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof QualifiersType
     */
    ItemSubcondition: string;
    /**
     * The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
     * @type {string}
     * @memberof QualifiersType
     */
    FulfillmentChannel: string;
    /**
     * Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown.
     * @type {string}
     * @memberof QualifiersType
     */
    ShipsDomestically: string;
    /**
     * 
     * @type {ShippingTimeType}
     * @memberof QualifiersType
     */
    ShippingTime: ShippingTimeType;
    /**
     * (98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months.
     * @type {string}
     * @memberof QualifiersType
     */
    SellerPositiveFeedbackRating: string;
}
/**
 * Specific variations of the item.
 * @export
 * @interface RelationshipType
 */
export interface RelationshipType {
    /**
     * 
     * @type {IdentifierType}
     * @memberof RelationshipType
     */
    Identifiers?: IdentifierType;
    /**
     * The color variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    Color?: string;
    /**
     * The edition variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    Edition?: string;
    /**
     * The flavor variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    Flavor?: string;
    /**
     * The gem type variations of the item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    GemType?: Array<string>;
    /**
     * The golf club flex variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    GolfClubFlex?: string;
    /**
     * The hand orientation variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    HandOrientation?: string;
    /**
     * The hardware platform variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    HardwarePlatform?: string;
    /**
     * The material type variations of an item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    MaterialType?: Array<string>;
    /**
     * The metal type variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    MetalType?: string;
    /**
     * The model variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    Model?: string;
    /**
     * The operating system variations of an item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    OperatingSystem?: Array<string>;
    /**
     * The product type subcategory variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    ProductTypeSubcategory?: string;
    /**
     * The ring size variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    RingSize?: string;
    /**
     * The shaft material variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    ShaftMaterial?: string;
    /**
     * The scent variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    Scent?: string;
    /**
     * The size variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    Size?: string;
    /**
     * The size per pearl variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    SizePerPearl?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    GolfClubLoft?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    TotalDiamondWeight?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    TotalGemWeight?: DecimalWithUnits;
    /**
     * The package quantity variation of an item.
     * @type {number}
     * @memberof RelationshipType
     */
    PackageQuantity?: number;
    /**
     * 
     * @type {DimensionType}
     * @memberof RelationshipType
     */
    ItemDimensions?: DimensionType;
}
/**
 * 
 * @export
 * @interface SalesRankType
 */
export interface SalesRankType {
    /**
     * Identifies the item category from which the sales rank is taken.
     * @type {string}
     * @memberof SalesRankType
     */
    ProductCategoryId: string;
    /**
     * The sales rank of the item within the item category.
     * @type {number}
     * @memberof SalesRankType
     */
    Rank: number;
}
/**
 * 
 * @export
 * @interface SellerSKUIdentifier
 */
export interface SellerSKUIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    MarketplaceId: string;
    /**
     * The seller identifier submitted for the operation.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    SellerId: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    SellerSKU: string;
}
/**
 * 
 * @export
 * @interface ShippingTimeType
 */
export interface ShippingTimeType {
    /**
     * (0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed.
     * @type {string}
     * @memberof ShippingTimeType
     */
    Max?: string;
}

/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem: async (marketplaceId: string, asin: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getCatalogItem', 'marketplaceId', marketplaceId)
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getCatalogItem', 'asin', asin)
            const localVarPath = `/catalog/v0/items/{asin}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [aSIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogCategories: async (marketplaceId: string, aSIN?: string, sellerSKU?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listCatalogCategories', 'marketplaceId', marketplaceId)
            const localVarPath = `/catalog/v0/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (aSIN !== undefined) {
                localVarQueryParameter['ASIN'] = aSIN;
            }

            if (sellerSKU !== undefined) {
                localVarQueryParameter['SellerSKU'] = sellerSKU;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [uPC] A 12-digit bar code used for retail packaging.
         * @param {string} [eAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [iSBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [jAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogItems: async (marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, uPC?: string, eAN?: string, iSBN?: string, jAN?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listCatalogItems', 'marketplaceId', marketplaceId)
            const localVarPath = `/catalog/v0/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (queryContextId !== undefined) {
                localVarQueryParameter['QueryContextId'] = queryContextId;
            }

            if (sellerSKU !== undefined) {
                localVarQueryParameter['SellerSKU'] = sellerSKU;
            }

            if (uPC !== undefined) {
                localVarQueryParameter['UPC'] = uPC;
            }

            if (eAN !== undefined) {
                localVarQueryParameter['EAN'] = eAN;
            }

            if (iSBN !== undefined) {
                localVarQueryParameter['ISBN'] = iSBN;
            }

            if (jAN !== undefined) {
                localVarQueryParameter['JAN'] = jAN;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogItem(marketplaceId: string, asin: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatalogItemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogItem(marketplaceId, asin, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [aSIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCatalogCategories(marketplaceId: string, aSIN?: string, sellerSKU?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCatalogCategoriesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCatalogCategories(marketplaceId, aSIN, sellerSKU, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [uPC] A 12-digit bar code used for retail packaging.
         * @param {string} [eAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [iSBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [jAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, uPC?: string, eAN?: string, iSBN?: string, jAN?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCatalogItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, uPC, eAN, iSBN, jAN, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(marketplaceId: string, asin: string, options?: any): AxiosPromise<GetCatalogItemResponse> {
            return localVarFp.getCatalogItem(marketplaceId, asin, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [aSIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogCategories(marketplaceId: string, aSIN?: string, sellerSKU?: string, options?: any): AxiosPromise<ListCatalogCategoriesResponse> {
            return localVarFp.listCatalogCategories(marketplaceId, aSIN, sellerSKU, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [uPC] A 12-digit bar code used for retail packaging.
         * @param {string} [eAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [iSBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [jAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, uPC?: string, eAN?: string, iSBN?: string, jAN?: string, options?: any): AxiosPromise<ListCatalogItemsResponse> {
            return localVarFp.listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, uPC, eAN, iSBN, jAN, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCatalogItem operation in CatalogApi.
 * @export
 * @interface CatalogApiGetCatalogItemRequest
 */
export interface CatalogApiGetCatalogItemRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for the item.
     * @type {string}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly marketplaceId: string

    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly asin: string
}

/**
 * Request parameters for listCatalogCategories operation in CatalogApi.
 * @export
 * @interface CatalogApiListCatalogCategoriesRequest
 */
export interface CatalogApiListCatalogCategoriesRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for the item.
     * @type {string}
     * @memberof CatalogApiListCatalogCategories
     */
    readonly marketplaceId: string

    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof CatalogApiListCatalogCategories
     */
    readonly aSIN?: string

    /**
     * Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @type {string}
     * @memberof CatalogApiListCatalogCategories
     */
    readonly sellerSKU?: string
}

/**
 * Request parameters for listCatalogItems operation in CatalogApi.
 * @export
 * @interface CatalogApiListCatalogItemsRequest
 */
export interface CatalogApiListCatalogItemsRequest {
    /**
     * A marketplace identifier. Specifies the marketplace for which items are returned.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly marketplaceId: string

    /**
     * Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly query?: string

    /**
     * An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly queryContextId?: string

    /**
     * Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly sellerSKU?: string

    /**
     * A 12-digit bar code used for retail packaging.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly uPC?: string

    /**
     * A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly eAN?: string

    /**
     * The unique commercial book identifier used to identify books internationally.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly iSBN?: string

    /**
     * A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
     * @type {string}
     * @memberof CatalogApiListCatalogItems
     */
    readonly jAN?: string
}

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * Returns a specified item and its attributes.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 2 | 20 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CatalogApiGetCatalogItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public getCatalogItem(requestParameters: CatalogApiGetCatalogItemRequest, options?: any) {
        return CatalogApiFp(this.configuration).getCatalogItem(requestParameters.marketplaceId, requestParameters.asin, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 1 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CatalogApiListCatalogCategoriesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public listCatalogCategories(requestParameters: CatalogApiListCatalogCategoriesRequest, options?: any) {
        return CatalogApiFp(this.configuration).listCatalogCategories(requestParameters.marketplaceId, requestParameters.aSIN, requestParameters.sellerSKU, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  This operation returns a maximum of ten products and does not return non-buyable products.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 6 | 40 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CatalogApiListCatalogItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public listCatalogItems(requestParameters: CatalogApiListCatalogItemsRequest, options?: any) {
        return CatalogApiFp(this.configuration).listCatalogItems(requestParameters.marketplaceId, requestParameters.query, requestParameters.queryContextId, requestParameters.sellerSKU, requestParameters.uPC, requestParameters.eAN, requestParameters.iSBN, requestParameters.jAN, options).then((request) => request(this.axios, this.basePath));
    }
}


