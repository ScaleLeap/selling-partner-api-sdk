// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ASINIdentifier
 */
export interface ASINIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof ASINIdentifier
     */
    marketplaceId: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ASINIdentifier
     */
    ASIN: string;
}
/**
 * The attributes of the item.
 * @export
 * @interface AttributeSetListType
 */
export interface AttributeSetListType {
    /**
     * The actor attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    actor?: Array<string>;
    /**
     * The artist attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    artist?: Array<string>;
    /**
     * The aspect ratio attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    aspectRatio?: string;
    /**
     * The audience rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    audienceRating?: string;
    /**
     * The author attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    author?: Array<string>;
    /**
     * The back finding attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    backFinding?: string;
    /**
     * The band material type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    bandMaterialType?: string;
    /**
     * The binding attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    binding?: string;
    /**
     * The Bluray region attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    blurayRegion?: string;
    /**
     * The brand attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    brand?: string;
    /**
     * The CERO age rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ceroAgeRating?: string;
    /**
     * The chain type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    chainType?: string;
    /**
     * The clasp type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    claspType?: string;
    /**
     * The color attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    color?: string;
    /**
     * The CPU manufacturer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    cpuManufacturer?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    cpuSpeed?: DecimalWithUnits;
    /**
     * The CPU type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    cpuType?: string;
    /**
     * The creator attributes of the item.
     * @type {Array<CreatorType>}
     * @memberof AttributeSetListType
     */
    creator?: Array<CreatorType>;
    /**
     * The department attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    department?: string;
    /**
     * The director attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    director?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    displaySize?: DecimalWithUnits;
    /**
     * The edition attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    edition?: string;
    /**
     * The episode sequence attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    episodeSequence?: string;
    /**
     * The ESRB age rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    esrbAgeRating?: string;
    /**
     * The feature attributes of the item
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    feature?: Array<string>;
    /**
     * The flavor attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    flavor?: string;
    /**
     * The format attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    format?: Array<string>;
    /**
     * The gem type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    gemType?: Array<string>;
    /**
     * The genre attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    genre?: string;
    /**
     * The golf club flex attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    golfClubFlex?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    golfClubLoft?: DecimalWithUnits;
    /**
     * The hand orientation attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    handOrientation?: string;
    /**
     * The hard disk interface attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    hardDiskInterface?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    hardDiskSize?: DecimalWithUnits;
    /**
     * The hardware platform attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    hardwarePlatform?: string;
    /**
     * The hazardous material type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    hazardousMaterialType?: string;
    /**
     * 
     * @type {DimensionType}
     * @memberof AttributeSetListType
     */
    itemDimensions?: DimensionType;
    /**
     * The adult product attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    isAdultProduct?: boolean;
    /**
     * The autographed attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    isAutographed?: boolean;
    /**
     * The is eligible for trade in attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    isEligibleForTradeIn?: boolean;
    /**
     * The is memorabilia attribute of the item.
     * @type {boolean}
     * @memberof AttributeSetListType
     */
    isMemorabilia?: boolean;
    /**
     * The issues per year attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    issuesPerYear?: string;
    /**
     * The item part number attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    itemPartNumber?: string;
    /**
     * The label attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    label?: string;
    /**
     * The languages attribute of the item.
     * @type {Array<LanguageType>}
     * @memberof AttributeSetListType
     */
    languages?: Array<LanguageType>;
    /**
     * The legal disclaimer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    legalDisclaimer?: string;
    /**
     * 
     * @type {Price}
     * @memberof AttributeSetListType
     */
    listPrice?: Price;
    /**
     * The manufacturer attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    manufacturer?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    manufacturerMaximumAge?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    manufacturerMinimumAge?: DecimalWithUnits;
    /**
     * The manufacturer parts warranty description attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    manufacturerPartsWarrantyDescription?: string;
    /**
     * The material type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    materialType?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    maximumResolution?: DecimalWithUnits;
    /**
     * The media type attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    mediaType?: Array<string>;
    /**
     * The metal stamp attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    metalStamp?: string;
    /**
     * The metal type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    metalType?: string;
    /**
     * The model attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    model?: string;
    /**
     * The number of discs attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    numberOfDiscs?: number;
    /**
     * The number of issues attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    numberOfIssues?: number;
    /**
     * The number of items attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    numberOfItems?: number;
    /**
     * The number of pages attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    numberOfPages?: number;
    /**
     * The number of tracks attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    numberOfTracks?: number;
    /**
     * The operating system attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    operatingSystem?: Array<string>;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    opticalZoom?: DecimalWithUnits;
    /**
     * 
     * @type {DimensionType}
     * @memberof AttributeSetListType
     */
    packageDimensions?: DimensionType;
    /**
     * The package quantity attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    packageQuantity?: number;
    /**
     * The part number attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    partNumber?: string;
    /**
     * The PEGI rating attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    pegiRating?: string;
    /**
     * The platform attributes of the item.
     * @type {Array<string>}
     * @memberof AttributeSetListType
     */
    platform?: Array<string>;
    /**
     * The processor count attribute of the item.
     * @type {number}
     * @memberof AttributeSetListType
     */
    processorCount?: number;
    /**
     * The product group attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    productGroup?: string;
    /**
     * The product type name attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    productTypeName?: string;
    /**
     * The product type subcategory attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    productTypeSubcategory?: string;
    /**
     * The publication date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    publicationDate?: string;
    /**
     * The publisher attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    publisher?: string;
    /**
     * The region code attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    regionCode?: string;
    /**
     * The release date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    releaseDate?: string;
    /**
     * The ring size attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    ringSize?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    runningTime?: DecimalWithUnits;
    /**
     * The shaft material attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    shaftMaterial?: string;
    /**
     * The scent attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    scent?: string;
    /**
     * The season sequence attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    seasonSequence?: string;
    /**
     * The Seikodo product code attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    seikodoProductCode?: string;
    /**
     * The size attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    size?: string;
    /**
     * The size per pearl attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    sizePerPearl?: string;
    /**
     * 
     * @type {Image}
     * @memberof AttributeSetListType
     */
    smallImage?: Image;
    /**
     * The studio attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    studio?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    subscriptionLength?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    systemMemorySize?: DecimalWithUnits;
    /**
     * The system memory type attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    systemMemoryType?: string;
    /**
     * The theatrical release date attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    theatricalReleaseDate?: string;
    /**
     * The title attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    title?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    totalDiamondWeight?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof AttributeSetListType
     */
    totalGemWeight?: DecimalWithUnits;
    /**
     * The warranty attribute of the item.
     * @type {string}
     * @memberof AttributeSetListType
     */
    warranty?: string;
    /**
     * 
     * @type {Price}
     * @memberof AttributeSetListType
     */
    weeeTaxValue?: Price;
}
/**
 * 
 * @export
 * @interface Categories
 */
export interface Categories {
    /**
     * The identifier for the product category (or browse node).
     * @type {string}
     * @memberof Categories
     */
    productCategoryId?: string;
    /**
     * The name of the product category (or browse node).
     * @type {string}
     * @memberof Categories
     */
    productCategoryName?: string;
    /**
     * The parent product category.
     * @type {object}
     * @memberof Categories
     */
    parent?: object;
}
/**
 * The creator type attribute of an item.
 * @export
 * @interface CreatorType
 */
export interface CreatorType {
    /**
     * The value of the attribute.
     * @type {string}
     * @memberof CreatorType
     */
    value?: string;
    /**
     * The role of the value.
     * @type {string}
     * @memberof CreatorType
     */
    role?: string;
}
/**
 * The decimal value and unit.
 * @export
 * @interface DecimalWithUnits
 */
export interface DecimalWithUnits {
    /**
     * The decimal value.
     * @type {number}
     * @memberof DecimalWithUnits
     */
    value?: number;
    /**
     * The unit of the decimal value.
     * @type {string}
     * @memberof DecimalWithUnits
     */
    units?: string;
}
/**
 * The dimension type attribute of an item.
 * @export
 * @interface DimensionType
 */
export interface DimensionType {
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    height?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    length?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    width?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof DimensionType
     */
    weight?: DecimalWithUnits;
}
/**
 * 
 * @export
 * @interface GetCatalogItemResponse
 */
export interface GetCatalogItemResponse {
    /**
     * 
     * @type {Item}
     * @memberof GetCatalogItemResponse
     */
    payload?: Item;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetCatalogItemResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface IdentifierType
 */
export interface IdentifierType {
    /**
     * 
     * @type {ASINIdentifier}
     * @memberof IdentifierType
     */
    marketplaceASIN?: ASINIdentifier;
    /**
     * 
     * @type {SellerSKUIdentifier}
     * @memberof IdentifierType
     */
    sKUIdentifier?: SellerSKUIdentifier;
}
/**
 * The image attribute of the item.
 * @export
 * @interface Image
 */
export interface Image {
    /**
     * The image URL attribute of the item.
     * @type {string}
     * @memberof Image
     */
    URL?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof Image
     */
    height?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof Image
     */
    width?: DecimalWithUnits;
}
/**
 * An item in the Amazon catalog.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * 
     * @type {IdentifierType}
     * @memberof Item
     */
    identifiers: IdentifierType;
    /**
     * A list of attributes for the item.
     * @type {Array<AttributeSetListType>}
     * @memberof Item
     */
    attributeSets?: Array<AttributeSetListType>;
    /**
     * A list of variation relationship information, if applicable for the item.
     * @type {Array<RelationshipType>}
     * @memberof Item
     */
    relationships?: Array<RelationshipType>;
    /**
     * A list of sales rank information for the item by category.
     * @type {Array<SalesRankType>}
     * @memberof Item
     */
    salesRankings?: Array<SalesRankType>;
}
/**
 * The language type attribute of an item.
 * @export
 * @interface LanguageType
 */
export interface LanguageType {
    /**
     * The name attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    name?: string;
    /**
     * The type attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    type?: string;
    /**
     * The audio format attribute of the item.
     * @type {string}
     * @memberof LanguageType
     */
    audioFormat?: string;
}
/**
 * 
 * @export
 * @interface ListCatalogCategoriesResponse
 */
export interface ListCatalogCategoriesResponse {
    /**
     * 
     * @type {Array<Categories>}
     * @memberof ListCatalogCategoriesResponse
     */
    payload?: Array<Categories>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListCatalogCategoriesResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ListCatalogItemsResponse
 */
export interface ListCatalogItemsResponse {
    /**
     * 
     * @type {ListMatchingItemsResponse}
     * @memberof ListCatalogItemsResponse
     */
    payload?: ListMatchingItemsResponse;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListCatalogItemsResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface ListMatchingItemsResponse
 */
export interface ListMatchingItemsResponse {
    /**
     * A list of items.
     * @type {Array<Item>}
     * @memberof ListMatchingItemsResponse
     */
    items?: Array<Item>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The number of offer listings with the specified condition.
 * @export
 * @interface OfferListingCountType
 */
export interface OfferListingCountType {
    /**
     * The number of offer listings.
     * @type {number}
     * @memberof OfferListingCountType
     */
    count: number;
    /**
     * The condition of the item.
     * @type {string}
     * @memberof OfferListingCountType
     */
    condition: string;
}
/**
 * The price attribute of the item.
 * @export
 * @interface Price
 */
export interface Price {
    /**
     * The amount.
     * @type {number}
     * @memberof Price
     */
    amount?: number;
    /**
     * The currency code of the amount.
     * @type {string}
     * @memberof Price
     */
    currencyCode?: string;
}
/**
 * 
 * @export
 * @interface QualifiersType
 */
export interface QualifiersType {
    /**
     * The condition of the item. Possible values: New, Used, Collectible, Refurbished, or Club.
     * @type {string}
     * @memberof QualifiersType
     */
    itemCondition: string;
    /**
     * The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
     * @type {string}
     * @memberof QualifiersType
     */
    itemSubcondition: string;
    /**
     * The fulfillment channel for the item. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
     * @type {string}
     * @memberof QualifiersType
     */
    fulfillmentChannel: string;
    /**
     * Indicates whether the marketplace specified in the request and the location that the item ships from are in the same country. Possible values: True, False, or Unknown.
     * @type {string}
     * @memberof QualifiersType
     */
    shipsDomestically: string;
    /**
     * 
     * @type {ShippingTimeType}
     * @memberof QualifiersType
     */
    shippingTime: ShippingTimeType;
    /**
     * (98-100%, 95-97%, 90-94%, 80-89%, 70-79%, Less than 70%, or Just launched ) – Indicates the percentage of feedback ratings that were positive over the past 12 months.
     * @type {string}
     * @memberof QualifiersType
     */
    sellerPositiveFeedbackRating: string;
}
/**
 * Specific variations of the item.
 * @export
 * @interface RelationshipType
 */
export interface RelationshipType {
    /**
     * The color variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    color?: string;
    /**
     * The edition variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    edition?: string;
    /**
     * The flavor variation of the item.
     * @type {string}
     * @memberof RelationshipType
     */
    flavor?: string;
    /**
     * The gem type variations of the item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    gemType?: Array<string>;
    /**
     * The golf club flex variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    golfClubFlex?: string;
    /**
     * The hand orientation variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    handOrientation?: string;
    /**
     * The hardware platform variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    hardwarePlatform?: string;
    /**
     * The material type variations of an item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    materialType?: Array<string>;
    /**
     * The metal type variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    metalType?: string;
    /**
     * The model variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    model?: string;
    /**
     * The operating system variations of an item.
     * @type {Array<string>}
     * @memberof RelationshipType
     */
    operatingSystem?: Array<string>;
    /**
     * The product type subcategory variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    productTypeSubcategory?: string;
    /**
     * The ring size variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    ringSize?: string;
    /**
     * The shaft material variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    shaftMaterial?: string;
    /**
     * The scent variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    scent?: string;
    /**
     * The size variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    size?: string;
    /**
     * The size per pearl variation of an item.
     * @type {string}
     * @memberof RelationshipType
     */
    sizePerPearl?: string;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    golfClubLoft?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    totalDiamondWeight?: DecimalWithUnits;
    /**
     * 
     * @type {DecimalWithUnits}
     * @memberof RelationshipType
     */
    totalGemWeight?: DecimalWithUnits;
    /**
     * The package quantity variation of an item.
     * @type {number}
     * @memberof RelationshipType
     */
    packageQuantity?: number;
    /**
     * 
     * @type {DimensionType}
     * @memberof RelationshipType
     */
    itemDimensions?: DimensionType;
}
/**
 * 
 * @export
 * @interface SalesRankType
 */
export interface SalesRankType {
    /**
     * Identifies the item category from which the sales rank is taken.
     * @type {string}
     * @memberof SalesRankType
     */
    productCategoryId: string;
    /**
     * The sales rank of the item within the item category.
     * @type {number}
     * @memberof SalesRankType
     */
    rank: number;
}
/**
 * 
 * @export
 * @interface SellerSKUIdentifier
 */
export interface SellerSKUIdentifier {
    /**
     * A marketplace identifier.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    marketplaceId: string;
    /**
     * The seller identifier submitted for the operation.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    sellerId: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof SellerSKUIdentifier
     */
    sellerSKU: string;
}
/**
 * 
 * @export
 * @interface ShippingTimeType
 */
export interface ShippingTimeType {
    /**
     * (0-2 days, 3-7 days, 8-13 days, or 14 or more days) – Indicates the maximum time within which the item will likely be shipped once an order has been placed.
     * @type {string}
     * @memberof ShippingTimeType
     */
    max?: string;
}

/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(marketplaceId: string, asin: string, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling getCatalogItem.');
            }
            // verify required parameter 'asin' is not null or undefined
            if (asin === null || asin === undefined) {
                throw new RequiredError('asin','Required parameter asin was null or undefined when calling getCatalogItem.');
            }
            const localVarPath = `/catalog/v0/items/{asin}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [ASIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogCategories(marketplaceId: string, ASIN?: string, sellerSKU?: string, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling listCatalogCategories.');
            }
            const localVarPath = `/catalog/v0/categories`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (ASIN !== undefined) {
                localVarQueryParameter['ASIN'] = ASIN;
            }

            if (sellerSKU !== undefined) {
                localVarQueryParameter['SellerSKU'] = sellerSKU;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [UPC] A 12-digit bar code used for retail packaging.
         * @param {string} [EAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [ISBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [JAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, UPC?: string, EAN?: string, ISBN?: string, JAN?: string, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceId' is not null or undefined
            if (marketplaceId === null || marketplaceId === undefined) {
                throw new RequiredError('marketplaceId','Required parameter marketplaceId was null or undefined when calling listCatalogItems.');
            }
            const localVarPath = `/catalog/v0/items`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['MarketplaceId'] = marketplaceId;
            }

            if (query !== undefined) {
                localVarQueryParameter['Query'] = query;
            }

            if (queryContextId !== undefined) {
                localVarQueryParameter['QueryContextId'] = queryContextId;
            }

            if (sellerSKU !== undefined) {
                localVarQueryParameter['SellerSKU'] = sellerSKU;
            }

            if (UPC !== undefined) {
                localVarQueryParameter['UPC'] = UPC;
            }

            if (EAN !== undefined) {
                localVarQueryParameter['EAN'] = EAN;
            }

            if (ISBN !== undefined) {
                localVarQueryParameter['ISBN'] = ISBN;
            }

            if (JAN !== undefined) {
                localVarQueryParameter['JAN'] = JAN;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(marketplaceId: string, asin: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetCatalogItemResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).getCatalogItem(marketplaceId, asin, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [ASIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogCategories(marketplaceId: string, ASIN?: string, sellerSKU?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCatalogCategoriesResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).listCatalogCategories(marketplaceId, ASIN, sellerSKU, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [UPC] A 12-digit bar code used for retail packaging.
         * @param {string} [EAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [ISBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [JAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, UPC?: string, EAN?: string, ISBN?: string, JAN?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListCatalogItemsResponse> {
            const localVarAxiosArgs = CatalogApiAxiosParamCreator(configuration).listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(marketplaceId: string, asin: string, options?: any) {
            return CatalogApiFp(configuration).getCatalogItem(marketplaceId, asin, options)(axios, basePath);
        },
        /**
         * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
         * @param {string} [ASIN] The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogCategories(marketplaceId: string, ASIN?: string, sellerSKU?: string, options?: any) {
            return CatalogApiFp(configuration).listCatalogCategories(marketplaceId, ASIN, sellerSKU, options)(axios, basePath);
        },
        /**
         * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
         * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
         * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
         * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
         * @param {string} [UPC] A 12-digit bar code used for retail packaging.
         * @param {string} [EAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
         * @param {string} [ISBN] The unique commercial book identifier used to identify books internationally.
         * @param {string} [JAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, UPC?: string, EAN?: string, ISBN?: string, JAN?: string, options?: any) {
            return CatalogApiFp(configuration).listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, options)(axios, basePath);
        },
    };
};

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * Returns a specified item and its attributes.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
     * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public getCatalogItem(marketplaceId: string, asin: string, options?: any) {
        return CatalogApiFp(this.configuration).getCatalogItem(marketplaceId, asin, options)(this.axios, this.basePath);
    }

    /**
     * Returns the parent categories to which an item belongs, based on the specified ASIN or SellerSKU.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for the item.
     * @param {string} [ASIN] The Amazon Standard Identification Number (ASIN) of the item.
     * @param {string} [sellerSKU] Used to identify items in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public listCatalogCategories(marketplaceId: string, ASIN?: string, sellerSKU?: string, options?: any) {
        return CatalogApiFp(this.configuration).listCatalogCategories(marketplaceId, ASIN, sellerSKU, options)(this.axios, this.basePath);
    }

    /**
     * Returns a list of items and their attributes, based on a search query or item identifiers that you specify. When based on a search query, provide the Query parameter and optionally, the QueryContextId parameter. When based on item identifiers, provide a single appropriate parameter based on the identifier type, and specify the associated item value. MarketplaceId is always required.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} marketplaceId A marketplace identifier. Specifies the marketplace for which items are returned.
     * @param {string} [query] Keyword(s) to use to search for items in the catalog. Example: \&#39;harry potter books\&#39;.
     * @param {string} [queryContextId] An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
     * @param {string} [sellerSKU] Used to identify an item in the given marketplace. SellerSKU is qualified by the seller\&#39;s SellerId, which is included with every operation that you submit.
     * @param {string} [UPC] A 12-digit bar code used for retail packaging.
     * @param {string} [EAN] A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
     * @param {string} [ISBN] The unique commercial book identifier used to identify books internationally.
     * @param {string} [JAN] A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public listCatalogItems(marketplaceId: string, query?: string, queryContextId?: string, sellerSKU?: string, UPC?: string, EAN?: string, ISBN?: string, JAN?: string, options?: any) {
        return CatalogApiFp(this.configuration).listCatalogItems(marketplaceId, query, queryContextId, sellerSKU, UPC, EAN, ISBN, JAN, options)(this.axios, this.basePath);
    }

}


