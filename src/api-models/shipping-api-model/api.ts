/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Shipping
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The specific rate purchased for the shipment, or null if unpurchased.
 * @export
 * @interface AcceptedRate
 */
export interface AcceptedRate {
    /**
     * 
     * @type {Currency}
     * @memberof AcceptedRate
     */
    totalCharge?: Currency;
    /**
     * 
     * @type {Weight}
     * @memberof AcceptedRate
     */
    billedWeight?: Weight;
    /**
     * 
     * @type {ServiceType}
     * @memberof AcceptedRate
     */
    serviceType?: ServiceType;
    /**
     * 
     * @type {ShippingPromiseSet}
     * @memberof AcceptedRate
     */
    promise?: ShippingPromiseSet;
}
/**
 * The account related data.
 * @export
 * @interface Account
 */
export interface Account {
    /**
     * This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process.
     * @type {string}
     * @memberof Account
     */
    accountId: string;
}
/**
 * The address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of that address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The state or region where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The email address of the contact associated with the address.
     * @type {string}
     * @memberof Address
     */
    email?: string;
    /**
     * The email cc addresses of the contact associated with the address.
     * @type {Array<string>}
     * @memberof Address
     */
    copyEmails?: Array<string>;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phoneNumber?: string;
}
/**
 * The response schema for the cancelShipment operation.
 * @export
 * @interface CancelShipmentResponse
 */
export interface CancelShipmentResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * Container in the shipment.
 * @export
 * @interface Container
 */
export interface Container {
    /**
     * The type of physical container being used. (always \'PACKAGE\')
     * @type {string}
     * @memberof Container
     */
    containerType?: ContainerContainerTypeEnum;
    /**
     * An identifier for the container. This must be unique within all the containers in the same shipment.
     * @type {string}
     * @memberof Container
     */
    containerReferenceId: string;
    /**
     * 
     * @type {Currency}
     * @memberof Container
     */
    value: Currency;
    /**
     * 
     * @type {Dimensions}
     * @memberof Container
     */
    dimensions: Dimensions;
    /**
     * A list of the items in the container.
     * @type {Array<ContainerItem>}
     * @memberof Container
     */
    items: Array<ContainerItem>;
    /**
     * 
     * @type {Weight}
     * @memberof Container
     */
    weight: Weight;
}

/**
    * @export
    * @enum {string}
    */
export enum ContainerContainerTypeEnum {
    Package = 'PACKAGE'
}

/**
 * Item in the container.
 * @export
 * @interface ContainerItem
 */
export interface ContainerItem {
    /**
     * The quantity of the items of this type in the container.
     * @type {number}
     * @memberof ContainerItem
     */
    quantity: number;
    /**
     * 
     * @type {Currency}
     * @memberof ContainerItem
     */
    unitPrice: Currency;
    /**
     * 
     * @type {Weight}
     * @memberof ContainerItem
     */
    unitWeight: Weight;
    /**
     * A descriptive title of the item.
     * @type {string}
     * @memberof ContainerItem
     */
    title: string;
}
/**
 * Container specification for checking the service rate.
 * @export
 * @interface ContainerSpecification
 */
export interface ContainerSpecification {
    /**
     * 
     * @type {Dimensions}
     * @memberof ContainerSpecification
     */
    dimensions: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof ContainerSpecification
     */
    weight: Weight;
}
/**
 * The request schema for the createShipment operation.
 * @export
 * @interface CreateShipmentRequest
 */
export interface CreateShipmentRequest {
    /**
     * Client reference id.
     * @type {string}
     * @memberof CreateShipmentRequest
     */
    clientReferenceId: string;
    /**
     * 
     * @type {Address}
     * @memberof CreateShipmentRequest
     */
    shipTo: Address;
    /**
     * 
     * @type {Address}
     * @memberof CreateShipmentRequest
     */
    shipFrom: Address;
    /**
     * A list of container.
     * @type {Array<Container>}
     * @memberof CreateShipmentRequest
     */
    containers: Array<Container>;
}
/**
 * The response schema for the createShipment operation.
 * @export
 * @interface CreateShipmentResponse
 */
export interface CreateShipmentResponse {
    /**
     * 
     * @type {CreateShipmentResult}
     * @memberof CreateShipmentResponse
     */
    payload?: CreateShipmentResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the createShipment operation.
 * @export
 * @interface CreateShipmentResult
 */
export interface CreateShipmentResult {
    /**
     * The unique shipment identifier.
     * @type {string}
     * @memberof CreateShipmentResult
     */
    shipmentId: string;
    /**
     * A list of all the available rates that can be used to send the shipment.
     * @type {Array<Rate>}
     * @memberof CreateShipmentResult
     */
    eligibleRates: Array<Rate>;
}
/**
 * The total value of all items in the container.
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * The amount of currency.
     * @type {number}
     * @memberof Currency
     */
    value: number;
    /**
     * A 3-character currency code.
     * @type {string}
     * @memberof Currency
     */
    unit: string;
}
/**
 * A set of measurements for a three-dimensional object.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * The length of the container.
     * @type {number}
     * @memberof Dimensions
     */
    length: number;
    /**
     * The width of the container.
     * @type {number}
     * @memberof Dimensions
     */
    width: number;
    /**
     * The height of the container.
     * @type {number}
     * @memberof Dimensions
     */
    height: number;
    /**
     * The unit of these measurements.
     * @type {string}
     * @memberof Dimensions
     */
    unit: DimensionsUnitEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DimensionsUnitEnum {
    In = 'IN',
    Cm = 'CM'
}

/**
 * An event of a shipment
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * The event code of a shipment, such as Departed, Received, and ReadyForReceive.
     * @type {string}
     * @memberof Event
     */
    eventCode: string;
    /**
     * The date and time of an event for a shipment.
     * @type {string}
     * @memberof Event
     */
    eventTime: string;
    /**
     * 
     * @type {Location}
     * @memberof Event
     */
    location?: Location;
}
/**
 * The response schema for the getAccount operation.
 * @export
 * @interface GetAccountResponse
 */
export interface GetAccountResponse {
    /**
     * 
     * @type {Account}
     * @memberof GetAccountResponse
     */
    payload?: Account;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetAccountResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the getRates operation.
 * @export
 * @interface GetRatesRequest
 */
export interface GetRatesRequest {
    /**
     * 
     * @type {Address}
     * @memberof GetRatesRequest
     */
    shipTo: Address;
    /**
     * 
     * @type {Address}
     * @memberof GetRatesRequest
     */
    shipFrom: Address;
    /**
     * A list of service types that can be used to send the shipment.
     * @type {Array<ServiceType>}
     * @memberof GetRatesRequest
     */
    serviceTypes: Array<ServiceType>;
    /**
     * The start date and time. This defaults to the current date and time.
     * @type {string}
     * @memberof GetRatesRequest
     */
    shipDate?: string;
    /**
     * A list of container specifications.
     * @type {Array<ContainerSpecification>}
     * @memberof GetRatesRequest
     */
    containerSpecifications: Array<ContainerSpecification>;
}
/**
 * The response schema for the getRates operation.
 * @export
 * @interface GetRatesResponse
 */
export interface GetRatesResponse {
    /**
     * 
     * @type {GetRatesResult}
     * @memberof GetRatesResponse
     */
    payload?: GetRatesResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetRatesResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the getRates operation.
 * @export
 * @interface GetRatesResult
 */
export interface GetRatesResult {
    /**
     * A list of service rates.
     * @type {Array<ServiceRate>}
     * @memberof GetRatesResult
     */
    serviceRates: Array<ServiceRate>;
}
/**
 * The response schema for the getShipment operation.
 * @export
 * @interface GetShipmentResponse
 */
export interface GetShipmentResponse {
    /**
     * 
     * @type {Shipment}
     * @memberof GetShipmentResponse
     */
    payload?: Shipment;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getTrackingInformation operation.
 * @export
 * @interface GetTrackingInformationResponse
 */
export interface GetTrackingInformationResponse {
    /**
     * 
     * @type {TrackingInformation}
     * @memberof GetTrackingInformationResponse
     */
    payload?: TrackingInformation;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetTrackingInformationResponse
     */
    errors?: Array<Error>;
}
/**
 * The label details of the container.
 * @export
 * @interface Label
 */
export interface Label {
    /**
     * Contains binary image data encoded as a base-64 string.
     * @type {string}
     * @memberof Label
     */
    labelStream?: string;
    /**
     * 
     * @type {LabelSpecification}
     * @memberof Label
     */
    labelSpecification?: LabelSpecification;
}
/**
 * Label details including label stream, format, size.
 * @export
 * @interface LabelResult
 */
export interface LabelResult {
    /**
     * An identifier for the container. This must be unique within all the containers in the same shipment.
     * @type {string}
     * @memberof LabelResult
     */
    containerReferenceId?: string;
    /**
     * The tracking identifier assigned to the container.
     * @type {string}
     * @memberof LabelResult
     */
    trackingId?: string;
    /**
     * 
     * @type {Label}
     * @memberof LabelResult
     */
    label?: Label;
}
/**
 * The label specification info.
 * @export
 * @interface LabelSpecification
 */
export interface LabelSpecification {
    /**
     * The format of the label. Enum of PNG only for now.
     * @type {string}
     * @memberof LabelSpecification
     */
    labelFormat: LabelSpecificationLabelFormatEnum;
    /**
     * The label stock size specification in length and height. Enum of 4x6 only for now.
     * @type {string}
     * @memberof LabelSpecification
     */
    labelStockSize: LabelSpecificationLabelStockSizeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum LabelSpecificationLabelFormatEnum {
    Png = 'PNG'
}
/**
    * @export
    * @enum {string}
    */
export enum LabelSpecificationLabelStockSizeEnum {
    _4x6 = '4x6'
}

/**
 * The location where the person, business or institution is located.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * The state or region where the person, business or institution is located.
     * @type {string}
     * @memberof Location
     */
    stateOrRegion?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Location
     */
    city?: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Location
     */
    countryCode?: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Location
     */
    postalCode?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occured.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The account related with the shipment.
 * @export
 * @interface Party
 */
export interface Party {
    /**
     * This is the Amazon Shipping account id generated during the Amazon Shipping onboarding process.
     * @type {string}
     * @memberof Party
     */
    accountId?: string;
}
/**
 * The request schema for the purchaseLabels operation.
 * @export
 * @interface PurchaseLabelsRequest
 */
export interface PurchaseLabelsRequest {
    /**
     * An identifier for the rating.
     * @type {string}
     * @memberof PurchaseLabelsRequest
     */
    rateId: string;
    /**
     * 
     * @type {LabelSpecification}
     * @memberof PurchaseLabelsRequest
     */
    labelSpecification: LabelSpecification;
}
/**
 * The response schema for the purchaseLabels operation.
 * @export
 * @interface PurchaseLabelsResponse
 */
export interface PurchaseLabelsResponse {
    /**
     * 
     * @type {PurchaseLabelsResult}
     * @memberof PurchaseLabelsResponse
     */
    payload?: PurchaseLabelsResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof PurchaseLabelsResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the purchaseLabels operation.
 * @export
 * @interface PurchaseLabelsResult
 */
export interface PurchaseLabelsResult {
    /**
     * The unique shipment identifier.
     * @type {string}
     * @memberof PurchaseLabelsResult
     */
    shipmentId: string;
    /**
     * Client reference id.
     * @type {string}
     * @memberof PurchaseLabelsResult
     */
    clientReferenceId?: string;
    /**
     * 
     * @type {AcceptedRate}
     * @memberof PurchaseLabelsResult
     */
    acceptedRate: AcceptedRate;
    /**
     * A list of label results
     * @type {Array<LabelResult>}
     * @memberof PurchaseLabelsResult
     */
    labelResults: Array<LabelResult>;
}
/**
 * The payload schema for the purchaseShipment operation.
 * @export
 * @interface PurchaseShipmentRequest
 */
export interface PurchaseShipmentRequest {
    /**
     * Client reference id.
     * @type {string}
     * @memberof PurchaseShipmentRequest
     */
    clientReferenceId: string;
    /**
     * 
     * @type {Address}
     * @memberof PurchaseShipmentRequest
     */
    shipTo: Address;
    /**
     * 
     * @type {Address}
     * @memberof PurchaseShipmentRequest
     */
    shipFrom: Address;
    /**
     * The start date and time. This defaults to the current date and time.
     * @type {string}
     * @memberof PurchaseShipmentRequest
     */
    shipDate?: string;
    /**
     * 
     * @type {ServiceType}
     * @memberof PurchaseShipmentRequest
     */
    serviceType: ServiceType;
    /**
     * A list of container.
     * @type {Array<Container>}
     * @memberof PurchaseShipmentRequest
     */
    containers: Array<Container>;
    /**
     * 
     * @type {LabelSpecification}
     * @memberof PurchaseShipmentRequest
     */
    labelSpecification: LabelSpecification;
}
/**
 * The response schema for the purchaseShipment operation.
 * @export
 * @interface PurchaseShipmentResponse
 */
export interface PurchaseShipmentResponse {
    /**
     * 
     * @type {PurchaseShipmentResult}
     * @memberof PurchaseShipmentResponse
     */
    payload?: PurchaseShipmentResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof PurchaseShipmentResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the purchaseShipment operation.
 * @export
 * @interface PurchaseShipmentResult
 */
export interface PurchaseShipmentResult {
    /**
     * The unique shipment identifier.
     * @type {string}
     * @memberof PurchaseShipmentResult
     */
    shipmentId: string;
    /**
     * 
     * @type {ServiceRate}
     * @memberof PurchaseShipmentResult
     */
    serviceRate: ServiceRate;
    /**
     * A list of label results
     * @type {Array<LabelResult>}
     * @memberof PurchaseShipmentResult
     */
    labelResults: Array<LabelResult>;
}
/**
 * The available rate that can be used to send the shipment
 * @export
 * @interface Rate
 */
export interface Rate {
    /**
     * An identifier for the rate.
     * @type {string}
     * @memberof Rate
     */
    rateId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof Rate
     */
    totalCharge?: Currency;
    /**
     * 
     * @type {Weight}
     * @memberof Rate
     */
    billedWeight?: Weight;
    /**
     * The time after which the offering will expire.
     * @type {string}
     * @memberof Rate
     */
    expirationTime?: string;
    /**
     * 
     * @type {ServiceType}
     * @memberof Rate
     */
    serviceType?: ServiceType;
    /**
     * 
     * @type {ShippingPromiseSet}
     * @memberof Rate
     */
    promise?: ShippingPromiseSet;
}
/**
 * The request schema for the retrieveShippingLabel operation.
 * @export
 * @interface RetrieveShippingLabelRequest
 */
export interface RetrieveShippingLabelRequest {
    /**
     * 
     * @type {LabelSpecification}
     * @memberof RetrieveShippingLabelRequest
     */
    labelSpecification: LabelSpecification;
}
/**
 * The response schema for the retrieveShippingLabel operation.
 * @export
 * @interface RetrieveShippingLabelResponse
 */
export interface RetrieveShippingLabelResponse {
    /**
     * 
     * @type {RetrieveShippingLabelResult}
     * @memberof RetrieveShippingLabelResponse
     */
    payload?: RetrieveShippingLabelResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof RetrieveShippingLabelResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload schema for the retrieveShippingLabel operation.
 * @export
 * @interface RetrieveShippingLabelResult
 */
export interface RetrieveShippingLabelResult {
    /**
     * Contains binary image data encoded as a base-64 string.
     * @type {string}
     * @memberof RetrieveShippingLabelResult
     */
    labelStream: string;
    /**
     * 
     * @type {LabelSpecification}
     * @memberof RetrieveShippingLabelResult
     */
    labelSpecification: LabelSpecification;
}
/**
 * The specific rate for a shipping service, or null if no service available.
 * @export
 * @interface ServiceRate
 */
export interface ServiceRate {
    /**
     * 
     * @type {Currency}
     * @memberof ServiceRate
     */
    totalCharge: Currency;
    /**
     * 
     * @type {Weight}
     * @memberof ServiceRate
     */
    billableWeight: Weight;
    /**
     * 
     * @type {ServiceType}
     * @memberof ServiceRate
     */
    serviceType: ServiceType;
    /**
     * 
     * @type {ShippingPromiseSet}
     * @memberof ServiceRate
     */
    promise: ShippingPromiseSet;
}
/**
 * The type of shipping service that will be used for the service offering.
 * @export
 * @enum {string}
 */
export enum ServiceType {
    Ground = 'Amazon Shipping Ground',
    Standard = 'Amazon Shipping Standard',
    Premium = 'Amazon Shipping Premium'
}

/**
 * The shipment related data.
 * @export
 * @interface Shipment
 */
export interface Shipment {
    /**
     * The unique shipment identifier.
     * @type {string}
     * @memberof Shipment
     */
    shipmentId: string;
    /**
     * Client reference id.
     * @type {string}
     * @memberof Shipment
     */
    clientReferenceId: string;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    shipFrom: Address;
    /**
     * 
     * @type {Address}
     * @memberof Shipment
     */
    shipTo: Address;
    /**
     * 
     * @type {AcceptedRate}
     * @memberof Shipment
     */
    acceptedRate?: AcceptedRate;
    /**
     * 
     * @type {Party}
     * @memberof Shipment
     */
    shipper?: Party;
    /**
     * A list of container.
     * @type {Array<Container>}
     * @memberof Shipment
     */
    containers: Array<Container>;
}
/**
 * The promised delivery time and pickup time.
 * @export
 * @interface ShippingPromiseSet
 */
export interface ShippingPromiseSet {
    /**
     * 
     * @type {TimeRange}
     * @memberof ShippingPromiseSet
     */
    deliveryWindow?: TimeRange;
    /**
     * 
     * @type {TimeRange}
     * @memberof ShippingPromiseSet
     */
    receiveWindow?: TimeRange;
}
/**
 * The time range.
 * @export
 * @interface TimeRange
 */
export interface TimeRange {
    /**
     * The start date and time. This defaults to the current date and time.
     * @type {string}
     * @memberof TimeRange
     */
    start?: string;
    /**
     * The end date and time. This must come after the value of start. This defaults to the next business day from the start.
     * @type {string}
     * @memberof TimeRange
     */
    end?: string;
}
/**
 * The payload schema for the getTrackingInformation operation.
 * @export
 * @interface TrackingInformation
 */
export interface TrackingInformation {
    /**
     * The tracking id generated to each shipment. It contains a series of letters or digits or both.
     * @type {string}
     * @memberof TrackingInformation
     */
    trackingId: string;
    /**
     * 
     * @type {TrackingSummary}
     * @memberof TrackingInformation
     */
    summary: TrackingSummary;
    /**
     * The promised delivery date and time of a shipment.
     * @type {string}
     * @memberof TrackingInformation
     */
    promisedDeliveryDate: string;
    /**
     * A list of events of a shipment.
     * @type {Array<Event>}
     * @memberof TrackingInformation
     */
    eventHistory: Array<Event>;
}
/**
 * The tracking summary.
 * @export
 * @interface TrackingSummary
 */
export interface TrackingSummary {
    /**
     * The derived status based on the events in the eventHistory.
     * @type {string}
     * @memberof TrackingSummary
     */
    status?: string;
}
/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Weight
     */
    unit: WeightUnitEnum;
    /**
     * The measurement value.
     * @type {number}
     * @memberof Weight
     */
    value: number;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitEnum {
    G = 'g',
    Kg = 'kg',
    Oz = 'oz',
    Lb = 'lb'
}


/**
 * ShippingApi - axios parameter creator
 * @export
 */
export const ShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment: async (shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelShipment', 'shipmentId', shipmentId)
            const localVarPath = `/shipping/v1/shipments/{shipmentId}/cancel`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment: async (body: CreateShipmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createShipment', 'body', body)
            const localVarPath = `/shipping/v1/shipments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping/v1/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates: async (body: GetRatesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getRates', 'body', body)
            const localVarPath = `/shipping/v1/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/shipping/v1/shipments/{shipmentId}`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} trackingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackingInformation: async (trackingId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'trackingId' is not null or undefined
            assertParamExists('getTrackingInformation', 'trackingId', trackingId)
            const localVarPath = `/shipping/v1/tracking/{trackingId}`
                .replace(`{${"trackingId"}}`, encodeURIComponent(String(trackingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {PurchaseLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLabels: async (shipmentId: string, body: PurchaseLabelsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('purchaseLabels', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('purchaseLabels', 'body', body)
            const localVarPath = `/shipping/v1/shipments/{shipmentId}/purchaseLabels`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment: async (body: PurchaseShipmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('purchaseShipment', 'body', body)
            const localVarPath = `/shipping/v1/purchaseShipment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {string} trackingId 
         * @param {RetrieveShippingLabelRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShippingLabel: async (shipmentId: string, trackingId: string, body: RetrieveShippingLabelRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('retrieveShippingLabel', 'shipmentId', shipmentId)
            // verify required parameter 'trackingId' is not null or undefined
            assertParamExists('retrieveShippingLabel', 'trackingId', trackingId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('retrieveShippingLabel', 'body', body)
            const localVarPath = `/shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label`
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"trackingId"}}`, encodeURIComponent(String(trackingId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingApi - functional programming interface
 * @export
 */
export const ShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelShipment(shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createShipment(body: CreateShipmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createShipment(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAccountResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRates(body: GetRatesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetRatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getRates(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} trackingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTrackingInformation(trackingId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetTrackingInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTrackingInformation(trackingId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {PurchaseLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseLabels(shipmentId: string, body: PurchaseLabelsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseLabelsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseLabels(shipmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async purchaseShipment(body: PurchaseShipmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PurchaseShipmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.purchaseShipment(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {string} trackingId 
         * @param {RetrieveShippingLabelRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async retrieveShippingLabel(shipmentId: string, trackingId: string, body: RetrieveShippingLabelRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RetrieveShippingLabelResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.retrieveShippingLabel(shipmentId, trackingId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingApi - factory interface
 * @export
 */
export const ShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingApiFp(configuration)
    return {
        /**
         * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelShipment(shipmentId: string, options?: any): AxiosPromise<CancelShipmentResponse> {
            return localVarFp.cancelShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createShipment(body: CreateShipmentRequest, options?: any): AxiosPromise<CreateShipmentResponse> {
            return localVarFp.createShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(options?: any): AxiosPromise<GetAccountResponse> {
            return localVarFp.getAccount(options).then((request) => request(axios, basePath));
        },
        /**
         * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {GetRatesRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRates(body: GetRatesRequest, options?: any): AxiosPromise<GetRatesResponse> {
            return localVarFp.getRates(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(shipmentId: string, options?: any): AxiosPromise<GetShipmentResponse> {
            return localVarFp.getShipment(shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} trackingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTrackingInformation(trackingId: string, options?: any): AxiosPromise<GetTrackingInformationResponse> {
            return localVarFp.getTrackingInformation(trackingId, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {PurchaseLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseLabels(shipmentId: string, body: PurchaseLabelsRequest, options?: any): AxiosPromise<PurchaseLabelsResponse> {
            return localVarFp.purchaseLabels(shipmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {PurchaseShipmentRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        purchaseShipment(body: PurchaseShipmentRequest, options?: any): AxiosPromise<PurchaseShipmentResponse> {
            return localVarFp.purchaseShipment(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} shipmentId 
         * @param {string} trackingId 
         * @param {RetrieveShippingLabelRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveShippingLabel(shipmentId: string, trackingId: string, body: RetrieveShippingLabelRequest, options?: any): AxiosPromise<RetrieveShippingLabelResponse> {
            return localVarFp.retrieveShippingLabel(shipmentId, trackingId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingApi - object-oriented interface
 * @export
 * @class ShippingApi
 * @extends {BaseAPI}
 */
export class ShippingApi extends BaseAPI {
    /**
     * Cancel a shipment by the given shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} shipmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public cancelShipment(shipmentId: string, options?: any) {
        return ShippingApiFp(this.configuration).cancelShipment(shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CreateShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public createShipment(body: CreateShipmentRequest, options?: any) {
        return ShippingApiFp(this.configuration).createShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Verify if the current account is valid.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getAccount(options?: any) {
        return ShippingApiFp(this.configuration).getAccount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get service rates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {GetRatesRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getRates(body: GetRatesRequest, options?: any) {
        return ShippingApiFp(this.configuration).getRates(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the entire shipment object for the shipmentId.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} shipmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getShipment(shipmentId: string, options?: any) {
        return ShippingApiFp(this.configuration).getShipment(shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return the tracking information of a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} trackingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public getTrackingInformation(trackingId: string, options?: any) {
        return ShippingApiFp(this.configuration).getTrackingInformation(trackingId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchase shipping labels based on a given rate.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} shipmentId 
     * @param {PurchaseLabelsRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public purchaseLabels(shipmentId: string, body: PurchaseLabelsRequest, options?: any) {
        return ShippingApiFp(this.configuration).purchaseLabels(shipmentId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Purchase shipping labels.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {PurchaseShipmentRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public purchaseShipment(body: PurchaseShipmentRequest, options?: any) {
        return ShippingApiFp(this.configuration).purchaseShipment(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieve shipping label based on the shipment id and tracking id.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} shipmentId 
     * @param {string} trackingId 
     * @param {RetrieveShippingLabelRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingApi
     */
    public retrieveShippingLabel(shipmentId: string, trackingId: string, body: RetrieveShippingLabelRequest, options?: any) {
        return ShippingApiFp(this.configuration).retrieveShippingLabel(shipmentId, trackingId, body, options).then((request) => request(this.axios, this.basePath));
    }
}


