/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for A+ Content Management
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * The version of the OpenAPI document: 2020-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The base response data for paginated A+ Content operations. Individual operations may extend this with additional data. If nextPageToken is not returned, there are no more pages to return.
 * @export
 * @interface AplusPaginatedResponse
 */
export interface AplusPaginatedResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof AplusPaginatedResponse
     */
    warnings?: Array<Error>;
    /**
     * A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
     * @type {string}
     * @memberof AplusPaginatedResponse
     */
    nextPageToken?: string;
}
/**
 * 
 * @export
 * @interface AplusPaginatedResponseAllOf
 */
export interface AplusPaginatedResponseAllOf {
    /**
     * A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
     * @type {string}
     * @memberof AplusPaginatedResponseAllOf
     */
    nextPageToken?: string;
}
/**
 * The base response data for all A+ Content operations when a request is successful or partially successful. Individual operations may extend this with additional data.
 * @export
 * @interface AplusResponse
 */
export interface AplusResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof AplusResponse
     */
    warnings?: Array<Error>;
}
/**
 * A flag that provides additional information about an ASIN. This is contextual and may change depending on the request that generated it.
 * @export
 * @enum {string}
 */
export enum AsinBadge {
    BrandNotEligible = 'BRAND_NOT_ELIGIBLE',
    CatalogNotFound = 'CATALOG_NOT_FOUND',
    ContentNotPublished = 'CONTENT_NOT_PUBLISHED',
    ContentPublished = 'CONTENT_PUBLISHED'
}

/**
 * The A+ Content ASIN with additional metadata for content management. If you don\'t include the `includedDataSet` parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata.
 * @export
 * @interface AsinMetadata
 */
export interface AsinMetadata {
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof AsinMetadata
     */
    asin: string;
    /**
     * The set of ASIN badges.
     * @type {Array<AsinBadge>}
     * @memberof AsinMetadata
     */
    badgeSet?: Array<AsinBadge>;
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof AsinMetadata
     */
    parent?: string;
    /**
     * The title for the ASIN in the Amazon catalog.
     * @type {string}
     * @memberof AsinMetadata
     */
    title?: string;
    /**
     * The default image for the ASIN in the Amazon catalog.
     * @type {string}
     * @memberof AsinMetadata
     */
    imageUrl?: string;
    /**
     * A set of content reference keys.
     * @type {Array<string>}
     * @memberof AsinMetadata
     */
    contentReferenceKeySet?: Array<string>;
}
/**
 * The relative color scheme of content.
 * @export
 * @enum {string}
 */
export enum ColorType {
    Dark = 'DARK',
    Light = 'LIGHT'
}

/**
 * A flag that provides additional information about an A+ Content document.
 * @export
 * @enum {string}
 */
export enum ContentBadge {
    Bulk = 'BULK',
    Generated = 'GENERATED',
    Launchpad = 'LAUNCHPAD',
    Premium = 'PREMIUM',
    Standard = 'STANDARD'
}

/**
 * The A+ Content document. This is the enhanced content that is published to product detail pages.
 * @export
 * @interface ContentDocument
 */
export interface ContentDocument {
    /**
     * The A+ Content document name.
     * @type {string}
     * @memberof ContentDocument
     */
    name: string;
    /**
     * 
     * @type {ContentType}
     * @memberof ContentDocument
     */
    contentType: ContentType;
    /**
     * The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
     * @type {string}
     * @memberof ContentDocument
     */
    contentSubType?: string;
    /**
     * The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
     * @type {string}
     * @memberof ContentDocument
     */
    locale: string;
    /**
     * A list of A+ Content modules.
     * @type {Array<ContentModule>}
     * @memberof ContentDocument
     */
    contentModuleList: Array<ContentModule>;
}
/**
 * The metadata of an A+ Content document.
 * @export
 * @interface ContentMetadata
 */
export interface ContentMetadata {
    /**
     * The A+ Content document name.
     * @type {string}
     * @memberof ContentMetadata
     */
    name: string;
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof ContentMetadata
     */
    marketplaceId: string;
    /**
     * 
     * @type {ContentStatus}
     * @memberof ContentMetadata
     */
    status: ContentStatus;
    /**
     * The set of content badges.
     * @type {Array<ContentBadge>}
     * @memberof ContentMetadata
     */
    badgeSet: Array<ContentBadge>;
    /**
     * The approximate age of the A+ Content document and metadata.
     * @type {string}
     * @memberof ContentMetadata
     */
    updateTime: string;
}
/**
 * The metadata for an A+ Content document, with additional information for content management.
 * @export
 * @interface ContentMetadataRecord
 */
export interface ContentMetadataRecord {
    /**
     * A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof ContentMetadataRecord
     */
    contentReferenceKey: string;
    /**
     * 
     * @type {ContentMetadata}
     * @memberof ContentMetadataRecord
     */
    contentMetadata: ContentMetadata;
}
/**
 * An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.
 * @export
 * @interface ContentModule
 */
export interface ContentModule {
    /**
     * 
     * @type {ContentModuleType}
     * @memberof ContentModule
     */
    contentModuleType: ContentModuleType;
    /**
     * 
     * @type {StandardCompanyLogoModule}
     * @memberof ContentModule
     */
    standardCompanyLogo?: StandardCompanyLogoModule;
    /**
     * 
     * @type {StandardComparisonTableModule}
     * @memberof ContentModule
     */
    standardComparisonTable?: StandardComparisonTableModule;
    /**
     * 
     * @type {StandardFourImageTextModule}
     * @memberof ContentModule
     */
    standardFourImageText?: StandardFourImageTextModule;
    /**
     * 
     * @type {StandardFourImageTextQuadrantModule}
     * @memberof ContentModule
     */
    standardFourImageTextQuadrant?: StandardFourImageTextQuadrantModule;
    /**
     * 
     * @type {StandardHeaderImageTextModule}
     * @memberof ContentModule
     */
    standardHeaderImageText?: StandardHeaderImageTextModule;
    /**
     * 
     * @type {StandardImageSidebarModule}
     * @memberof ContentModule
     */
    standardImageSidebar?: StandardImageSidebarModule;
    /**
     * 
     * @type {StandardImageTextOverlayModule}
     * @memberof ContentModule
     */
    standardImageTextOverlay?: StandardImageTextOverlayModule;
    /**
     * 
     * @type {StandardMultipleImageTextModule}
     * @memberof ContentModule
     */
    standardMultipleImageText?: StandardMultipleImageTextModule;
    /**
     * 
     * @type {StandardProductDescriptionModule}
     * @memberof ContentModule
     */
    standardProductDescription?: StandardProductDescriptionModule;
    /**
     * 
     * @type {StandardSingleImageHighlightsModule}
     * @memberof ContentModule
     */
    standardSingleImageHighlights?: StandardSingleImageHighlightsModule;
    /**
     * 
     * @type {StandardSingleImageSpecsDetailModule}
     * @memberof ContentModule
     */
    standardSingleImageSpecsDetail?: StandardSingleImageSpecsDetailModule;
    /**
     * 
     * @type {StandardSingleSideImageModule}
     * @memberof ContentModule
     */
    standardSingleSideImage?: StandardSingleSideImageModule;
    /**
     * 
     * @type {StandardTechSpecsModule}
     * @memberof ContentModule
     */
    standardTechSpecs?: StandardTechSpecsModule;
    /**
     * 
     * @type {StandardTextModule}
     * @memberof ContentModule
     */
    standardText?: StandardTextModule;
    /**
     * 
     * @type {StandardThreeImageTextModule}
     * @memberof ContentModule
     */
    standardThreeImageText?: StandardThreeImageTextModule;
}
/**
 * The type of A+ Content module.
 * @export
 * @enum {string}
 */
export enum ContentModuleType {
    CompanyLogo = 'STANDARD_COMPANY_LOGO',
    ComparisonTable = 'STANDARD_COMPARISON_TABLE',
    FourImageText = 'STANDARD_FOUR_IMAGE_TEXT',
    FourImageTextQuadrant = 'STANDARD_FOUR_IMAGE_TEXT_QUADRANT',
    HeaderImageText = 'STANDARD_HEADER_IMAGE_TEXT',
    ImageSidebar = 'STANDARD_IMAGE_SIDEBAR',
    ImageTextOverlay = 'STANDARD_IMAGE_TEXT_OVERLAY',
    MultipleImageText = 'STANDARD_MULTIPLE_IMAGE_TEXT',
    ProductDescription = 'STANDARD_PRODUCT_DESCRIPTION',
    SingleImageHighlights = 'STANDARD_SINGLE_IMAGE_HIGHLIGHTS',
    SingleImageSpecsDetail = 'STANDARD_SINGLE_IMAGE_SPECS_DETAIL',
    SingleSideImage = 'STANDARD_SINGLE_SIDE_IMAGE',
    TechSpecs = 'STANDARD_TECH_SPECS',
    Text = 'STANDARD_TEXT',
    ThreeImageText = 'STANDARD_THREE_IMAGE_TEXT'
}

/**
 * A content document with additional information for content management.
 * @export
 * @interface ContentRecord
 */
export interface ContentRecord {
    /**
     * A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof ContentRecord
     */
    contentReferenceKey: string;
    /**
     * 
     * @type {ContentMetadata}
     * @memberof ContentRecord
     */
    contentMetadata?: ContentMetadata;
    /**
     * 
     * @type {ContentDocument}
     * @memberof ContentRecord
     */
    contentDocument?: ContentDocument;
}
/**
 * The submission status of the content document.
 * @export
 * @enum {string}
 */
export enum ContentStatus {
    Approved = 'APPROVED',
    Draft = 'DRAFT',
    Rejected = 'REJECTED',
    Submitted = 'SUBMITTED'
}

/**
 * The A+ Content document type.
 * @export
 * @enum {string}
 */
export enum ContentType {
    Ebc = 'EBC',
    Emc = 'EMC'
}

/**
 * A decorator applied to a content string value in order to create rich text.
 * @export
 * @interface Decorator
 */
export interface Decorator {
    /**
     * 
     * @type {DecoratorType}
     * @memberof Decorator
     */
    type?: DecoratorType;
    /**
     * The starting character of this decorator within the content string. Use zero for the first character.
     * @type {number}
     * @memberof Decorator
     */
    offset?: number;
    /**
     * The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters.
     * @type {number}
     * @memberof Decorator
     */
    length?: number;
    /**
     * The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths.
     * @type {number}
     * @memberof Decorator
     */
    depth?: number;
}
/**
 * The type of rich text decorator.
 * @export
 * @enum {string}
 */
export enum DecoratorType {
    ListItem = 'LIST_ITEM',
    ListOrdered = 'LIST_ORDERED',
    ListUnordered = 'LIST_UNORDERED',
    StyleBold = 'STYLE_BOLD',
    StyleItalic = 'STYLE_ITALIC',
    StyleLinebreak = 'STYLE_LINEBREAK',
    StyleParagraph = 'STYLE_PARAGRAPH',
    StyleUnderline = 'STYLE_UNDERLINE'
}

/**
 * The error response for when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetContentDocumentResponse
 */
export interface GetContentDocumentResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof GetContentDocumentResponse
     */
    warnings?: Array<Error>;
    /**
     * 
     * @type {ContentRecord}
     * @memberof GetContentDocumentResponse
     */
    contentRecord: ContentRecord;
}
/**
 * 
 * @export
 * @interface GetContentDocumentResponseAllOf
 */
export interface GetContentDocumentResponseAllOf {
    /**
     * 
     * @type {ContentRecord}
     * @memberof GetContentDocumentResponseAllOf
     */
    contentRecord: ContentRecord;
}
/**
 * A reference to an image, hosted in the A+ Content media library.
 * @export
 * @interface ImageComponent
 */
export interface ImageComponent {
    /**
     * This identifier is provided by the Selling Partner API for Uploads.
     * @type {string}
     * @memberof ImageComponent
     */
    uploadDestinationId: string;
    /**
     * 
     * @type {ImageCropSpecification}
     * @memberof ImageComponent
     */
    imageCropSpecification: ImageCropSpecification;
    /**
     * The alternative text for the image.
     * @type {string}
     * @memberof ImageComponent
     */
    altText: string;
}
/**
 * The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
 * @export
 * @interface ImageCropSpecification
 */
export interface ImageCropSpecification {
    /**
     * 
     * @type {ImageDimensions}
     * @memberof ImageCropSpecification
     */
    size: ImageDimensions;
    /**
     * 
     * @type {ImageOffsets}
     * @memberof ImageCropSpecification
     */
    offset?: ImageOffsets;
}
/**
 * The dimensions extending from the top left corner of the cropped image, or the top left corner of the original image if there is no cropping. Only `pixels` is allowed as the units value for ImageDimensions.
 * @export
 * @interface ImageDimensions
 */
export interface ImageDimensions {
    /**
     * 
     * @type {IntegerWithUnits}
     * @memberof ImageDimensions
     */
    width: IntegerWithUnits;
    /**
     * 
     * @type {IntegerWithUnits}
     * @memberof ImageDimensions
     */
    height: IntegerWithUnits;
}
/**
 * The top left corner of the cropped image, specified in the original image\'s coordinate space.
 * @export
 * @interface ImageOffsets
 */
export interface ImageOffsets {
    /**
     * 
     * @type {IntegerWithUnits}
     * @memberof ImageOffsets
     */
    x: IntegerWithUnits;
    /**
     * 
     * @type {IntegerWithUnits}
     * @memberof ImageOffsets
     */
    y: IntegerWithUnits;
}
/**
 * A whole number dimension and its unit of measurement. For example, this can represent 100 pixels.
 * @export
 * @interface IntegerWithUnits
 */
export interface IntegerWithUnits {
    /**
     * The dimension value.
     * @type {number}
     * @memberof IntegerWithUnits
     */
    value: number;
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof IntegerWithUnits
     */
    units: string;
}
/**
 * 
 * @export
 * @interface ListContentDocumentAsinRelationsResponse
 */
export interface ListContentDocumentAsinRelationsResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof ListContentDocumentAsinRelationsResponse
     */
    warnings?: Array<Error>;
    /**
     * A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
     * @type {string}
     * @memberof ListContentDocumentAsinRelationsResponse
     */
    nextPageToken?: string;
    /**
     * The set of ASIN metadata.
     * @type {Array<AsinMetadata>}
     * @memberof ListContentDocumentAsinRelationsResponse
     */
    asinMetadataSet: Array<AsinMetadata>;
}
/**
 * 
 * @export
 * @interface ListContentDocumentAsinRelationsResponseAllOf
 */
export interface ListContentDocumentAsinRelationsResponseAllOf {
    /**
     * The set of ASIN metadata.
     * @type {Array<AsinMetadata>}
     * @memberof ListContentDocumentAsinRelationsResponseAllOf
     */
    asinMetadataSet: Array<AsinMetadata>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * The code that identifies the type of error condition.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A human readable description of the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional information, if available, to clarify the error condition.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * A list of rich text content, usually presented in a text box.
 * @export
 * @interface ParagraphComponent
 */
export interface ParagraphComponent {
    /**
     * 
     * @type {Array<TextComponent>}
     * @memberof ParagraphComponent
     */
    textList: Array<TextComponent>;
}
/**
 * Plain positional text, used in collections of brief labels and descriptors.
 * @export
 * @interface PlainTextItem
 */
export interface PlainTextItem {
    /**
     * The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
     * @type {number}
     * @memberof PlainTextItem
     */
    position: number;
    /**
     * The actual plain text.
     * @type {string}
     * @memberof PlainTextItem
     */
    value: string;
}
/**
 * The relative positioning of content.
 * @export
 * @enum {string}
 */
export enum PositionType {
    Left = 'LEFT',
    Right = 'RIGHT'
}

/**
 * 
 * @export
 * @interface PostContentDocumentApprovalSubmissionResponse
 */
export interface PostContentDocumentApprovalSubmissionResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof PostContentDocumentApprovalSubmissionResponse
     */
    warnings?: Array<Error>;
}
/**
 * 
 * @export
 * @interface PostContentDocumentAsinRelationsRequest
 */
export interface PostContentDocumentAsinRelationsRequest {
    /**
     * The set of ASINs.
     * @type {Array<string>}
     * @memberof PostContentDocumentAsinRelationsRequest
     */
    asinSet: Array<string>;
}
/**
 * 
 * @export
 * @interface PostContentDocumentAsinRelationsResponse
 */
export interface PostContentDocumentAsinRelationsResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof PostContentDocumentAsinRelationsResponse
     */
    warnings?: Array<Error>;
}
/**
 * 
 * @export
 * @interface PostContentDocumentRequest
 */
export interface PostContentDocumentRequest {
    /**
     * 
     * @type {ContentDocument}
     * @memberof PostContentDocumentRequest
     */
    contentDocument: ContentDocument;
}
/**
 * 
 * @export
 * @interface PostContentDocumentResponse
 */
export interface PostContentDocumentResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof PostContentDocumentResponse
     */
    warnings?: Array<Error>;
    /**
     * A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof PostContentDocumentResponse
     */
    contentReferenceKey: string;
}
/**
 * 
 * @export
 * @interface PostContentDocumentResponseAllOf
 */
export interface PostContentDocumentResponseAllOf {
    /**
     * A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof PostContentDocumentResponseAllOf
     */
    contentReferenceKey: string;
}
/**
 * 
 * @export
 * @interface PostContentDocumentSuspendSubmissionResponse
 */
export interface PostContentDocumentSuspendSubmissionResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof PostContentDocumentSuspendSubmissionResponse
     */
    warnings?: Array<Error>;
}
/**
 * The full context for an A+ Content publishing event.
 * @export
 * @interface PublishRecord
 */
export interface PublishRecord {
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof PublishRecord
     */
    marketplaceId: string;
    /**
     * The IETF language tag. This only supports the primary language subtag with one secondary language subtag. The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary subtags. **Pattern:** ^[a-z]{2,}-[A-Z0-9]{2,}$
     * @type {string}
     * @memberof PublishRecord
     */
    locale: string;
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof PublishRecord
     */
    asin: string;
    /**
     * 
     * @type {ContentType}
     * @memberof PublishRecord
     */
    contentType: ContentType;
    /**
     * The A+ Content document subtype. This represents a special-purpose type of an A+ Content document. Not every A+ Content document type will have a subtype, and subtypes may change at any time.
     * @type {string}
     * @memberof PublishRecord
     */
    contentSubType?: string;
    /**
     * A unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof PublishRecord
     */
    contentReferenceKey: string;
}
/**
 * 
 * @export
 * @interface SearchContentDocumentsResponse
 */
export interface SearchContentDocumentsResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof SearchContentDocumentsResponse
     */
    warnings?: Array<Error>;
    /**
     * A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
     * @type {string}
     * @memberof SearchContentDocumentsResponse
     */
    nextPageToken?: string;
    /**
     * A list of A+ Content metadata records.
     * @type {Array<ContentMetadataRecord>}
     * @memberof SearchContentDocumentsResponse
     */
    contentMetadataRecords: Array<ContentMetadataRecord>;
}
/**
 * 
 * @export
 * @interface SearchContentDocumentsResponseAllOf
 */
export interface SearchContentDocumentsResponseAllOf {
    /**
     * A list of A+ Content metadata records.
     * @type {Array<ContentMetadataRecord>}
     * @memberof SearchContentDocumentsResponseAllOf
     */
    contentMetadataRecords: Array<ContentMetadataRecord>;
}
/**
 * 
 * @export
 * @interface SearchContentPublishRecordsResponse
 */
export interface SearchContentPublishRecordsResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof SearchContentPublishRecordsResponse
     */
    warnings?: Array<Error>;
    /**
     * A page token that is returned when the results of the call exceed the page size. To get another page of results, call the operation again, passing in this value with the pageToken parameter.
     * @type {string}
     * @memberof SearchContentPublishRecordsResponse
     */
    nextPageToken?: string;
    /**
     * A list of A+ Content publishing records.
     * @type {Array<PublishRecord>}
     * @memberof SearchContentPublishRecordsResponse
     */
    publishRecordList: Array<PublishRecord>;
}
/**
 * 
 * @export
 * @interface SearchContentPublishRecordsResponseAllOf
 */
export interface SearchContentPublishRecordsResponseAllOf {
    /**
     * A list of A+ Content publishing records.
     * @type {Array<PublishRecord>}
     * @memberof SearchContentPublishRecordsResponseAllOf
     */
    publishRecordList: Array<PublishRecord>;
}
/**
 * The standard company logo image.
 * @export
 * @interface StandardCompanyLogoModule
 */
export interface StandardCompanyLogoModule {
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardCompanyLogoModule
     */
    companyLogo: ImageComponent;
}
/**
 * The A+ Content standard comparison product block.
 * @export
 * @interface StandardComparisonProductBlock
 */
export interface StandardComparisonProductBlock {
    /**
     * The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
     * @type {number}
     * @memberof StandardComparisonProductBlock
     */
    position: number;
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardComparisonProductBlock
     */
    image?: ImageComponent;
    /**
     * The comparison product title.
     * @type {string}
     * @memberof StandardComparisonProductBlock
     */
    title?: string;
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof StandardComparisonProductBlock
     */
    asin?: string;
    /**
     * Determines whether this block of content is visually highlighted.
     * @type {boolean}
     * @memberof StandardComparisonProductBlock
     */
    highlight?: boolean;
    /**
     * Comparison metrics for the product.
     * @type {Array<PlainTextItem>}
     * @memberof StandardComparisonProductBlock
     */
    metrics?: Array<PlainTextItem>;
}
/**
 * The standard product comparison table.
 * @export
 * @interface StandardComparisonTableModule
 */
export interface StandardComparisonTableModule {
    /**
     * 
     * @type {Array<StandardComparisonProductBlock>}
     * @memberof StandardComparisonTableModule
     */
    productColumns?: Array<StandardComparisonProductBlock>;
    /**
     * 
     * @type {Array<PlainTextItem>}
     * @memberof StandardComparisonTableModule
     */
    metricRowLabels?: Array<PlainTextItem>;
}
/**
 * Four standard images with text, presented across a single row.
 * @export
 * @interface StandardFourImageTextModule
 */
export interface StandardFourImageTextModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardFourImageTextModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextModule
     */
    block1?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextModule
     */
    block2?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextModule
     */
    block3?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextModule
     */
    block4?: StandardImageTextBlock;
}
/**
 * Four standard images with text, presented on a grid of four quadrants.
 * @export
 * @interface StandardFourImageTextQuadrantModule
 */
export interface StandardFourImageTextQuadrantModule {
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextQuadrantModule
     */
    block1: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextQuadrantModule
     */
    block2: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextQuadrantModule
     */
    block3: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardFourImageTextQuadrantModule
     */
    block4: StandardImageTextBlock;
}
/**
 * Standard headline text, an image, and body text.
 * @export
 * @interface StandardHeaderImageTextModule
 */
export interface StandardHeaderImageTextModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardHeaderImageTextModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardHeaderImageTextModule
     */
    block?: StandardImageTextBlock;
}
/**
 * The A+ standard fixed-length list of text, with a related headline.
 * @export
 * @interface StandardHeaderTextListBlock
 */
export interface StandardHeaderTextListBlock {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardHeaderTextListBlock
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardTextListBlock}
     * @memberof StandardHeaderTextListBlock
     */
    block?: StandardTextListBlock;
}
/**
 * The A+ Content standard image and caption block.
 * @export
 * @interface StandardImageCaptionBlock
 */
export interface StandardImageCaptionBlock {
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardImageCaptionBlock
     */
    image?: ImageComponent;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardImageCaptionBlock
     */
    caption?: TextComponent;
}
/**
 * Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
 * @export
 * @interface StandardImageSidebarModule
 */
export interface StandardImageSidebarModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardImageSidebarModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardImageCaptionBlock}
     * @memberof StandardImageSidebarModule
     */
    imageCaptionBlock?: StandardImageCaptionBlock;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardImageSidebarModule
     */
    descriptionTextBlock?: StandardTextBlock;
    /**
     * 
     * @type {StandardTextListBlock}
     * @memberof StandardImageSidebarModule
     */
    descriptionListBlock?: StandardTextListBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardImageSidebarModule
     */
    sidebarImageTextBlock?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardTextListBlock}
     * @memberof StandardImageSidebarModule
     */
    sidebarListBlock?: StandardTextListBlock;
}
/**
 * The A+ Content standard image and text box block.
 * @export
 * @interface StandardImageTextBlock
 */
export interface StandardImageTextBlock {
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardImageTextBlock
     */
    image?: ImageComponent;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardImageTextBlock
     */
    headline?: TextComponent;
    /**
     * 
     * @type {ParagraphComponent}
     * @memberof StandardImageTextBlock
     */
    body?: ParagraphComponent;
}
/**
 * The A+ Content standard image and text block, with a related caption. The caption may not display on all devices.
 * @export
 * @interface StandardImageTextCaptionBlock
 */
export interface StandardImageTextCaptionBlock {
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardImageTextCaptionBlock
     */
    block?: StandardImageTextBlock;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardImageTextCaptionBlock
     */
    caption?: TextComponent;
}
/**
 * A standard background image with a floating text box.
 * @export
 * @interface StandardImageTextOverlayModule
 */
export interface StandardImageTextOverlayModule {
    /**
     * 
     * @type {ColorType}
     * @memberof StandardImageTextOverlayModule
     */
    overlayColorType: ColorType;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardImageTextOverlayModule
     */
    block?: StandardImageTextBlock;
}
/**
 * Standard images with text, presented one at a time. The user clicks on thumbnails to view each block.
 * @export
 * @interface StandardMultipleImageTextModule
 */
export interface StandardMultipleImageTextModule {
    /**
     * 
     * @type {Array<StandardImageTextCaptionBlock>}
     * @memberof StandardMultipleImageTextModule
     */
    blocks?: Array<StandardImageTextCaptionBlock>;
}
/**
 * Standard product description text.
 * @export
 * @interface StandardProductDescriptionModule
 */
export interface StandardProductDescriptionModule {
    /**
     * 
     * @type {ParagraphComponent}
     * @memberof StandardProductDescriptionModule
     */
    body: ParagraphComponent;
}
/**
 * A standard image with several paragraphs and a bulleted list.
 * @export
 * @interface StandardSingleImageHighlightsModule
 */
export interface StandardSingleImageHighlightsModule {
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardSingleImageHighlightsModule
     */
    image?: ImageComponent;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardSingleImageHighlightsModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageHighlightsModule
     */
    textBlock1?: StandardTextBlock;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageHighlightsModule
     */
    textBlock2?: StandardTextBlock;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageHighlightsModule
     */
    textBlock3?: StandardTextBlock;
    /**
     * 
     * @type {StandardHeaderTextListBlock}
     * @memberof StandardSingleImageHighlightsModule
     */
    bulletedListBlock?: StandardHeaderTextListBlock;
}
/**
 * A standard image with paragraphs and a bulleted list, and extra space for technical details.
 * @export
 * @interface StandardSingleImageSpecsDetailModule
 */
export interface StandardSingleImageSpecsDetailModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {ImageComponent}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    image?: ImageComponent;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    descriptionHeadline?: TextComponent;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    descriptionBlock1?: StandardTextBlock;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    descriptionBlock2?: StandardTextBlock;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    specificationHeadline?: TextComponent;
    /**
     * 
     * @type {StandardHeaderTextListBlock}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    specificationListBlock?: StandardHeaderTextListBlock;
    /**
     * 
     * @type {StandardTextBlock}
     * @memberof StandardSingleImageSpecsDetailModule
     */
    specificationTextBlock?: StandardTextBlock;
}
/**
 * A standard headline and body text with an image on the side.
 * @export
 * @interface StandardSingleSideImageModule
 */
export interface StandardSingleSideImageModule {
    /**
     * 
     * @type {PositionType}
     * @memberof StandardSingleSideImageModule
     */
    imagePositionType: PositionType;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardSingleSideImageModule
     */
    block?: StandardImageTextBlock;
}
/**
 * The standard table of technical feature names and definitions.
 * @export
 * @interface StandardTechSpecsModule
 */
export interface StandardTechSpecsModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardTechSpecsModule
     */
    headline?: TextComponent;
    /**
     * The specification list.
     * @type {Array<StandardTextPairBlock>}
     * @memberof StandardTechSpecsModule
     */
    specificationList: Array<StandardTextPairBlock>;
    /**
     * The number of tables to present. Features are evenly divided between the tables.
     * @type {number}
     * @memberof StandardTechSpecsModule
     */
    tableCount?: number;
}
/**
 * The A+ Content standard text box block, comprised of a paragraph with a headline.
 * @export
 * @interface StandardTextBlock
 */
export interface StandardTextBlock {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardTextBlock
     */
    headline?: TextComponent;
    /**
     * 
     * @type {ParagraphComponent}
     * @memberof StandardTextBlock
     */
    body?: ParagraphComponent;
}
/**
 * The A+ Content standard fixed length list of text, usually presented as bullet points.
 * @export
 * @interface StandardTextListBlock
 */
export interface StandardTextListBlock {
    /**
     * 
     * @type {Array<TextItem>}
     * @memberof StandardTextListBlock
     */
    textList: Array<TextItem>;
}
/**
 * A standard headline and body text.
 * @export
 * @interface StandardTextModule
 */
export interface StandardTextModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardTextModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {ParagraphComponent}
     * @memberof StandardTextModule
     */
    body: ParagraphComponent;
}
/**
 * The A+ Content standard label and description block, comprised of a pair of text components.
 * @export
 * @interface StandardTextPairBlock
 */
export interface StandardTextPairBlock {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardTextPairBlock
     */
    label?: TextComponent;
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardTextPairBlock
     */
    description?: TextComponent;
}
/**
 * Three standard images with text, presented across a single row.
 * @export
 * @interface StandardThreeImageTextModule
 */
export interface StandardThreeImageTextModule {
    /**
     * 
     * @type {TextComponent}
     * @memberof StandardThreeImageTextModule
     */
    headline?: TextComponent;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardThreeImageTextModule
     */
    block1?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardThreeImageTextModule
     */
    block2?: StandardImageTextBlock;
    /**
     * 
     * @type {StandardImageTextBlock}
     * @memberof StandardThreeImageTextModule
     */
    block3?: StandardImageTextBlock;
}
/**
 * Rich text content.
 * @export
 * @interface TextComponent
 */
export interface TextComponent {
    /**
     * The actual plain text.
     * @type {string}
     * @memberof TextComponent
     */
    value: string;
    /**
     * A set of content decorators.
     * @type {Array<Decorator>}
     * @memberof TextComponent
     */
    decoratorSet?: Array<Decorator>;
}
/**
 * Rich positional text, usually presented as a collection of bullet points.
 * @export
 * @interface TextItem
 */
export interface TextItem {
    /**
     * The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
     * @type {number}
     * @memberof TextItem
     */
    position: number;
    /**
     * 
     * @type {TextComponent}
     * @memberof TextItem
     */
    text: TextComponent;
}
/**
 * 
 * @export
 * @interface ValidateContentDocumentAsinRelationsResponse
 */
export interface ValidateContentDocumentAsinRelationsResponse {
    /**
     * A set of messages to the user, such as warnings or comments.
     * @type {Array<Error>}
     * @memberof ValidateContentDocumentAsinRelationsResponse
     */
    warnings?: Array<Error>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ValidateContentDocumentAsinRelationsResponse
     */
    errors: Array<Error>;
}

/**
 * AplusContentApi - axios parameter creator
 * @export
 */
export const AplusContentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentDocument: async (marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('createContentDocument', 'marketplaceId', marketplaceId)
            // verify required parameter 'postContentDocumentRequest' is not null or undefined
            assertParamExists('createContentDocument', 'postContentDocumentRequest', postContentDocumentRequest)
            const localVarPath = `/aplus/2020-11-01/contentDocuments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postContentDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'CONTENTS' | 'METADATA'>} includedDataSet The set of A+ Content data types to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDocument: async (contentReferenceKey: string, marketplaceId: string, includedDataSet: Array<'CONTENTS' | 'METADATA'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('getContentDocument', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getContentDocument', 'marketplaceId', marketplaceId)
            // verify required parameter 'includedDataSet' is not null or undefined
            assertParamExists('getContentDocument', 'includedDataSet', includedDataSet)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (includedDataSet) {
                localVarQueryParameter['includedDataSet'] = includedDataSet.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'METADATA'>} [includedDataSet] The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContentDocumentAsinRelations: async (contentReferenceKey: string, marketplaceId: string, includedDataSet?: Array<'METADATA'>, asinSet?: Array<string>, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('listContentDocumentAsinRelations', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listContentDocumentAsinRelations', 'marketplaceId', marketplaceId)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (includedDataSet) {
                localVarQueryParameter['includedDataSet'] = includedDataSet.join(COLLECTION_FORMATS.csv);
            }

            if (asinSet) {
                localVarQueryParameter['asinSet'] = asinSet.join(COLLECTION_FORMATS.csv);
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentApprovalSubmission: async (contentReferenceKey: string, marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('postContentDocumentApprovalSubmission', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('postContentDocumentApprovalSubmission', 'marketplaceId', marketplaceId)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentAsinRelationsRequest} postContentDocumentAsinRelationsRequest The content document ASIN relations request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentAsinRelations: async (contentReferenceKey: string, marketplaceId: string, postContentDocumentAsinRelationsRequest: PostContentDocumentAsinRelationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('postContentDocumentAsinRelations', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('postContentDocumentAsinRelations', 'marketplaceId', marketplaceId)
            // verify required parameter 'postContentDocumentAsinRelationsRequest' is not null or undefined
            assertParamExists('postContentDocumentAsinRelations', 'postContentDocumentAsinRelationsRequest', postContentDocumentAsinRelationsRequest)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postContentDocumentAsinRelationsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentSuspendSubmission: async (contentReferenceKey: string, marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('postContentDocumentSuspendSubmission', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('postContentDocumentSuspendSubmission', 'marketplaceId', marketplaceId)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchContentDocuments: async (marketplaceId: string, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('searchContentDocuments', 'marketplaceId', marketplaceId)
            const localVarPath = `/aplus/2020-11-01/contentDocuments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} asin The Amazon Standard Identification Number (ASIN).
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchContentPublishRecords: async (marketplaceId: string, asin: string, pageToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('searchContentPublishRecords', 'marketplaceId', marketplaceId)
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('searchContentPublishRecords', 'asin', asin)
            const localVarPath = `/aplus/2020-11-01/contentPublishRecords`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContentDocument: async (contentReferenceKey: string, marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'contentReferenceKey' is not null or undefined
            assertParamExists('updateContentDocument', 'contentReferenceKey', contentReferenceKey)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('updateContentDocument', 'marketplaceId', marketplaceId)
            // verify required parameter 'postContentDocumentRequest' is not null or undefined
            assertParamExists('updateContentDocument', 'postContentDocumentRequest', postContentDocumentRequest)
            const localVarPath = `/aplus/2020-11-01/contentDocuments/{contentReferenceKey}`
                .replace(`{${"contentReferenceKey"}}`, encodeURIComponent(String(contentReferenceKey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postContentDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateContentDocumentAsinRelations: async (marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, asinSet?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('validateContentDocumentAsinRelations', 'marketplaceId', marketplaceId)
            // verify required parameter 'postContentDocumentRequest' is not null or undefined
            assertParamExists('validateContentDocumentAsinRelations', 'postContentDocumentRequest', postContentDocumentRequest)
            const localVarPath = `/aplus/2020-11-01/contentAsinValidations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (asinSet) {
                localVarQueryParameter['asinSet'] = asinSet.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(postContentDocumentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AplusContentApi - functional programming interface
 * @export
 */
export const AplusContentApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AplusContentApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createContentDocument(marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createContentDocument(marketplaceId, postContentDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'CONTENTS' | 'METADATA'>} includedDataSet The set of A+ Content data types to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentDocument(contentReferenceKey: string, marketplaceId: string, includedDataSet: Array<'CONTENTS' | 'METADATA'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetContentDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentDocument(contentReferenceKey, marketplaceId, includedDataSet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'METADATA'>} [includedDataSet] The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listContentDocumentAsinRelations(contentReferenceKey: string, marketplaceId: string, includedDataSet?: Array<'METADATA'>, asinSet?: Array<string>, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListContentDocumentAsinRelationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listContentDocumentAsinRelations(contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentDocumentApprovalSubmission(contentReferenceKey: string, marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentDocumentApprovalSubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentDocumentApprovalSubmission(contentReferenceKey, marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentAsinRelationsRequest} postContentDocumentAsinRelationsRequest The content document ASIN relations request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentDocumentAsinRelations(contentReferenceKey: string, marketplaceId: string, postContentDocumentAsinRelationsRequest: PostContentDocumentAsinRelationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentDocumentAsinRelationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentDocumentAsinRelations(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postContentDocumentSuspendSubmission(contentReferenceKey: string, marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentDocumentSuspendSubmissionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postContentDocumentSuspendSubmission(contentReferenceKey, marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchContentDocuments(marketplaceId: string, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchContentDocumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchContentDocuments(marketplaceId, pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} asin The Amazon Standard Identification Number (ASIN).
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchContentPublishRecords(marketplaceId: string, asin: string, pageToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SearchContentPublishRecordsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchContentPublishRecords(marketplaceId, asin, pageToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContentDocument(contentReferenceKey: string, marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostContentDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContentDocument(contentReferenceKey, marketplaceId, postContentDocumentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async validateContentDocumentAsinRelations(marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, asinSet?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateContentDocumentAsinRelationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.validateContentDocumentAsinRelations(marketplaceId, postContentDocumentRequest, asinSet, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AplusContentApi - factory interface
 * @export
 */
export const AplusContentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AplusContentApiFp(configuration)
    return {
        /**
         * Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createContentDocument(marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options?: any): AxiosPromise<PostContentDocumentResponse> {
            return localVarFp.createContentDocument(marketplaceId, postContentDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'CONTENTS' | 'METADATA'>} includedDataSet The set of A+ Content data types to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentDocument(contentReferenceKey: string, marketplaceId: string, includedDataSet: Array<'CONTENTS' | 'METADATA'>, options?: any): AxiosPromise<GetContentDocumentResponse> {
            return localVarFp.getContentDocument(contentReferenceKey, marketplaceId, includedDataSet, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {Array<'METADATA'>} [includedDataSet] The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listContentDocumentAsinRelations(contentReferenceKey: string, marketplaceId: string, includedDataSet?: Array<'METADATA'>, asinSet?: Array<string>, pageToken?: string, options?: any): AxiosPromise<ListContentDocumentAsinRelationsResponse> {
            return localVarFp.listContentDocumentAsinRelations(contentReferenceKey, marketplaceId, includedDataSet, asinSet, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentApprovalSubmission(contentReferenceKey: string, marketplaceId: string, options?: any): AxiosPromise<PostContentDocumentApprovalSubmissionResponse> {
            return localVarFp.postContentDocumentApprovalSubmission(contentReferenceKey, marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentAsinRelationsRequest} postContentDocumentAsinRelationsRequest The content document ASIN relations request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentAsinRelations(contentReferenceKey: string, marketplaceId: string, postContentDocumentAsinRelationsRequest: PostContentDocumentAsinRelationsRequest, options?: any): AxiosPromise<PostContentDocumentAsinRelationsResponse> {
            return localVarFp.postContentDocumentAsinRelations(contentReferenceKey, marketplaceId, postContentDocumentAsinRelationsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postContentDocumentSuspendSubmission(contentReferenceKey: string, marketplaceId: string, options?: any): AxiosPromise<PostContentDocumentSuspendSubmissionResponse> {
            return localVarFp.postContentDocumentSuspendSubmission(contentReferenceKey, marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchContentDocuments(marketplaceId: string, pageToken?: string, options?: any): AxiosPromise<SearchContentDocumentsResponse> {
            return localVarFp.searchContentDocuments(marketplaceId, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {string} asin The Amazon Standard Identification Number (ASIN).
         * @param {string} [pageToken] A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchContentPublishRecords(marketplaceId: string, asin: string, pageToken?: string, options?: any): AxiosPromise<SearchContentPublishRecordsResponse> {
            return localVarFp.searchContentPublishRecords(marketplaceId, asin, pageToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} contentReferenceKey The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContentDocument(contentReferenceKey: string, marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, options?: any): AxiosPromise<PostContentDocumentResponse> {
            return localVarFp.updateContentDocument(contentReferenceKey, marketplaceId, postContentDocumentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} marketplaceId The identifier for the marketplace where the A+ Content is published.
         * @param {PostContentDocumentRequest} postContentDocumentRequest The content document request details.
         * @param {Array<string>} [asinSet] The set of ASINs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        validateContentDocumentAsinRelations(marketplaceId: string, postContentDocumentRequest: PostContentDocumentRequest, asinSet?: Array<string>, options?: any): AxiosPromise<ValidateContentDocumentAsinRelationsResponse> {
            return localVarFp.validateContentDocumentAsinRelations(marketplaceId, postContentDocumentRequest, asinSet, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createContentDocument operation in AplusContentApi.
 * @export
 * @interface AplusContentApiCreateContentDocumentRequest
 */
export interface AplusContentApiCreateContentDocumentRequest {
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiCreateContentDocument
     */
    readonly marketplaceId: string

    /**
     * The content document request details.
     * @type {PostContentDocumentRequest}
     * @memberof AplusContentApiCreateContentDocument
     */
    readonly postContentDocumentRequest: PostContentDocumentRequest
}

/**
 * Request parameters for getContentDocument operation in AplusContentApi.
 * @export
 * @interface AplusContentApiGetContentDocumentRequest
 */
export interface AplusContentApiGetContentDocumentRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
     * @type {string}
     * @memberof AplusContentApiGetContentDocument
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiGetContentDocument
     */
    readonly marketplaceId: string

    /**
     * The set of A+ Content data types to include in the response.
     * @type {Array<'CONTENTS' | 'METADATA'>}
     * @memberof AplusContentApiGetContentDocument
     */
    readonly includedDataSet: Array<'CONTENTS' | 'METADATA'>
}

/**
 * Request parameters for listContentDocumentAsinRelations operation in AplusContentApi.
 * @export
 * @interface AplusContentApiListContentDocumentAsinRelationsRequest
 */
export interface AplusContentApiListContentDocumentAsinRelationsRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
     * @type {string}
     * @memberof AplusContentApiListContentDocumentAsinRelations
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiListContentDocumentAsinRelations
     */
    readonly marketplaceId: string

    /**
     * The set of A+ Content data types to include in the response. If you do not include this parameter, the operation returns the related ASINs without metadata.
     * @type {Array<'METADATA'>}
     * @memberof AplusContentApiListContentDocumentAsinRelations
     */
    readonly includedDataSet?: Array<'METADATA'>

    /**
     * The set of ASINs.
     * @type {Array<string>}
     * @memberof AplusContentApiListContentDocumentAsinRelations
     */
    readonly asinSet?: Array<string>

    /**
     * A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
     * @type {string}
     * @memberof AplusContentApiListContentDocumentAsinRelations
     */
    readonly pageToken?: string
}

/**
 * Request parameters for postContentDocumentApprovalSubmission operation in AplusContentApi.
 * @export
 * @interface AplusContentApiPostContentDocumentApprovalSubmissionRequest
 */
export interface AplusContentApiPostContentDocumentApprovalSubmissionRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentApprovalSubmission
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentApprovalSubmission
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for postContentDocumentAsinRelations operation in AplusContentApi.
 * @export
 * @interface AplusContentApiPostContentDocumentAsinRelationsRequest
 */
export interface AplusContentApiPostContentDocumentAsinRelationsRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentAsinRelations
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentAsinRelations
     */
    readonly marketplaceId: string

    /**
     * The content document ASIN relations request details.
     * @type {PostContentDocumentAsinRelationsRequest}
     * @memberof AplusContentApiPostContentDocumentAsinRelations
     */
    readonly postContentDocumentAsinRelationsRequest: PostContentDocumentAsinRelationsRequest
}

/**
 * Request parameters for postContentDocumentSuspendSubmission operation in AplusContentApi.
 * @export
 * @interface AplusContentApiPostContentDocumentSuspendSubmissionRequest
 */
export interface AplusContentApiPostContentDocumentSuspendSubmissionRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ content identifier.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentSuspendSubmission
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiPostContentDocumentSuspendSubmission
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for searchContentDocuments operation in AplusContentApi.
 * @export
 * @interface AplusContentApiSearchContentDocumentsRequest
 */
export interface AplusContentApiSearchContentDocumentsRequest {
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiSearchContentDocuments
     */
    readonly marketplaceId: string

    /**
     * A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
     * @type {string}
     * @memberof AplusContentApiSearchContentDocuments
     */
    readonly pageToken?: string
}

/**
 * Request parameters for searchContentPublishRecords operation in AplusContentApi.
 * @export
 * @interface AplusContentApiSearchContentPublishRecordsRequest
 */
export interface AplusContentApiSearchContentPublishRecordsRequest {
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiSearchContentPublishRecords
     */
    readonly marketplaceId: string

    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof AplusContentApiSearchContentPublishRecords
     */
    readonly asin: string

    /**
     * A page token from the nextPageToken response element returned by your previous call to this operation. nextPageToken is returned when the results of a call exceed the page size. To get the next page of results, call the operation and include pageToken as the only parameter. Specifying pageToken with any other parameter will cause the request to fail. When no nextPageToken value is returned there are no more pages to return. A pageToken value is not usable across different operations.
     * @type {string}
     * @memberof AplusContentApiSearchContentPublishRecords
     */
    readonly pageToken?: string
}

/**
 * Request parameters for updateContentDocument operation in AplusContentApi.
 * @export
 * @interface AplusContentApiUpdateContentDocumentRequest
 */
export interface AplusContentApiUpdateContentDocumentRequest {
    /**
     * The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
     * @type {string}
     * @memberof AplusContentApiUpdateContentDocument
     */
    readonly contentReferenceKey: string

    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiUpdateContentDocument
     */
    readonly marketplaceId: string

    /**
     * The content document request details.
     * @type {PostContentDocumentRequest}
     * @memberof AplusContentApiUpdateContentDocument
     */
    readonly postContentDocumentRequest: PostContentDocumentRequest
}

/**
 * Request parameters for validateContentDocumentAsinRelations operation in AplusContentApi.
 * @export
 * @interface AplusContentApiValidateContentDocumentAsinRelationsRequest
 */
export interface AplusContentApiValidateContentDocumentAsinRelationsRequest {
    /**
     * The identifier for the marketplace where the A+ Content is published.
     * @type {string}
     * @memberof AplusContentApiValidateContentDocumentAsinRelations
     */
    readonly marketplaceId: string

    /**
     * The content document request details.
     * @type {PostContentDocumentRequest}
     * @memberof AplusContentApiValidateContentDocumentAsinRelations
     */
    readonly postContentDocumentRequest: PostContentDocumentRequest

    /**
     * The set of ASINs.
     * @type {Array<string>}
     * @memberof AplusContentApiValidateContentDocumentAsinRelations
     */
    readonly asinSet?: Array<string>
}

/**
 * AplusContentApi - object-oriented interface
 * @export
 * @class AplusContentApi
 * @extends {BaseAPI}
 */
export class AplusContentApi extends BaseAPI {
    /**
     * Creates a new A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiCreateContentDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public createContentDocument(requestParameters: AplusContentApiCreateContentDocumentRequest, options?: any) {
        return AplusContentApiFp(this.configuration).createContentDocument(requestParameters.marketplaceId, requestParameters.postContentDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns an A+ Content document, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiGetContentDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public getContentDocument(requestParameters: AplusContentApiGetContentDocumentRequest, options?: any) {
        return AplusContentApiFp(this.configuration).getContentDocument(requestParameters.contentReferenceKey, requestParameters.marketplaceId, requestParameters.includedDataSet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiListContentDocumentAsinRelationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public listContentDocumentAsinRelations(requestParameters: AplusContentApiListContentDocumentAsinRelationsRequest, options?: any) {
        return AplusContentApiFp(this.configuration).listContentDocumentAsinRelations(requestParameters.contentReferenceKey, requestParameters.marketplaceId, requestParameters.includedDataSet, requestParameters.asinSet, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits an A+ Content document for review, approval, and publishing.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiPostContentDocumentApprovalSubmissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public postContentDocumentApprovalSubmission(requestParameters: AplusContentApiPostContentDocumentApprovalSubmissionRequest, options?: any) {
        return AplusContentApiFp(this.configuration).postContentDocumentApprovalSubmission(requestParameters.contentReferenceKey, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiPostContentDocumentAsinRelationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public postContentDocumentAsinRelations(requestParameters: AplusContentApiPostContentDocumentAsinRelationsRequest, options?: any) {
        return AplusContentApiFp(this.configuration).postContentDocumentAsinRelations(requestParameters.contentReferenceKey, requestParameters.marketplaceId, requestParameters.postContentDocumentAsinRelationsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiPostContentDocumentSuspendSubmissionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public postContentDocumentSuspendSubmission(requestParameters: AplusContentApiPostContentDocumentSuspendSubmissionRequest, options?: any) {
        return AplusContentApiFp(this.configuration).postContentDocumentSuspendSubmission(requestParameters.contentReferenceKey, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiSearchContentDocumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public searchContentDocuments(requestParameters: AplusContentApiSearchContentDocumentsRequest, options?: any) {
        return AplusContentApiFp(this.configuration).searchContentDocuments(requestParameters.marketplaceId, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches for A+ Content publishing records, if available.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiSearchContentPublishRecordsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public searchContentPublishRecords(requestParameters: AplusContentApiSearchContentPublishRecordsRequest, options?: any) {
        return AplusContentApiFp(this.configuration).searchContentPublishRecords(requestParameters.marketplaceId, requestParameters.asin, requestParameters.pageToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an existing A+ Content document.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiUpdateContentDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public updateContentDocument(requestParameters: AplusContentApiUpdateContentDocumentRequest, options?: any) {
        return AplusContentApiFp(this.configuration).updateContentDocument(requestParameters.contentReferenceKey, requestParameters.marketplaceId, requestParameters.postContentDocumentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Checks if the A+ Content document is valid for use on a set of ASINs.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {AplusContentApiValidateContentDocumentAsinRelationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AplusContentApi
     */
    public validateContentDocumentAsinRelations(requestParameters: AplusContentApiValidateContentDocumentAsinRelationsRequest, options?: any) {
        return AplusContentApiFp(this.configuration).validateContentDocumentAsinRelations(requestParameters.marketplaceId, requestParameters.postContentDocumentRequest, requestParameters.asinSet, options).then((request) => request(this.axios, this.basePath));
    }
}


