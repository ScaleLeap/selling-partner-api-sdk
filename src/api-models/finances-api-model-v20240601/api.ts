/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Transfers.
 * The Selling Partner API for Transfers enables selling partners to retrieve payment methods and initiate payouts for their seller accounts. This API supports the following marketplaces: DE, FR, IT, ES, SE, NL, PL, and BE.
 *
 * The version of the OpenAPI document: 2024-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The default payment method type.
 * @export
 * @enum {string}
 */
export enum AssignmentType {
    DefaultDepositMethod = 'DEFAULT_DEPOSIT_METHOD'
}

/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * array of errors
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * The expiration date of the card used for payment. If the payment method is not `card`, the expiration date is `null`.
 * @export
 * @interface ExpiryDate
 */
export interface ExpiryDate {
    /**
     * The month the card expires expressed as a number from `1` to `12`.
     * @type {string}
     * @memberof ExpiryDate
     */
    month?: string;
    /**
     * Year
     * @type {string}
     * @memberof ExpiryDate
     */
    year?: string;
}
/**
 * The response schema for the `getPaymentMethods` operation.
 * @export
 * @interface GetPaymentMethodsResponse
 */
export interface GetPaymentMethodsResponse {
    /**
     * The list of payment methods with payment method details.
     * @type {Array<PaymentMethodDetails>}
     * @memberof GetPaymentMethodsResponse
     */
    paymentMethods?: Array<PaymentMethodDetails>;
}
/**
 * The request schema for the `initiatePayout` operation.
 * @export
 * @interface InitiatePayoutRequest
 */
export interface InitiatePayoutRequest {
    /**
     * The identifier of the Amazon marketplace. For the list of all marketplace IDs, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof InitiatePayoutRequest
     */
    marketplaceId: string;
    /**
     * The account type in the selected marketplace for which a payout must be initiated. For supported EU marketplaces, the only account type is `Standard Orders`.
     * @type {string}
     * @memberof InitiatePayoutRequest
     */
    accountType: string;
}
/**
 * The response schema for the `initiatePayout` operation.
 * @export
 * @interface InitiatePayoutResponse
 */
export interface InitiatePayoutResponse {
    /**
     * The financial event group ID for a successfully initiated payout. You can use this ID to track payout information.
     * @type {string}
     * @memberof InitiatePayoutResponse
     */
    payoutReferenceId: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The details of a payment method.
 * @export
 * @interface PaymentMethodDetails
 */
export interface PaymentMethodDetails {
    /**
     * The name of the account holder who is registered for the payment method.
     * @type {string}
     * @memberof PaymentMethodDetails
     */
    accountHolderName?: string;
    /**
     * The payment method identifier.
     * @type {string}
     * @memberof PaymentMethodDetails
     */
    paymentMethodId?: string;
    /**
     * The last three or four digits of the payment method.
     * @type {string}
     * @memberof PaymentMethodDetails
     */
    tail?: string;
    /**
     * 
     * @type {ExpiryDate}
     * @memberof PaymentMethodDetails
     */
    expiryDate?: ExpiryDate;
    /**
     * The two-letter country code in ISO 3166-1 alpha-2 format. For payment methods in the `card` category, the code is for the country where the card was issued. For payment methods in the `bank account` category, the code is for the country where the account is located.
     * @type {string}
     * @memberof PaymentMethodDetails
     */
    countryCode?: string;
    /**
     * 
     * @type {PaymentMethodType}
     * @memberof PaymentMethodDetails
     */
    paymentMethodType?: PaymentMethodType | 'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET';
    /**
     * 
     * @type {AssignmentType}
     * @memberof PaymentMethodDetails
     */
    assignmentType?: AssignmentType | 'DEFAULT_DEPOSIT_METHOD';
}
/**
 * The type of payment method.
 * @export
 * @enum {string}
 */
export enum PaymentMethodType {
    BankAccount = 'BANK_ACCOUNT',
    Card = 'CARD',
    SellerWallet = 'SELLER_WALLET'
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>} [paymentMethodTypes] A comma-separated list of the payment method types you want to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethods: async (marketplaceId: string, paymentMethodTypes?: Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getPaymentMethods', 'marketplaceId', marketplaceId)
            const localVarPath = `/finances/transfers/2024-06-01/paymentMethods`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (paymentMethodTypes) {
                localVarQueryParameter['paymentMethodTypes'] = paymentMethodTypes.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates an on-demand payout to the seller\'s default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InitiatePayoutRequest} body The request body for the &#x60;initiatePayout&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayout: async (body: InitiatePayoutRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('initiatePayout', 'body', body)
            const localVarPath = `/finances/transfers/2024-06-01/payouts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>} [paymentMethodTypes] A comma-separated list of the payment method types you want to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentMethods(marketplaceId: string, paymentMethodTypes?: Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPaymentMethodsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentMethods(marketplaceId, paymentMethodTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates an on-demand payout to the seller\'s default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InitiatePayoutRequest} body The request body for the &#x60;initiatePayout&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async initiatePayout(body: InitiatePayoutRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InitiatePayoutResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.initiatePayout(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
         * @param {Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>} [paymentMethodTypes] A comma-separated list of the payment method types you want to include in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentMethods(marketplaceId: string, paymentMethodTypes?: Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>, options?: any): AxiosPromise<GetPaymentMethodsResponse> {
            return localVarFp.getPaymentMethods(marketplaceId, paymentMethodTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates an on-demand payout to the seller\'s default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {InitiatePayoutRequest} body The request body for the &#x60;initiatePayout&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        initiatePayout(body: InitiatePayoutRequest, options?: any): AxiosPromise<InitiatePayoutResponse> {
            return localVarFp.initiatePayout(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPaymentMethods operation in DefaultApi.
 * @export
 * @interface DefaultApiGetPaymentMethodsRequest
 */
export interface DefaultApiGetPaymentMethodsRequest {
    /**
     * The identifier of the marketplace from which you want to retrieve payment methods. For the list of possible marketplace identifiers, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
     * @type {string}
     * @memberof DefaultApiGetPaymentMethods
     */
    readonly marketplaceId: string

    /**
     * A comma-separated list of the payment method types you want to include in the response.
     * @type {Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>}
     * @memberof DefaultApiGetPaymentMethods
     */
    readonly paymentMethodTypes?: Array<'BANK_ACCOUNT' | 'CARD' | 'SELLER_WALLET'>
}

/**
 * Request parameters for initiatePayout operation in DefaultApi.
 * @export
 * @interface DefaultApiInitiatePayoutRequest
 */
export interface DefaultApiInitiatePayoutRequest {
    /**
     * The request body for the &#x60;initiatePayout&#x60; operation.
     * @type {InitiatePayoutRequest}
     * @memberof DefaultApiInitiatePayout
     */
    readonly body: InitiatePayoutRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns the list of payment methods for the seller, which can be filtered by method type.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | .5 | 30 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {DefaultApiGetPaymentMethodsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPaymentMethods(requestParameters: DefaultApiGetPaymentMethodsRequest, options?: any) {
        return DefaultApiFp(this.configuration).getPaymentMethods(requestParameters.marketplaceId, requestParameters.paymentMethodTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates an on-demand payout to the seller\'s default deposit method in Seller Central for the given `marketplaceId` and `accountType`, if eligible. You can only initiate one on-demand payout for each marketplace and account type within a 24-hour period.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.017 | 2 |  The `x-amzn-RateLimit-Limit` response header contains the usage plan rate limits for the operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput might have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {DefaultApiInitiatePayoutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public initiatePayout(requestParameters: DefaultApiInitiatePayoutRequest, options?: any) {
        return DefaultApiFp(this.configuration).initiatePayout(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


