/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for Invoices.
 * Use the Selling Partner API for Invoices to retrieve and manage invoice-related operations, which can help selling partners manage their bookkeeping processes.
 *
 * The version of the OpenAPI document: 2024-06-19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The definition of the attribute option.
 * @export
 * @interface AttributeOption
 */
export interface AttributeOption {
    /**
     * The description of the attribute value.
     * @type {string}
     * @memberof AttributeOption
     */
    description?: string;
    /**
     * The possible values for the attribute option.
     * @type {string}
     * @memberof AttributeOption
     */
    value?: string;
}
/**
 * A list of error responses that are returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * List of errors.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * Detailed information about the export.
 * @export
 * @interface Export
 */
export interface Export {
    /**
     * When the export generation fails, this attribute contains a description of the error.
     * @type {string}
     * @memberof Export
     */
    errorMessage?: string;
    /**
     * The export identifier.
     * @type {string}
     * @memberof Export
     */
    exportId?: string;
    /**
     * The date and time when the export generation finished. Vales are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     * @type {string}
     * @memberof Export
     */
    generateExportFinishedAt?: string;
    /**
     * The date and time when the export generation started. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     * @type {string}
     * @memberof Export
     */
    generateExportStartedAt?: string;
    /**
     * The identifier for the export documents. To get the information required to retrieve the export document\'s contents, pass each ID in the `getInvoicesDocument` operation.  This list is empty until the status is `DONE`.
     * @type {Array<string>}
     * @memberof Export
     */
    invoicesDocumentIds?: Array<string>;
    /**
     * 
     * @type {ExportStatus}
     * @memberof Export
     */
    status?: ExportStatus | 'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR';
}
/**
 * The information required to create the export request.
 * @export
 * @interface ExportInvoicesRequest
 */
export interface ExportInvoicesRequest {
    /**
     * The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    dateEnd?: string;
    /**
     * The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    dateStart?: string;
    /**
     * The external ID of the invoices you want included in the response.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    externalInvoiceId?: string;
    /**
     * 
     * @type {FileFormat}
     * @memberof ExportInvoicesRequest
     */
    fileFormat?: FileFormat | 'XML';
    /**
     * The marketplace-specific classification of the invoice type. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    invoiceType?: string;
    /**
     * The ID of the marketplace from which you want the invoices.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    marketplaceId: string;
    /**
     * The series number of the invoices you want included in the response.
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    series?: string;
    /**
     * A list of statuses that you can use to filter invoices. Use the `getInvoicesAttributes` operation to check invoice status options.  Min count: 1
     * @type {Array<string>}
     * @memberof ExportInvoicesRequest
     */
    statuses?: Array<string>;
    /**
     * 
     * @type {TransactionIdentifier}
     * @memberof ExportInvoicesRequest
     */
    transactionIdentifier?: TransactionIdentifier;
    /**
     * The marketplace-specific classification of the transaction type for which the invoice was created. Use the `getInvoicesAttributes` operation to check `transactionType` options
     * @type {string}
     * @memberof ExportInvoicesRequest
     */
    transactionType?: string;
}
/**
 * Success.
 * @export
 * @interface ExportInvoicesResponse
 */
export interface ExportInvoicesResponse {
    /**
     * The export identifier.
     * @type {string}
     * @memberof ExportInvoicesResponse
     */
    exportId?: string;
}
/**
 * The current status of the request.
 * @export
 * @enum {string}
 */
export enum ExportStatus {
    Requested = 'REQUESTED',
    Processing = 'PROCESSING',
    Done = 'DONE',
    Error = 'ERROR'
}

/**
 * Supported invoice file extensions.
 * @export
 * @enum {string}
 */
export enum FileFormat {
    Xml = 'XML'
}

/**
 * Success.
 * @export
 * @interface GetInvoiceResponse
 */
export interface GetInvoiceResponse {
    /**
     * 
     * @type {Invoice}
     * @memberof GetInvoiceResponse
     */
    invoice?: Invoice;
}
/**
 * Success.
 * @export
 * @interface GetInvoicesAttributesResponse
 */
export interface GetInvoicesAttributesResponse {
    /**
     * 
     * @type {InvoicesAttributes}
     * @memberof GetInvoicesAttributesResponse
     */
    invoicesAttributes?: InvoicesAttributes;
}
/**
 * Success.
 * @export
 * @interface GetInvoicesDocumentResponse
 */
export interface GetInvoicesDocumentResponse {
    /**
     * 
     * @type {InvoicesDocument}
     * @memberof GetInvoicesDocumentResponse
     */
    invoicesDocument?: InvoicesDocument;
}
/**
 * Success.
 * @export
 * @interface GetInvoicesExportResponse
 */
export interface GetInvoicesExportResponse {
    /**
     * 
     * @type {Export}
     * @memberof GetInvoicesExportResponse
     */
    _export?: Export;
}
/**
 * Success.
 * @export
 * @interface GetInvoicesExportsResponse
 */
export interface GetInvoicesExportsResponse {
    /**
     * A list of exports.
     * @type {Array<Export>}
     * @memberof GetInvoicesExportsResponse
     */
    exports?: Array<Export>;
    /**
     * This token is returned when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the `getInvoices` operation and include this token with the previous call parameters.
     * @type {string}
     * @memberof GetInvoicesExportsResponse
     */
    nextToken?: string;
}
/**
 * Success.
 * @export
 * @interface GetInvoicesResponse
 */
export interface GetInvoicesResponse {
    /**
     * A list of invoices.
     * @type {Array<Invoice>}
     * @memberof GetInvoicesResponse
     */
    invoices?: Array<Invoice>;
    /**
     * This token is returned when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the `getInvoices` operation and include this token with the previous call parameters.
     * @type {string}
     * @memberof GetInvoicesResponse
     */
    nextToken?: string;
}
/**
 * Provides detailed information about an invoice.
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The date and time the invoice is issued. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
     * @type {string}
     * @memberof Invoice
     */
    date?: string;
    /**
     * If the invoice is in an error state, this attribute displays the error code.
     * @type {string}
     * @memberof Invoice
     */
    errorCode?: string;
    /**
     * The invoice identifier that is used by an external party. This is typically the government agency that authorized the invoice.
     * @type {string}
     * @memberof Invoice
     */
    externalInvoiceId?: string;
    /**
     * The response message from the government authority when there is an error during invoice issuance.
     * @type {string}
     * @memberof Invoice
     */
    govResponse?: string;
    /**
     * The invoice identifier.
     * @type {string}
     * @memberof Invoice
     */
    id?: string;
    /**
     * The classification of the invoice type. This varies across marketplaces. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
     * @type {string}
     * @memberof Invoice
     */
    invoiceType?: string;
    /**
     * Use this identifier in conjunction with `externalInvoiceId` to identify invoices from the same seller.
     * @type {string}
     * @memberof Invoice
     */
    series?: string;
    /**
     * The invoice status classification. Use the `getInvoicesAttributes` operation to check invoice status options.
     * @type {string}
     * @memberof Invoice
     */
    status?: string;
    /**
     * List with identifiers for the transactions associated to the invoice.
     * @type {Array<TransactionIdentifier>}
     * @memberof Invoice
     */
    transactionIds?: Array<TransactionIdentifier>;
    /**
     * Classification of the transaction that originated this invoice. Use the `getInvoicesAttributes` operation to check `transactionType` options.
     * @type {string}
     * @memberof Invoice
     */
    transactionType?: string;
}
/**
 * An object that contains the invoice attributes definition.
 * @export
 * @interface InvoicesAttributes
 */
export interface InvoicesAttributes {
    /**
     * A list of all the options that are available for the invoice status attribute.
     * @type {Array<AttributeOption>}
     * @memberof InvoicesAttributes
     */
    invoiceStatusOptions?: Array<AttributeOption>;
    /**
     * A list of all the options that are available for the invoice type attribute.
     * @type {Array<AttributeOption>}
     * @memberof InvoicesAttributes
     */
    invoiceTypeOptions?: Array<AttributeOption>;
    /**
     * A list of all the options that are available for the transaction identifier name attribute.
     * @type {Array<AttributeOption>}
     * @memberof InvoicesAttributes
     */
    transactionIdentifierNameOptions?: Array<AttributeOption>;
    /**
     * A list of all the options that are available for the transaction type attribute.
     * @type {Array<AttributeOption>}
     * @memberof InvoicesAttributes
     */
    transactionTypeOptions?: Array<AttributeOption>;
}
/**
 * An object that contains the `documentId` and an S3 pre-signed URL that you can use to download the specified file.
 * @export
 * @interface InvoicesDocument
 */
export interface InvoicesDocument {
    /**
     * The identifier of the export document.
     * @type {string}
     * @memberof InvoicesDocument
     */
    invoicesDocumentId?: string;
    /**
     * A pre-signed URL that you can use to download the invoices document in zip format. This URL expires after 30 seconds.
     * @type {string}
     * @memberof InvoicesDocument
     */
    invoicesDocumentUrl?: string;
}
/**
 * The error response that is returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * The identifier for a transaction.
 * @export
 * @interface TransactionIdentifier
 */
export interface TransactionIdentifier {
    /**
     * The transaction identifier name. Use the `getInvoicesAttributes` operation to check `transactionIdentifierName` options.
     * @type {string}
     * @memberof TransactionIdentifier
     */
    name?: string;
    /**
     * The transaction identifier.
     * @type {string}
     * @memberof TransactionIdentifier
     */
    id?: string;
}

/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates an invoice export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ExportInvoicesRequest} body Information required to create the export request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoicesExport: async (body: ExportInvoicesRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createInvoicesExport', 'body', body)
            const localVarPath = `/tax/invoices/2024-06-19/exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns invoice data for the specified invoice. This operation returns only a subset of the invoices data; refer to the response definition to get all the possible attributes. To get the full invoice, use the `createInvoicesExport` operation to start an export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace from which you want the invoice.
         * @param {string} invoiceId The invoice identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice: async (marketplaceId: string, invoiceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getInvoice', 'marketplaceId', marketplaceId)
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('getInvoice', 'invoiceId', invoiceId)
            const localVarPath = `/tax/invoices/2024-06-19/invoices/{invoiceId}`
                .replace(`{${"invoiceId"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns invoice details for the invoices that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The response includes only the invoices that match the specified marketplace.
         * @param {string} [transactionIdentifierName] The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options.
         * @param {number} [pageSize] The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200
         * @param {string} [dateEnd] The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.
         * @param {string} [transactionType] The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.
         * @param {string} [transactionIdentifierId] The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field.
         * @param {string} [dateStart] The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
         * @param {string} [series] Return invoices with the specified series number.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {'DESC' | 'ASC'} [sortOrder] Sort the invoices in the response in ascending or descending order.
         * @param {string} [invoiceType] The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
         * @param {Array<string>} [statuses] A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1
         * @param {string} [externalInvoiceId] Return invoices that match this external ID. This is typically the Government Invoice ID.
         * @param {'START_DATE_TIME'} [sortBy] The attribute by which you want to sort the invoices in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoices: async (marketplaceId: string, transactionIdentifierName?: string, pageSize?: number, dateEnd?: string, transactionType?: string, transactionIdentifierId?: string, dateStart?: string, series?: string, nextToken?: string, sortOrder?: 'DESC' | 'ASC', invoiceType?: string, statuses?: Array<string>, externalInvoiceId?: string, sortBy?: 'START_DATE_TIME', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getInvoices', 'marketplaceId', marketplaceId)
            const localVarPath = `/tax/invoices/2024-06-19/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (transactionIdentifierName !== undefined) {
                localVarQueryParameter['transactionIdentifierName'] = transactionIdentifierName;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (transactionType !== undefined) {
                localVarQueryParameter['transactionType'] = transactionType;
            }

            if (transactionIdentifierId !== undefined) {
                localVarQueryParameter['transactionIdentifierId'] = transactionIdentifierId;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['dateStart'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString() :
                    dateStart;
            }

            if (series !== undefined) {
                localVarQueryParameter['series'] = series;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (invoiceType !== undefined) {
                localVarQueryParameter['invoiceType'] = invoiceType;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses.join(COLLECTION_FORMATS.csv);
            }

            if (externalInvoiceId !== undefined) {
                localVarQueryParameter['externalInvoiceId'] = externalInvoiceId;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns marketplace-dependent schemas and their respective set of possible values.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesAttributes: async (marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getInvoicesAttributes', 'marketplaceId', marketplaceId)
            const localVarPath = `/tax/invoices/2024-06-19/attributes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the invoice document\'s ID and URL. Use the URL to download the ZIP file, which contains the invoices from the corresponding `createInvoicesExport` request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} invoicesDocumentId The export document identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesDocument: async (invoicesDocumentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoicesDocumentId' is not null or undefined
            assertParamExists('getInvoicesDocument', 'invoicesDocumentId', invoicesDocumentId)
            const localVarPath = `/tax/invoices/2024-06-19/documents/{invoicesDocumentId}`
                .replace(`{${"invoicesDocumentId"}}`, encodeURIComponent(String(invoicesDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns invoice export details (including the `exportDocumentId`, if available) for the export that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} exportId The unique identifier for the export.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesExport: async (exportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'exportId' is not null or undefined
            assertParamExists('getInvoicesExport', 'exportId', exportId)
            const localVarPath = `/tax/invoices/2024-06-19/exports/{exportId}`
                .replace(`{${"exportId"}}`, encodeURIComponent(String(exportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns invoice exports details for exports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The returned exports match the specified marketplace.
         * @param {string} [dateStart] The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {number} [pageSize] The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100
         * @param {string} [dateEnd] The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request.
         * @param {'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR'} [status] Return exports matching the status specified. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesExports: async (marketplaceId: string, dateStart?: string, nextToken?: string, pageSize?: number, dateEnd?: string, status?: 'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getInvoicesExports', 'marketplaceId', marketplaceId)
            const localVarPath = `/tax/invoices/2024-06-19/exports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (dateStart !== undefined) {
                localVarQueryParameter['dateStart'] = (dateStart as any instanceof Date) ?
                    (dateStart as any).toISOString() :
                    dateStart;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (dateEnd !== undefined) {
                localVarQueryParameter['dateEnd'] = (dateEnd as any instanceof Date) ?
                    (dateEnd as any).toISOString() :
                    dateEnd;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * Creates an invoice export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ExportInvoicesRequest} body Information required to create the export request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInvoicesExport(body: ExportInvoicesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportInvoicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInvoicesExport(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns invoice data for the specified invoice. This operation returns only a subset of the invoices data; refer to the response definition to get all the possible attributes. To get the full invoice, use the `createInvoicesExport` operation to start an export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace from which you want the invoice.
         * @param {string} invoiceId The invoice identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoice(marketplaceId: string, invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoiceResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoice(marketplaceId, invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns invoice details for the invoices that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The response includes only the invoices that match the specified marketplace.
         * @param {string} [transactionIdentifierName] The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options.
         * @param {number} [pageSize] The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200
         * @param {string} [dateEnd] The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.
         * @param {string} [transactionType] The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.
         * @param {string} [transactionIdentifierId] The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field.
         * @param {string} [dateStart] The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
         * @param {string} [series] Return invoices with the specified series number.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {'DESC' | 'ASC'} [sortOrder] Sort the invoices in the response in ascending or descending order.
         * @param {string} [invoiceType] The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
         * @param {Array<string>} [statuses] A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1
         * @param {string} [externalInvoiceId] Return invoices that match this external ID. This is typically the Government Invoice ID.
         * @param {'START_DATE_TIME'} [sortBy] The attribute by which you want to sort the invoices in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoices(marketplaceId: string, transactionIdentifierName?: string, pageSize?: number, dateEnd?: string, transactionType?: string, transactionIdentifierId?: string, dateStart?: string, series?: string, nextToken?: string, sortOrder?: 'DESC' | 'ASC', invoiceType?: string, statuses?: Array<string>, externalInvoiceId?: string, sortBy?: 'START_DATE_TIME', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoices(marketplaceId, transactionIdentifierName, pageSize, dateEnd, transactionType, transactionIdentifierId, dateStart, series, nextToken, sortOrder, invoiceType, statuses, externalInvoiceId, sortBy, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns marketplace-dependent schemas and their respective set of possible values.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesAttributes(marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesAttributesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesAttributes(marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the invoice document\'s ID and URL. Use the URL to download the ZIP file, which contains the invoices from the corresponding `createInvoicesExport` request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} invoicesDocumentId The export document identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesDocument(invoicesDocumentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesDocument(invoicesDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns invoice export details (including the `exportDocumentId`, if available) for the export that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} exportId The unique identifier for the export.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesExport(exportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesExportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesExport(exportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns invoice exports details for exports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The returned exports match the specified marketplace.
         * @param {string} [dateStart] The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {number} [pageSize] The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100
         * @param {string} [dateEnd] The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request.
         * @param {'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR'} [status] Return exports matching the status specified. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInvoicesExports(marketplaceId: string, dateStart?: string, nextToken?: string, pageSize?: number, dateEnd?: string, status?: 'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetInvoicesExportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInvoicesExports(marketplaceId, dateStart, nextToken, pageSize, dateEnd, status, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * Creates an invoice export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ExportInvoicesRequest} body Information required to create the export request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInvoicesExport(body: ExportInvoicesRequest, options?: any): AxiosPromise<ExportInvoicesResponse> {
            return localVarFp.createInvoicesExport(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns invoice data for the specified invoice. This operation returns only a subset of the invoices data; refer to the response definition to get all the possible attributes. To get the full invoice, use the `createInvoicesExport` operation to start an export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace from which you want the invoice.
         * @param {string} invoiceId The invoice identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoice(marketplaceId: string, invoiceId: string, options?: any): AxiosPromise<GetInvoiceResponse> {
            return localVarFp.getInvoice(marketplaceId, invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns invoice details for the invoices that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The response includes only the invoices that match the specified marketplace.
         * @param {string} [transactionIdentifierName] The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options.
         * @param {number} [pageSize] The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200
         * @param {string} [dateEnd] The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.
         * @param {string} [transactionType] The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.
         * @param {string} [transactionIdentifierId] The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field.
         * @param {string} [dateStart] The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
         * @param {string} [series] Return invoices with the specified series number.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {'DESC' | 'ASC'} [sortOrder] Sort the invoices in the response in ascending or descending order.
         * @param {string} [invoiceType] The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
         * @param {Array<string>} [statuses] A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1
         * @param {string} [externalInvoiceId] Return invoices that match this external ID. This is typically the Government Invoice ID.
         * @param {'START_DATE_TIME'} [sortBy] The attribute by which you want to sort the invoices in the response.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoices(marketplaceId: string, transactionIdentifierName?: string, pageSize?: number, dateEnd?: string, transactionType?: string, transactionIdentifierId?: string, dateStart?: string, series?: string, nextToken?: string, sortOrder?: 'DESC' | 'ASC', invoiceType?: string, statuses?: Array<string>, externalInvoiceId?: string, sortBy?: 'START_DATE_TIME', options?: any): AxiosPromise<GetInvoicesResponse> {
            return localVarFp.getInvoices(marketplaceId, transactionIdentifierName, pageSize, dateEnd, transactionType, transactionIdentifierId, dateStart, series, nextToken, sortOrder, invoiceType, statuses, externalInvoiceId, sortBy, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns marketplace-dependent schemas and their respective set of possible values.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesAttributes(marketplaceId: string, options?: any): AxiosPromise<GetInvoicesAttributesResponse> {
            return localVarFp.getInvoicesAttributes(marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the invoice document\'s ID and URL. Use the URL to download the ZIP file, which contains the invoices from the corresponding `createInvoicesExport` request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} invoicesDocumentId The export document identifier.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesDocument(invoicesDocumentId: string, options?: any): AxiosPromise<GetInvoicesDocumentResponse> {
            return localVarFp.getInvoicesDocument(invoicesDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns invoice export details (including the `exportDocumentId`, if available) for the export that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} exportId The unique identifier for the export.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesExport(exportId: string, options?: any): AxiosPromise<GetInvoicesExportResponse> {
            return localVarFp.getInvoicesExport(exportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns invoice exports details for exports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The returned exports match the specified marketplace.
         * @param {string} [dateStart] The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago.
         * @param {string} [nextToken] The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
         * @param {number} [pageSize] The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100
         * @param {string} [dateEnd] The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request.
         * @param {'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR'} [status] Return exports matching the status specified. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInvoicesExports(marketplaceId: string, dateStart?: string, nextToken?: string, pageSize?: number, dateEnd?: string, status?: 'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR', options?: any): AxiosPromise<GetInvoicesExportsResponse> {
            return localVarFp.getInvoicesExports(marketplaceId, dateStart, nextToken, pageSize, dateEnd, status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createInvoicesExport operation in InvoicesApi.
 * @export
 * @interface InvoicesApiCreateInvoicesExportRequest
 */
export interface InvoicesApiCreateInvoicesExportRequest {
    /**
     * Information required to create the export request.
     * @type {ExportInvoicesRequest}
     * @memberof InvoicesApiCreateInvoicesExport
     */
    readonly body: ExportInvoicesRequest
}

/**
 * Request parameters for getInvoice operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoiceRequest
 */
export interface InvoicesApiGetInvoiceRequest {
    /**
     * The marketplace from which you want the invoice.
     * @type {string}
     * @memberof InvoicesApiGetInvoice
     */
    readonly marketplaceId: string

    /**
     * The invoice identifier.
     * @type {string}
     * @memberof InvoicesApiGetInvoice
     */
    readonly invoiceId: string
}

/**
 * Request parameters for getInvoices operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesRequest
 */
export interface InvoicesApiGetInvoicesRequest {
    /**
     * The response includes only the invoices that match the specified marketplace.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly marketplaceId: string

    /**
     * The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierId&#x60; field.Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionIdentifierName&#x60; options.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly transactionIdentifierName?: string

    /**
     * The maximum number of invoices you want to return in a single call.  Minimum: 1  Maximum: 200
     * @type {number}
     * @memberof InvoicesApiGetInvoices
     */
    readonly pageSize?: number

    /**
     * The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly dateEnd?: string

    /**
     * The marketplace-specific classification of the transaction type for which the invoice was created. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;transactionType&#x60; options.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly transactionType?: string

    /**
     * The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the &#x60;transactionIdentifierName&#x60; field.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly transactionIdentifierId?: string

    /**
     * The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly dateStart?: string

    /**
     * Return invoices with the specified series number.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly series?: string

    /**
     * The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly nextToken?: string

    /**
     * Sort the invoices in the response in ascending or descending order.
     * @type {'DESC' | 'ASC'}
     * @memberof InvoicesApiGetInvoices
     */
    readonly sortOrder?: 'DESC' | 'ASC'

    /**
     * The marketplace-specific classification of the invoice type. Use the &#x60;getInvoicesAttributes&#x60; operation to check &#x60;invoiceType&#x60; options.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly invoiceType?: string

    /**
     * A list of statuses that you can use to filter invoices. Use the &#x60;getInvoicesAttributes&#x60; operation to check invoice status options.  Min count: 1
     * @type {Array<string>}
     * @memberof InvoicesApiGetInvoices
     */
    readonly statuses?: Array<string>

    /**
     * Return invoices that match this external ID. This is typically the Government Invoice ID.
     * @type {string}
     * @memberof InvoicesApiGetInvoices
     */
    readonly externalInvoiceId?: string

    /**
     * The attribute by which you want to sort the invoices in the response.
     * @type {'START_DATE_TIME'}
     * @memberof InvoicesApiGetInvoices
     */
    readonly sortBy?: 'START_DATE_TIME'
}

/**
 * Request parameters for getInvoicesAttributes operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesAttributesRequest
 */
export interface InvoicesApiGetInvoicesAttributesRequest {
    /**
     * The marketplace identifier.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesAttributes
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getInvoicesDocument operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesDocumentRequest
 */
export interface InvoicesApiGetInvoicesDocumentRequest {
    /**
     * The export document identifier.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesDocument
     */
    readonly invoicesDocumentId: string
}

/**
 * Request parameters for getInvoicesExport operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesExportRequest
 */
export interface InvoicesApiGetInvoicesExportRequest {
    /**
     * The unique identifier for the export.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesExport
     */
    readonly exportId: string
}

/**
 * Request parameters for getInvoicesExports operation in InvoicesApi.
 * @export
 * @interface InvoicesApiGetInvoicesExportsRequest
 */
export interface InvoicesApiGetInvoicesExportsRequest {
    /**
     * The returned exports match the specified marketplace.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly marketplaceId: string

    /**
     * The earliest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 30 days ago.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly dateStart?: string

    /**
     * The response includes &#x60;nextToken&#x60; when the number of results exceeds the specified &#x60;pageSize&#x60; value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until &#x60;nextToken&#x60; is null. Note that this operation can return empty pages.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly nextToken?: string

    /**
     * The maximum number of invoices to return in a single call.  Minimum: 1  Maximum: 100
     * @type {number}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly pageSize?: number

    /**
     * The latest export creation date and time for exports that you want to include in the response. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default value is the time of the request.
     * @type {string}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly dateEnd?: string

    /**
     * Return exports matching the status specified. 
     * @type {'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR'}
     * @memberof InvoicesApiGetInvoicesExports
     */
    readonly status?: 'REQUESTED' | 'PROCESSING' | 'DONE' | 'ERROR'
}

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * Creates an invoice export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiCreateInvoicesExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public createInvoicesExport(requestParameters: InvoicesApiCreateInvoicesExportRequest, options?: any) {
        return InvoicesApiFp(this.configuration).createInvoicesExport(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns invoice data for the specified invoice. This operation returns only a subset of the invoices data; refer to the response definition to get all the possible attributes. To get the full invoice, use the `createInvoicesExport` operation to start an export request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoiceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoice(requestParameters: InvoicesApiGetInvoiceRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoice(requestParameters.marketplaceId, requestParameters.invoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns invoice details for the invoices that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoices(requestParameters: InvoicesApiGetInvoicesRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoices(requestParameters.marketplaceId, requestParameters.transactionIdentifierName, requestParameters.pageSize, requestParameters.dateEnd, requestParameters.transactionType, requestParameters.transactionIdentifierId, requestParameters.dateStart, requestParameters.series, requestParameters.nextToken, requestParameters.sortOrder, requestParameters.invoiceType, requestParameters.statuses, requestParameters.externalInvoiceId, requestParameters.sortBy, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns marketplace-dependent schemas and their respective set of possible values.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoicesAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoicesAttributes(requestParameters: InvoicesApiGetInvoicesAttributesRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoicesAttributes(requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the invoice document\'s ID and URL. Use the URL to download the ZIP file, which contains the invoices from the corresponding `createInvoicesExport` request.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoicesDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoicesDocument(requestParameters: InvoicesApiGetInvoicesDocumentRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoicesDocument(requestParameters.invoicesDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns invoice export details (including the `exportDocumentId`, if available) for the export that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoicesExportRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoicesExport(requestParameters: InvoicesApiGetInvoicesExportRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoicesExport(requestParameters.exportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns invoice exports details for exports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.1 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {InvoicesApiGetInvoicesExportsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public getInvoicesExports(requestParameters: InvoicesApiGetInvoicesExportsRequest, options?: any) {
        return InvoicesApiFp(this.configuration).getInvoicesExports(requestParameters.marketplaceId, requestParameters.dateStart, requestParameters.nextToken, requestParameters.pageSize, requestParameters.dateEnd, requestParameters.status, options).then((request) => request(this.axios, this.basePath));
    }
}


