// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Selling Partner API for Finances
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller\'s business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An adjustment to the seller\'s account.
 * @export
 * @interface AdjustmentEvent
 */
export interface AdjustmentEvent {
    /**
     * The type of adjustment.  Possible values:  * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller\'s account. This occurs if a seller\'s inventory is damaged.  * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller\'s account is held back.  * PostageBilling - The amount paid by a seller for shipping labels.  * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.  * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller\'s account for a package that we lost or damaged.  * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller\'s account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.  * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller\'s account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.  * SellerRewards - An award credited to a seller\'s account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
     * @type {string}
     * @memberof AdjustmentEvent
     */
    adjustmentType?: string;
    /**
     * 
     * @type {Date}
     * @memberof AdjustmentEvent
     */
    postedDate?: Date;
    /**
     * 
     * @type {Currency}
     * @memberof AdjustmentEvent
     */
    adjustmentAmount?: Currency;
    /**
     * A list of information about items in an adjustment to the seller\'s account.
     * @type {Array<AdjustmentItem>}
     * @memberof AdjustmentEvent
     */
    adjustmentItemList?: Array<AdjustmentItem>;
}
/**
 * An item in an adjustment to the seller\'s account.
 * @export
 * @interface AdjustmentItem
 */
export interface AdjustmentItem {
    /**
     * Represents the number of units in the seller\'s inventory when the AdustmentType is FBAInventoryReimbursement.
     * @type {string}
     * @memberof AdjustmentItem
     */
    quantity?: string;
    /**
     * 
     * @type {Currency}
     * @memberof AdjustmentItem
     */
    perUnitAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof AdjustmentItem
     */
    totalAmount?: Currency;
    /**
     * The seller SKU of the item. The seller SKU is qualified by the seller\'s seller ID, which is included with every call to the Selling Partner API.
     * @type {string}
     * @memberof AdjustmentItem
     */
    sellerSKU?: string;
    /**
     * A unique identifier assigned to products stored in and fulfilled from a fulfillment center.
     * @type {string}
     * @memberof AdjustmentItem
     */
    fnSKU?: string;
    /**
     * A short description of the item.
     * @type {string}
     * @memberof AdjustmentItem
     */
    productDescription?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof AdjustmentItem
     */
    ASIN?: string;
}
/**
 * An expense related to an affordability promotion.
 * @export
 * @interface AffordabilityExpenseEvent
 */
export interface AffordabilityExpenseEvent {
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof AffordabilityExpenseEvent
     */
    amazonOrderId?: string;
    /**
     * 
     * @type {Date}
     * @memberof AffordabilityExpenseEvent
     */
    postedDate?: Date;
    /**
     * An encrypted, Amazon-defined marketplace identifier.
     * @type {string}
     * @memberof AffordabilityExpenseEvent
     */
    marketplaceId?: string;
    /**
     * Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
     * @type {string}
     * @memberof AffordabilityExpenseEvent
     */
    transactionType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof AffordabilityExpenseEvent
     */
    baseExpense?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof AffordabilityExpenseEvent
     */
    taxTypeCGST: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof AffordabilityExpenseEvent
     */
    taxTypeSGST: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof AffordabilityExpenseEvent
     */
    taxTypeIGST: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof AffordabilityExpenseEvent
     */
    totalExpense?: Currency;
}
/**
 * A charge on the seller\'s account.  Possible values:  * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.  * Tax - The tax collected by the seller on the Principal.  * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.  * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.  * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.  * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.  * Discount - The promotional discount for an order item.  * TaxDiscount - The tax amount deducted for promotional rebates.  * CODItemCharge - The COD charge for an order item.  * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.  * CODOrderCharge - The COD charge for an order.  * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.  * CODShippingCharge - Shipping charges for a COD order.  * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.  * ShippingCharge - The shipping charge.  * ShippingTax - The tax collected by the seller on a ShippingCharge.  * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.  * Giftwrap - The gift wrap charge.  * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.  * RestockingFee - The charge applied to the buyer when returning a product in certain categories.  * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.  * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.  * GenericDeduction - A generic bad debt deduction.  * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.  * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.  * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.  * SAFE-TReimbursement - The SAFE-T claim amount for the item.  * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).  * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).  * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).  * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
 * @export
 * @interface ChargeComponent
 */
export interface ChargeComponent {
    /**
     * The type of charge.
     * @type {string}
     * @memberof ChargeComponent
     */
    chargeType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof ChargeComponent
     */
    chargeAmount?: Currency;
}
/**
 * A payment instrument.
 * @export
 * @interface ChargeInstrument
 */
export interface ChargeInstrument {
    /**
     * A short description of the charge instrument.
     * @type {string}
     * @memberof ChargeInstrument
     */
    description?: string;
    /**
     * The account tail (trailing digits) of the charge instrument.
     * @type {string}
     * @memberof ChargeInstrument
     */
    tail?: string;
    /**
     * 
     * @type {Currency}
     * @memberof ChargeInstrument
     */
    amount?: Currency;
}
/**
 * An event related to coupon payments.
 * @export
 * @interface CouponPaymentEvent
 */
export interface CouponPaymentEvent {
    /**
     * 
     * @type {Date}
     * @memberof CouponPaymentEvent
     */
    postedDate?: Date;
    /**
     * A coupon identifier.
     * @type {string}
     * @memberof CouponPaymentEvent
     */
    couponId?: string;
    /**
     * The description provided by the seller when they created the coupon.
     * @type {string}
     * @memberof CouponPaymentEvent
     */
    sellerCouponDescription?: string;
    /**
     * The number of coupon clips or redemptions.
     * @type {number}
     * @memberof CouponPaymentEvent
     */
    clipOrRedemptionCount?: number;
    /**
     * A payment event identifier.
     * @type {string}
     * @memberof CouponPaymentEvent
     */
    paymentEventId?: string;
    /**
     * 
     * @type {FeeComponent}
     * @memberof CouponPaymentEvent
     */
    feeComponent?: FeeComponent;
    /**
     * 
     * @type {ChargeComponent}
     * @memberof CouponPaymentEvent
     */
    chargeComponent?: ChargeComponent;
    /**
     * 
     * @type {Currency}
     * @memberof CouponPaymentEvent
     */
    totalAmount?: Currency;
}
/**
 * A currency type and amount.
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * The three-digit currency code in ISO 4217 format.
     * @type {string}
     * @memberof Currency
     */
    currencyCode?: string;
    /**
     * 
     * @type {number}
     * @memberof Currency
     */
    currencyAmount?: number;
}
/**
 * A debt payment or debt adjustment.
 * @export
 * @interface DebtRecoveryEvent
 */
export interface DebtRecoveryEvent {
    /**
     * The debt recovery type.  Possible values:  * DebtPayment  * DebtPaymentFailure  *DebtAdjustment
     * @type {string}
     * @memberof DebtRecoveryEvent
     */
    debtRecoveryType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof DebtRecoveryEvent
     */
    recoveryAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof DebtRecoveryEvent
     */
    overPaymentCredit?: Currency;
    /**
     * A list of debt recovery item information.
     * @type {Array<DebtRecoveryItem>}
     * @memberof DebtRecoveryEvent
     */
    debtRecoveryItemList?: Array<DebtRecoveryItem>;
    /**
     * A list of payment instruments.
     * @type {Array<ChargeInstrument>}
     * @memberof DebtRecoveryEvent
     */
    chargeInstrumentList?: Array<ChargeInstrument>;
}
/**
 * An item of a debt payment or debt adjustment.
 * @export
 * @interface DebtRecoveryItem
 */
export interface DebtRecoveryItem {
    /**
     * 
     * @type {Currency}
     * @memberof DebtRecoveryItem
     */
    recoveryAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof DebtRecoveryItem
     */
    originalAmount?: Currency;
    /**
     * 
     * @type {Date}
     * @memberof DebtRecoveryItem
     */
    groupBeginDate?: Date;
    /**
     * 
     * @type {Date}
     * @memberof DebtRecoveryItem
     */
    groupEndDate?: Date;
}
/**
 * A payment made directly to a seller.
 * @export
 * @interface DirectPayment
 */
export interface DirectPayment {
    /**
     * The type of payment.  Possible values:  * StoredValueCardRevenue - The amount that is deducted from the seller\'s account because the seller received money through a stored value card.  * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.  * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller\'s account because the seller received money through a private label credit card offered by Amazon.  * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.  * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.  * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
     * @type {string}
     * @memberof DirectPayment
     */
    directPaymentType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof DirectPayment
     */
    directPaymentAmount?: Currency;
}
/**
 * A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.
 * @export
 * @interface FBALiquidationEvent
 */
export interface FBALiquidationEvent {
    /**
     * 
     * @type {Date}
     * @memberof FBALiquidationEvent
     */
    postedDate?: Date;
    /**
     * The identifier for the original removal order.
     * @type {string}
     * @memberof FBALiquidationEvent
     */
    originalRemovalOrderId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof FBALiquidationEvent
     */
    liquidationProceedsAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof FBALiquidationEvent
     */
    liquidationFeeAmount?: Currency;
}
/**
 * A fee associated with the event.
 * @export
 * @interface FeeComponent
 */
export interface FeeComponent {
    /**
     * The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central.
     * @type {string}
     * @memberof FeeComponent
     */
    feeType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof FeeComponent
     */
    feeAmount?: Currency;
}
/**
 * Information related to a financial event group.
 * @export
 * @interface FinancialEventGroup
 */
export interface FinancialEventGroup {
    /**
     * A unique identifier for the financial event group.
     * @type {string}
     * @memberof FinancialEventGroup
     */
    financialEventGroupId?: string;
    /**
     * The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
     * @type {string}
     * @memberof FinancialEventGroup
     */
    processingStatus?: string;
    /**
     * The status of the fund transfer.
     * @type {string}
     * @memberof FinancialEventGroup
     */
    fundTransferStatus?: string;
    /**
     * 
     * @type {Currency}
     * @memberof FinancialEventGroup
     */
    originalTotal?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof FinancialEventGroup
     */
    convertedTotal?: Currency;
    /**
     * 
     * @type {Date}
     * @memberof FinancialEventGroup
     */
    fundTransferDate?: Date;
    /**
     * The trace identifier used by sellers to look up transactions externally.
     * @type {string}
     * @memberof FinancialEventGroup
     */
    traceId?: string;
    /**
     * The account tail of the payment instrument.
     * @type {string}
     * @memberof FinancialEventGroup
     */
    accountTail?: string;
    /**
     * 
     * @type {Currency}
     * @memberof FinancialEventGroup
     */
    beginningBalance?: Currency;
    /**
     * 
     * @type {Date}
     * @memberof FinancialEventGroup
     */
    financialEventGroupStart?: Date;
    /**
     * 
     * @type {Date}
     * @memberof FinancialEventGroup
     */
    financialEventGroupEnd?: Date;
}
/**
 * Contains all information related to a financial event.
 * @export
 * @interface FinancialEvents
 */
export interface FinancialEvents {
    /**
     * A list of shipment event information.
     * @type {Array<ShipmentEvent>}
     * @memberof FinancialEvents
     */
    shipmentEventList?: Array<ShipmentEvent>;
    /**
     * A list of shipment event information.
     * @type {Array<ShipmentEvent>}
     * @memberof FinancialEvents
     */
    refundEventList?: Array<ShipmentEvent>;
    /**
     * A list of shipment event information.
     * @type {Array<ShipmentEvent>}
     * @memberof FinancialEvents
     */
    guaranteeClaimEventList?: Array<ShipmentEvent>;
    /**
     * A list of shipment event information.
     * @type {Array<ShipmentEvent>}
     * @memberof FinancialEvents
     */
    chargebackEventList?: Array<ShipmentEvent>;
    /**
     * A list of events related to the seller\'s Pay with Amazon account.
     * @type {Array<PayWithAmazonEvent>}
     * @memberof FinancialEvents
     */
    payWithAmazonEventList?: Array<PayWithAmazonEvent>;
    /**
     * A list of information about solution provider credits.
     * @type {Array<SolutionProviderCreditEvent>}
     * @memberof FinancialEvents
     */
    serviceProviderCreditEventList?: Array<SolutionProviderCreditEvent>;
    /**
     * A list of information about Retrocharge or RetrochargeReversal events.
     * @type {Array<RetrochargeEvent>}
     * @memberof FinancialEvents
     */
    retrochargeEventList?: Array<RetrochargeEvent>;
    /**
     * A list of rental transaction event information.
     * @type {Array<RentalTransactionEvent>}
     * @memberof FinancialEvents
     */
    rentalTransactionEventList?: Array<RentalTransactionEvent>;
    /**
     * A list of sponsored products payment events.
     * @type {Array<ProductAdsPaymentEvent>}
     * @memberof FinancialEvents
     */
    productAdsPaymentEventList?: Array<ProductAdsPaymentEvent>;
    /**
     * A list of information about service fee events.
     * @type {Array<ServiceFeeEvent>}
     * @memberof FinancialEvents
     */
    serviceFeeEventList?: Array<ServiceFeeEvent>;
    /**
     * A list of payment events for deal-related fees.
     * @type {Array<SellerDealPaymentEvent>}
     * @memberof FinancialEvents
     */
    sellerDealPaymentEventList?: Array<SellerDealPaymentEvent>;
    /**
     * A list of debt recovery event information.
     * @type {Array<DebtRecoveryEvent>}
     * @memberof FinancialEvents
     */
    debtRecoveryEventList?: Array<DebtRecoveryEvent>;
    /**
     * A list of loan servicing events.
     * @type {Array<LoanServicingEvent>}
     * @memberof FinancialEvents
     */
    loanServicingEventList?: Array<LoanServicingEvent>;
    /**
     * A list of adjustment event information for the seller\'s account.
     * @type {Array<AdjustmentEvent>}
     * @memberof FinancialEvents
     */
    adjustmentEventList?: Array<AdjustmentEvent>;
    /**
     * A list of SAFETReimbursementEvents.
     * @type {Array<SAFETReimbursementEvent>}
     * @memberof FinancialEvents
     */
    sAFETReimbursementEventList?: Array<SAFETReimbursementEvent>;
    /**
     * A list of information about fee events for the Early Reviewer Program.
     * @type {Array<SellerReviewEnrollmentPaymentEvent>}
     * @memberof FinancialEvents
     */
    sellerReviewEnrollmentPaymentEventList?: Array<SellerReviewEnrollmentPaymentEvent>;
    /**
     * A list of FBA inventory liquidation payment events.
     * @type {Array<FBALiquidationEvent>}
     * @memberof FinancialEvents
     */
    fBALiquidationEventList?: Array<FBALiquidationEvent>;
    /**
     * A list of coupon payment event information.
     * @type {Array<CouponPaymentEvent>}
     * @memberof FinancialEvents
     */
    couponPaymentEventList?: Array<CouponPaymentEvent>;
    /**
     * A list of fee events related to Amazon Imaging services.
     * @type {Array<ImagingServicesFeeEvent>}
     * @memberof FinancialEvents
     */
    imagingServicesFeeEventList?: Array<ImagingServicesFeeEvent>;
    /**
     * A list of network commingling transaction events.
     * @type {Array<NetworkComminglingTransactionEvent>}
     * @memberof FinancialEvents
     */
    networkComminglingTransactionEventList?: Array<NetworkComminglingTransactionEvent>;
    /**
     * A list of expense information related to an affordability promotion.
     * @type {Array<AffordabilityExpenseEvent>}
     * @memberof FinancialEvents
     */
    affordabilityExpenseEventList?: Array<AffordabilityExpenseEvent>;
    /**
     * A list of expense information related to an affordability promotion.
     * @type {Array<AffordabilityExpenseEvent>}
     * @memberof FinancialEvents
     */
    affordabilityExpenseReversalEventList?: Array<AffordabilityExpenseEvent>;
}
/**
 * A fee event related to Amazon Imaging services.
 * @export
 * @interface ImagingServicesFeeEvent
 */
export interface ImagingServicesFeeEvent {
    /**
     * The identifier for the imaging services request.
     * @type {string}
     * @memberof ImagingServicesFeeEvent
     */
    imagingRequestBillingItemID?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
     * @type {string}
     * @memberof ImagingServicesFeeEvent
     */
    ASIN?: string;
    /**
     * 
     * @type {Date}
     * @memberof ImagingServicesFeeEvent
     */
    postedDate?: Date;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ImagingServicesFeeEvent
     */
    feeList?: Array<FeeComponent>;
}
/**
 * The payload for the listFinancialEventGroups operation.
 * @export
 * @interface ListFinancialEventGroupsPayload
 */
export interface ListFinancialEventGroupsPayload {
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof ListFinancialEventGroupsPayload
     */
    nextToken?: string;
    /**
     * A list of financial event group information.
     * @type {Array<FinancialEventGroup>}
     * @memberof ListFinancialEventGroupsPayload
     */
    financialEventGroupList?: Array<FinancialEventGroup>;
}
/**
 * The response schema for the listFinancialEventGroups operation.
 * @export
 * @interface ListFinancialEventGroupsResponse
 */
export interface ListFinancialEventGroupsResponse {
    /**
     * 
     * @type {ListFinancialEventGroupsPayload}
     * @memberof ListFinancialEventGroupsResponse
     */
    payload?: ListFinancialEventGroupsPayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListFinancialEventGroupsResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the listFinancialEvents operation.
 * @export
 * @interface ListFinancialEventsPayload
 */
export interface ListFinancialEventsPayload {
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof ListFinancialEventsPayload
     */
    nextToken?: string;
    /**
     * 
     * @type {FinancialEvents}
     * @memberof ListFinancialEventsPayload
     */
    financialEvents?: FinancialEvents;
}
/**
 * The response schema for the listFinancialEvents operation.
 * @export
 * @interface ListFinancialEventsResponse
 */
export interface ListFinancialEventsResponse {
    /**
     * 
     * @type {ListFinancialEventsPayload}
     * @memberof ListFinancialEventsResponse
     */
    payload?: ListFinancialEventsPayload;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListFinancialEventsResponse
     */
    errors?: Array<Error>;
}
/**
 * A loan advance, loan payment, or loan refund.
 * @export
 * @interface LoanServicingEvent
 */
export interface LoanServicingEvent {
    /**
     * 
     * @type {Currency}
     * @memberof LoanServicingEvent
     */
    loanAmount?: Currency;
    /**
     * The type of event.  Possible values:  * LoanAdvance  * LoanPayment  * LoanRefund
     * @type {string}
     * @memberof LoanServicingEvent
     */
    sourceBusinessEventType?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * A network commingling transaction event.
 * @export
 * @interface NetworkComminglingTransactionEvent
 */
export interface NetworkComminglingTransactionEvent {
    /**
     * The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
     * @type {string}
     * @memberof NetworkComminglingTransactionEvent
     */
    transactionType?: string;
    /**
     * 
     * @type {Date}
     * @memberof NetworkComminglingTransactionEvent
     */
    postedDate?: Date;
    /**
     * The identifier for the network item swap.
     * @type {string}
     * @memberof NetworkComminglingTransactionEvent
     */
    netCoTransactionID?: string;
    /**
     * The reason for the network item swap.
     * @type {string}
     * @memberof NetworkComminglingTransactionEvent
     */
    swapReason?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the swapped item.
     * @type {string}
     * @memberof NetworkComminglingTransactionEvent
     */
    ASIN?: string;
    /**
     * The marketplace in which the event took place.
     * @type {string}
     * @memberof NetworkComminglingTransactionEvent
     */
    marketplaceId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof NetworkComminglingTransactionEvent
     */
    taxExclusiveAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof NetworkComminglingTransactionEvent
     */
    taxAmount?: Currency;
}
/**
 * An event related to the seller\'s Pay with Amazon account.
 * @export
 * @interface PayWithAmazonEvent
 */
export interface PayWithAmazonEvent {
    /**
     * An order identifier that is specified by the seller.
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    sellerOrderId?: string;
    /**
     * 
     * @type {Date}
     * @memberof PayWithAmazonEvent
     */
    transactionPostedDate?: Date;
    /**
     * The type of business object.
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    businessObjectType?: string;
    /**
     * The sales channel for the transaction.
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    salesChannel?: string;
    /**
     * 
     * @type {ChargeComponent}
     * @memberof PayWithAmazonEvent
     */
    charge?: ChargeComponent;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof PayWithAmazonEvent
     */
    feeList?: Array<FeeComponent>;
    /**
     * The type of payment.  Possible values:  * Sales
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    paymentAmountType?: string;
    /**
     * A short description of this payment event.
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    amountDescription?: string;
    /**
     * The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    fulfillmentChannel?: string;
    /**
     * The store name where the event occurred.
     * @type {string}
     * @memberof PayWithAmazonEvent
     */
    storeName?: string;
}
/**
 * A Sponsored Products payment event.
 * @export
 * @interface ProductAdsPaymentEvent
 */
export interface ProductAdsPaymentEvent {
    /**
     * 
     * @type {Date}
     * @memberof ProductAdsPaymentEvent
     */
    postedDate?: Date;
    /**
     * Indicates if the transaction is for a charge or a refund.  Possible values:  * charge - Charge  * refund - Refund
     * @type {string}
     * @memberof ProductAdsPaymentEvent
     */
    transactionType?: string;
    /**
     * Identifier for the invoice that the transaction appears in.
     * @type {string}
     * @memberof ProductAdsPaymentEvent
     */
    invoiceId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof ProductAdsPaymentEvent
     */
    baseValue?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof ProductAdsPaymentEvent
     */
    taxValue?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof ProductAdsPaymentEvent
     */
    transactionValue?: Currency;
}
/**
 * A promotion applied to an item.
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * The type of promotion.
     * @type {string}
     * @memberof Promotion
     */
    promotionType?: string;
    /**
     * The seller-specified identifier for the promotion.
     * @type {string}
     * @memberof Promotion
     */
    promotionId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof Promotion
     */
    promotionAmount?: Currency;
}
/**
 * A removal shipment event for a removal order.
 * @export
 * @interface RemovalShipmentEvent
 */
export interface RemovalShipmentEvent {
    /**
     * 
     * @type {Date}
     * @memberof RemovalShipmentEvent
     */
    postedDate?: Date;
    /**
     * The identifier for the removal shipment order.
     * @type {string}
     * @memberof RemovalShipmentEvent
     */
    orderId?: string;
    /**
     * The type of removal order.  Possible values:  * WHOLESALE_LIQUIDATION
     * @type {string}
     * @memberof RemovalShipmentEvent
     */
    transactionType?: string;
    /**
     * A list of information about removal shipment items.
     * @type {Array<RemovalShipmentItem>}
     * @memberof RemovalShipmentEvent
     */
    removalShipmentItemList?: Array<RemovalShipmentItem>;
}
/**
 * Item-level information for a removal shipment.
 * @export
 * @interface RemovalShipmentItem
 */
export interface RemovalShipmentItem {
    /**
     * An identifier for an item in a removal shipment.
     * @type {string}
     * @memberof RemovalShipmentItem
     */
    removalShipmentItemId?: string;
    /**
     * The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
     * @type {string}
     * @memberof RemovalShipmentItem
     */
    taxCollectionModel?: string;
    /**
     * The Amazon fulfillment network SKU for the item.
     * @type {string}
     * @memberof RemovalShipmentItem
     */
    fulfillmentNetworkSKU?: string;
    /**
     * The quantity of the item.
     * @type {number}
     * @memberof RemovalShipmentItem
     */
    quantity?: number;
    /**
     * 
     * @type {Currency}
     * @memberof RemovalShipmentItem
     */
    revenue?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof RemovalShipmentItem
     */
    feeAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof RemovalShipmentItem
     */
    taxAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof RemovalShipmentItem
     */
    taxWithheld?: Currency;
}
/**
 * An event related to a rental transaction.
 * @export
 * @interface RentalTransactionEvent
 */
export interface RentalTransactionEvent {
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof RentalTransactionEvent
     */
    amazonOrderId?: string;
    /**
     * The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
     * @type {string}
     * @memberof RentalTransactionEvent
     */
    rentalEventType?: string;
    /**
     * The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
     * @type {number}
     * @memberof RentalTransactionEvent
     */
    extensionLength?: number;
    /**
     * 
     * @type {Date}
     * @memberof RentalTransactionEvent
     */
    postedDate?: Date;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof RentalTransactionEvent
     */
    rentalChargeList?: Array<ChargeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof RentalTransactionEvent
     */
    rentalFeeList?: Array<FeeComponent>;
    /**
     * The name of the marketplace.
     * @type {string}
     * @memberof RentalTransactionEvent
     */
    marketplaceName?: string;
    /**
     * 
     * @type {Currency}
     * @memberof RentalTransactionEvent
     */
    rentalInitialValue?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof RentalTransactionEvent
     */
    rentalReimbursement?: Currency;
    /**
     * A list of information about taxes withheld.
     * @type {Array<TaxWithheldComponent>}
     * @memberof RentalTransactionEvent
     */
    rentalTaxWithheldList?: Array<TaxWithheldComponent>;
}
/**
 * A retrocharge or retrocharge reversal.
 * @export
 * @interface RetrochargeEvent
 */
export interface RetrochargeEvent {
    /**
     * The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal
     * @type {string}
     * @memberof RetrochargeEvent
     */
    retrochargeEventType?: string;
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof RetrochargeEvent
     */
    amazonOrderId?: string;
    /**
     * 
     * @type {Date}
     * @memberof RetrochargeEvent
     */
    postedDate?: Date;
    /**
     * 
     * @type {Currency}
     * @memberof RetrochargeEvent
     */
    baseTax?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof RetrochargeEvent
     */
    shippingTax?: Currency;
    /**
     * The name of the marketplace where the retrocharge event occurred.
     * @type {string}
     * @memberof RetrochargeEvent
     */
    marketplaceName?: string;
    /**
     * A list of information about taxes withheld.
     * @type {Array<TaxWithheldComponent>}
     * @memberof RetrochargeEvent
     */
    retrochargeTaxWithheldList?: Array<TaxWithheldComponent>;
}
/**
 * A SAFE-T claim reimbursement on the seller\'s account.
 * @export
 * @interface SAFETReimbursementEvent
 */
export interface SAFETReimbursementEvent {
    /**
     * 
     * @type {Date}
     * @memberof SAFETReimbursementEvent
     */
    postedDate?: Date;
    /**
     * A SAFE-T claim identifier.
     * @type {string}
     * @memberof SAFETReimbursementEvent
     */
    sAFETClaimId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof SAFETReimbursementEvent
     */
    reimbursedAmount?: Currency;
    /**
     * Indicates why the seller was reimbursed.
     * @type {string}
     * @memberof SAFETReimbursementEvent
     */
    reasonCode?: string;
    /**
     * A list of SAFETReimbursementItems.
     * @type {Array<SAFETReimbursementItem>}
     * @memberof SAFETReimbursementEvent
     */
    sAFETReimbursementItemList?: Array<SAFETReimbursementItem>;
}
/**
 * An item from a SAFE-T claim reimbursement.
 * @export
 * @interface SAFETReimbursementItem
 */
export interface SAFETReimbursementItem {
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof SAFETReimbursementItem
     */
    itemChargeList?: Array<ChargeComponent>;
    /**
     * The description of the item as shown on the product detail page on the retail website.
     * @type {string}
     * @memberof SAFETReimbursementItem
     */
    productDescription?: string;
    /**
     * The number of units of the item being reimbursed.
     * @type {string}
     * @memberof SAFETReimbursementItem
     */
    quantity?: string;
}
/**
 * An event linked to the payment of a fee related to the specified deal.
 * @export
 * @interface SellerDealPaymentEvent
 */
export interface SellerDealPaymentEvent {
    /**
     * 
     * @type {Date}
     * @memberof SellerDealPaymentEvent
     */
    postedDate?: Date;
    /**
     * The unique identifier of the deal.
     * @type {string}
     * @memberof SellerDealPaymentEvent
     */
    dealId?: string;
    /**
     * The internal description of the deal.
     * @type {string}
     * @memberof SellerDealPaymentEvent
     */
    dealDescription?: string;
    /**
     * The type of event: SellerDealComplete.
     * @type {string}
     * @memberof SellerDealPaymentEvent
     */
    eventType?: string;
    /**
     * The type of fee: RunLightningDealFee.
     * @type {string}
     * @memberof SellerDealPaymentEvent
     */
    feeType?: string;
    /**
     * 
     * @type {Currency}
     * @memberof SellerDealPaymentEvent
     */
    feeAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof SellerDealPaymentEvent
     */
    taxAmount?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof SellerDealPaymentEvent
     */
    totalAmount?: Currency;
}
/**
 * A fee payment event for the Early Reviewer Program.
 * @export
 * @interface SellerReviewEnrollmentPaymentEvent
 */
export interface SellerReviewEnrollmentPaymentEvent {
    /**
     * 
     * @type {Date}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    postedDate?: Date;
    /**
     * An enrollment identifier.
     * @type {string}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    enrollmentId?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.
     * @type {string}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    parentASIN?: string;
    /**
     * 
     * @type {FeeComponent}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    feeComponent?: FeeComponent;
    /**
     * 
     * @type {ChargeComponent}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    chargeComponent?: ChargeComponent;
    /**
     * 
     * @type {Currency}
     * @memberof SellerReviewEnrollmentPaymentEvent
     */
    totalAmount?: Currency;
}
/**
 * A service fee on the seller\'s account.
 * @export
 * @interface ServiceFeeEvent
 */
export interface ServiceFeeEvent {
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    amazonOrderId?: string;
    /**
     * A short description of the service fee reason.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    feeReason?: string;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ServiceFeeEvent
     */
    feeList?: Array<FeeComponent>;
    /**
     * The seller SKU of the item. The seller SKU is qualified by the seller\'s seller ID, which is included with every call to the Selling Partner API.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    sellerSKU?: string;
    /**
     * A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    fnSKU?: string;
    /**
     * A short description of the service fee event.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    feeDescription?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ServiceFeeEvent
     */
    ASIN?: string;
}
/**
 * A shipment, refund, guarantee claim, or chargeback.
 * @export
 * @interface ShipmentEvent
 */
export interface ShipmentEvent {
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof ShipmentEvent
     */
    amazonOrderId?: string;
    /**
     * A seller-defined identifier for an order.
     * @type {string}
     * @memberof ShipmentEvent
     */
    sellerOrderId?: string;
    /**
     * The name of the marketplace where the event occurred.
     * @type {string}
     * @memberof ShipmentEvent
     */
    marketplaceName?: string;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof ShipmentEvent
     */
    orderChargeList?: Array<ChargeComponent>;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof ShipmentEvent
     */
    orderChargeAdjustmentList?: Array<ChargeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentEvent
     */
    shipmentFeeList?: Array<FeeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentEvent
     */
    shipmentFeeAdjustmentList?: Array<FeeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentEvent
     */
    orderFeeList?: Array<FeeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentEvent
     */
    orderFeeAdjustmentList?: Array<FeeComponent>;
    /**
     * A list of direct payment information.
     * @type {Array<DirectPayment>}
     * @memberof ShipmentEvent
     */
    directPaymentList?: Array<DirectPayment>;
    /**
     * 
     * @type {Date}
     * @memberof ShipmentEvent
     */
    postedDate?: Date;
    /**
     * A list of shipment items.
     * @type {Array<ShipmentItem>}
     * @memberof ShipmentEvent
     */
    shipmentItemList?: Array<ShipmentItem>;
    /**
     * A list of shipment items.
     * @type {Array<ShipmentItem>}
     * @memberof ShipmentEvent
     */
    shipmentItemAdjustmentList?: Array<ShipmentItem>;
}
/**
 * An item of a shipment, refund, guarantee claim, or chargeback.
 * @export
 * @interface ShipmentItem
 */
export interface ShipmentItem {
    /**
     * The seller SKU of the item. The seller SKU is qualified by the seller\'s seller ID, which is included with every call to the Selling Partner API.
     * @type {string}
     * @memberof ShipmentItem
     */
    sellerSKU?: string;
    /**
     * An Amazon-defined order item identifier.
     * @type {string}
     * @memberof ShipmentItem
     */
    orderItemId?: string;
    /**
     * An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.
     * @type {string}
     * @memberof ShipmentItem
     */
    orderAdjustmentItemId?: string;
    /**
     * The number of items shipped.
     * @type {number}
     * @memberof ShipmentItem
     */
    quantityShipped?: number;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof ShipmentItem
     */
    itemChargeList?: Array<ChargeComponent>;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof ShipmentItem
     */
    itemChargeAdjustmentList?: Array<ChargeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentItem
     */
    itemFeeList?: Array<FeeComponent>;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof ShipmentItem
     */
    itemFeeAdjustmentList?: Array<FeeComponent>;
    /**
     * A list of information about taxes withheld.
     * @type {Array<TaxWithheldComponent>}
     * @memberof ShipmentItem
     */
    itemTaxWithheldList?: Array<TaxWithheldComponent>;
    /**
     * A list of promotions.
     * @type {Array<Promotion>}
     * @memberof ShipmentItem
     */
    promotionList?: Array<Promotion>;
    /**
     * A list of promotions.
     * @type {Array<Promotion>}
     * @memberof ShipmentItem
     */
    promotionAdjustmentList?: Array<Promotion>;
    /**
     * 
     * @type {Currency}
     * @memberof ShipmentItem
     */
    costOfPointsGranted?: Currency;
    /**
     * 
     * @type {Currency}
     * @memberof ShipmentItem
     */
    costOfPointsReturned?: Currency;
}
/**
 * A credit given to a solution provider.
 * @export
 * @interface SolutionProviderCreditEvent
 */
export interface SolutionProviderCreditEvent {
    /**
     * The transaction type.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    providerTransactionType?: string;
    /**
     * A seller-defined identifier for an order.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    sellerOrderId?: string;
    /**
     * The identifier of the marketplace where the order was placed.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    marketplaceId?: string;
    /**
     * The two-letter country code of the country associated with the marketplace where the order was placed.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    marketplaceCountryCode?: string;
    /**
     * The Amazon-defined identifier of the seller.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    sellerId?: string;
    /**
     * The store name where the payment event occurred.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    sellerStoreName?: string;
    /**
     * The Amazon-defined identifier of the solution provider.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    providerId?: string;
    /**
     * The store name where the payment event occurred.
     * @type {string}
     * @memberof SolutionProviderCreditEvent
     */
    providerStoreName?: string;
    /**
     * 
     * @type {Currency}
     * @memberof SolutionProviderCreditEvent
     */
    transactionAmount?: Currency;
    /**
     * 
     * @type {Date}
     * @memberof SolutionProviderCreditEvent
     */
    transactionCreationDate?: Date;
}
/**
 * A tax deduction at source (TDS) claim reimbursement event on the seller\'s account.
 * @export
 * @interface TDSReimbursementEvent
 */
export interface TDSReimbursementEvent {
    /**
     * 
     * @type {Date}
     * @memberof TDSReimbursementEvent
     */
    postedDate?: Date;
    /**
     * A tax deduction at source (TDS) claim identifier.
     * @type {string}
     * @memberof TDSReimbursementEvent
     */
    tdsOrderId?: string;
    /**
     * 
     * @type {Currency}
     * @memberof TDSReimbursementEvent
     */
    reimbursedAmount?: Currency;
}
/**
 * Information about the taxes withheld.
 * @export
 * @interface TaxWithheldComponent
 */
export interface TaxWithheldComponent {
    /**
     * The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
     * @type {string}
     * @memberof TaxWithheldComponent
     */
    taxCollectionModel?: string;
    /**
     * A list of charge information on the seller\'s account.
     * @type {Array<ChargeComponent>}
     * @memberof TaxWithheldComponent
     */
    taxesWithheld?: Array<ChargeComponent>;
}
/**
 * An event related to a trial shipment.
 * @export
 * @interface TrialShipmentEvent
 */
export interface TrialShipmentEvent {
    /**
     * An Amazon-defined identifier for an order.
     * @type {string}
     * @memberof TrialShipmentEvent
     */
    amazonOrderId?: string;
    /**
     * The identifier of the financial event group.
     * @type {string}
     * @memberof TrialShipmentEvent
     */
    financialEventGroupId?: string;
    /**
     * 
     * @type {Date}
     * @memberof TrialShipmentEvent
     */
    postedDate?: Date;
    /**
     * The seller SKU of the item. The seller SKU is qualified by the seller\'s seller ID, which is included with every call to the Selling Partner API.
     * @type {string}
     * @memberof TrialShipmentEvent
     */
    SKU?: string;
    /**
     * A list of fee component information.
     * @type {Array<FeeComponent>}
     * @memberof TrialShipmentEvent
     */
    feeList?: Array<FeeComponent>;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [financialEventGroupStartedBefore] A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.
         * @param {Date} [financialEventGroupStartedAfter] A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventGroups(maxResultsPerPage?: number, financialEventGroupStartedBefore?: Date, financialEventGroupStartedAfter?: Date, nextToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/finances/v0/financialEventGroups`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (financialEventGroupStartedBefore !== undefined) {
                localVarQueryParameter['FinancialEventGroupStartedBefore'] = (financialEventGroupStartedBefore as any).toISOString();
            }

            if (financialEventGroupStartedAfter !== undefined) {
                localVarQueryParameter['FinancialEventGroupStartedAfter'] = (financialEventGroupStartedAfter as any).toISOString();
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [postedAfter] A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
         * @param {Date} [postedBefore] A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEvents(maxResultsPerPage?: number, postedAfter?: Date, postedBefore?: Date, nextToken?: string, options: any = {}): RequestArgs {
            const localVarPath = `/finances/v0/financialEvents`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (postedAfter !== undefined) {
                localVarQueryParameter['PostedAfter'] = (postedAfter as any).toISOString();
            }

            if (postedBefore !== undefined) {
                localVarQueryParameter['PostedBefore'] = (postedBefore as any).toISOString();
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} eventGroupId The identifier of the financial event group to which the events belong.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByGroupId(eventGroupId: string, maxResultsPerPage?: number, nextToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'eventGroupId' is not null or undefined
            if (eventGroupId === null || eventGroupId === undefined) {
                throw new RequiredError('eventGroupId','Required parameter eventGroupId was null or undefined when calling listFinancialEventsByGroupId.');
            }
            const localVarPath = `/finances/v0/financialEventGroups/{eventGroupId}/financialEvents`
                .replace(`{${"eventGroupId"}}`, encodeURIComponent(String(eventGroupId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByOrderId(orderId: string, maxResultsPerPage?: number, nextToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling listFinancialEventsByOrderId.');
            }
            const localVarPath = `/finances/v0/orders/{orderId}/financialEvents`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [financialEventGroupStartedBefore] A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.
         * @param {Date} [financialEventGroupStartedAfter] A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventGroups(maxResultsPerPage?: number, financialEventGroupStartedBefore?: Date, financialEventGroupStartedAfter?: Date, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFinancialEventGroupsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listFinancialEventGroups(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [postedAfter] A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
         * @param {Date} [postedBefore] A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEvents(maxResultsPerPage?: number, postedAfter?: Date, postedBefore?: Date, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFinancialEventsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listFinancialEvents(maxResultsPerPage, postedAfter, postedBefore, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} eventGroupId The identifier of the financial event group to which the events belong.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByGroupId(eventGroupId: string, maxResultsPerPage?: number, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFinancialEventsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listFinancialEventsByGroupId(eventGroupId, maxResultsPerPage, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByOrderId(orderId: string, maxResultsPerPage?: number, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListFinancialEventsResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listFinancialEventsByOrderId(orderId, maxResultsPerPage, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [financialEventGroupStartedBefore] A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.
         * @param {Date} [financialEventGroupStartedAfter] A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventGroups(maxResultsPerPage?: number, financialEventGroupStartedBefore?: Date, financialEventGroupStartedAfter?: Date, nextToken?: string, options?: any) {
            return DefaultApiFp(configuration).listFinancialEventGroups(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken, options)(axios, basePath);
        },
        /**
         * Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {Date} [postedAfter] A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
         * @param {Date} [postedBefore] A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEvents(maxResultsPerPage?: number, postedAfter?: Date, postedBefore?: Date, nextToken?: string, options?: any) {
            return DefaultApiFp(configuration).listFinancialEvents(maxResultsPerPage, postedAfter, postedBefore, nextToken, options)(axios, basePath);
        },
        /**
         * Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} eventGroupId The identifier of the financial event group to which the events belong.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByGroupId(eventGroupId: string, maxResultsPerPage?: number, nextToken?: string, options?: any) {
            return DefaultApiFp(configuration).listFinancialEventsByGroupId(eventGroupId, maxResultsPerPage, nextToken, options)(axios, basePath);
        },
        /**
         * Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listFinancialEventsByOrderId(orderId: string, maxResultsPerPage?: number, nextToken?: string, options?: any) {
            return DefaultApiFp(configuration).listFinancialEventsByOrderId(orderId, maxResultsPerPage, nextToken, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Returns financial event groups for a given date range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
     * @param {Date} [financialEventGroupStartedBefore] A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned.
     * @param {Date} [financialEventGroupStartedAfter] A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFinancialEventGroups(maxResultsPerPage?: number, financialEventGroupStartedBefore?: Date, financialEventGroupStartedAfter?: Date, nextToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).listFinancialEventGroups(maxResultsPerPage, financialEventGroupStartedBefore, financialEventGroupStartedAfter, nextToken, options)(this.axios, this.basePath);
    }

    /**
     * Returns financial events for the specified data range.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
     * @param {Date} [postedAfter] A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.
     * @param {Date} [postedBefore] A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFinancialEvents(maxResultsPerPage?: number, postedAfter?: Date, postedBefore?: Date, nextToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).listFinancialEvents(maxResultsPerPage, postedAfter, postedBefore, nextToken, options)(this.axios, this.basePath);
    }

    /**
     * Returns all financial events for the specified financial event group.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} eventGroupId The identifier of the financial event group to which the events belong.
     * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFinancialEventsByGroupId(eventGroupId: string, maxResultsPerPage?: number, nextToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).listFinancialEventsByGroupId(eventGroupId, maxResultsPerPage, nextToken, options)(this.axios, this.basePath);
    }

    /**
     * Returns all financial events for the specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
     * @param {number} [maxResultsPerPage] The maximum number of results to return per page.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listFinancialEventsByOrderId(orderId: string, maxResultsPerPage?: number, nextToken?: string, options?: any) {
        return DefaultApiFp(this.configuration).listFinancialEventsByOrderId(orderId, maxResultsPerPage, nextToken, options)(this.axios, this.basePath);
    }

}


