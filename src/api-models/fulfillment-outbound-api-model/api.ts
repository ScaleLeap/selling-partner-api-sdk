/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner APIs for Fulfillment Outbound
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon\'s fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * The version of the OpenAPI document: 2020-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Additional location information.
 * @export
 * @enum {string}
 */
export enum AdditionalLocationInfo {
    AsInstructed = 'AS_INSTRUCTED',
    Carport = 'CARPORT',
    CustomerPickup = 'CUSTOMER_PICKUP',
    Deck = 'DECK',
    DoorPerson = 'DOOR_PERSON',
    FrontDesk = 'FRONT_DESK',
    FrontDoor = 'FRONT_DOOR',
    Garage = 'GARAGE',
    Guard = 'GUARD',
    MailRoom = 'MAIL_ROOM',
    MailSlot = 'MAIL_SLOT',
    Mailbox = 'MAILBOX',
    McBoy = 'MC_BOY',
    McGirl = 'MC_GIRL',
    McMan = 'MC_MAN',
    McWoman = 'MC_WOMAN',
    Neighbor = 'NEIGHBOR',
    Office = 'OFFICE',
    Outbuilding = 'OUTBUILDING',
    Patio = 'PATIO',
    Porch = 'PORCH',
    RearDoor = 'REAR_DOOR',
    Receptionist = 'RECEPTIONIST',
    Receiver = 'RECEIVER',
    SecureLocation = 'SECURE_LOCATION',
    SideDoor = 'SIDE_DOOR'
}

/**
 * A physical address.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at the address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The first line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business, or institution is located. This property is required in all countries except Japan. It should not be used in Japan.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The district or county where the person, business, or institution is located.
     * @type {string}
     * @memberof Address
     */
    districtOrCounty?: string;
    /**
     * The state or region where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion: string;
    /**
     * The postal code of the address.
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business, or institution located at the address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * A quantity based on unit of measure.
 * @export
 * @interface Amount
 */
export interface Amount {
    /**
     * The unit of measure for the amount.
     * @type {string}
     * @memberof Amount
     */
    unitOfMeasure: AmountUnitOfMeasureEnum | 'Eaches';
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
     * @type {string}
     * @memberof Amount
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum AmountUnitOfMeasureEnum {
    Eaches = 'Eaches'
}

/**
 * The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
 * @export
 * @interface CODSettings
 */
export interface CODSettings {
    /**
     * When true, this fulfillment order requires a COD (Cash On Delivery) payment.
     * @type {boolean}
     * @memberof CODSettings
     */
    isCodRequired: boolean;
    /**
     * 
     * @type {Money}
     * @memberof CODSettings
     */
    codCharge?: Money;
    /**
     * 
     * @type {Money}
     * @memberof CODSettings
     */
    codChargeTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof CODSettings
     */
    shippingCharge?: Money;
    /**
     * 
     * @type {Money}
     * @memberof CODSettings
     */
    shippingChargeTax?: Money;
}
/**
 * The response schema for the `cancelFulfillmentOrder` operation.
 * @export
 * @interface CancelFulfillmentOrderResponse
 */
export interface CancelFulfillmentOrderResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelFulfillmentOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * Item information for creating a fulfillment order.
 * @export
 * @interface CreateFulfillmentOrderItem
 */
export interface CreateFulfillmentOrderItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof CreateFulfillmentOrderItem
     */
    sellerSku: string;
    /**
     * A fulfillment order item identifier that the seller creates to track fulfillment order items. Used to disambiguate multiple fulfillment items that have the same `SellerSKU`. For example, the seller might assign different `SellerFulfillmentOrderItemId` values to two items in a fulfillment order that share the same `SellerSKU` but have different `GiftMessage` values.
     * @type {string}
     * @memberof CreateFulfillmentOrderItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof CreateFulfillmentOrderItem
     */
    quantity: number;
    /**
     * A message to the gift recipient, if applicable.
     * @type {string}
     * @memberof CreateFulfillmentOrderItem
     */
    giftMessage?: string;
    /**
     * Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
     * @type {string}
     * @memberof CreateFulfillmentOrderItem
     */
    displayableComment?: string;
    /**
     * Amazon\'s fulfillment network SKU of the item.
     * @type {string}
     * @memberof CreateFulfillmentOrderItem
     */
    fulfillmentNetworkSku?: string;
    /**
     * 
     * @type {Money}
     * @memberof CreateFulfillmentOrderItem
     */
    perUnitDeclaredValue?: Money;
    /**
     * 
     * @type {Money}
     * @memberof CreateFulfillmentOrderItem
     */
    perUnitPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof CreateFulfillmentOrderItem
     */
    perUnitTax?: Money;
}
/**
 * The request body schema for the `createFulfillmentOrder` operation.
 * @export
 * @interface CreateFulfillmentOrderRequest
 */
export interface CreateFulfillmentOrderRequest {
    /**
     * The marketplace the fulfillment order is placed against.
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    marketplaceId?: string;
    /**
     * A fulfillment order identifier that the seller creates to track their fulfillment order. The `SellerFulfillmentOrderId` must be unique for each fulfillment order that a seller creates. If the seller\'s system already creates unique order identifiers, then these might be good values for them to use.
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    sellerFulfillmentOrderId: string;
    /**
     * A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of `DisplayableOrderId` should match the order identifier that the seller provides to the recipient. The seller can use the `SellerFulfillmentOrderId` for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.  The value must be an alpha-numeric or ISO 8859-1 compliant string from one to 40 characters in length. Cannot contain two spaces in a row. Leading and trailing white space is removed.
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    displayableOrderId: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    displayableOrderDate: string;
    /**
     * Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    displayableOrderComment: string;
    /**
     * 
     * @type {ShippingSpeedCategory}
     * @memberof CreateFulfillmentOrderRequest
     */
    shippingSpeedCategory: ShippingSpeedCategory | 'Standard' | 'Expedited' | 'Priority' | 'ScheduledDelivery';
    /**
     * 
     * @type {DeliveryWindow}
     * @memberof CreateFulfillmentOrderRequest
     */
    deliveryWindow?: DeliveryWindow;
    /**
     * 
     * @type {Address}
     * @memberof CreateFulfillmentOrderRequest
     */
    destinationAddress: Address;
    /**
     * 
     * @type {DeliveryPreferences}
     * @memberof CreateFulfillmentOrderRequest
     */
    deliveryPreferences?: DeliveryPreferences;
    /**
     * 
     * @type {FulfillmentAction}
     * @memberof CreateFulfillmentOrderRequest
     */
    fulfillmentAction?: FulfillmentAction | 'Ship' | 'Hold';
    /**
     * 
     * @type {FulfillmentPolicy}
     * @memberof CreateFulfillmentOrderRequest
     */
    fulfillmentPolicy?: FulfillmentPolicy | 'FillOrKill' | 'FillAll' | 'FillAllAvailable';
    /**
     * 
     * @type {CODSettings}
     * @memberof CreateFulfillmentOrderRequest
     */
    codSettings?: CODSettings;
    /**
     * The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof CreateFulfillmentOrderRequest
     */
    shipFromCountryCode?: string;
    /**
     * A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
     * @type {Array<string>}
     * @memberof CreateFulfillmentOrderRequest
     */
    notificationEmails?: Array<string>;
    /**
     * A list of features and their fulfillment policies to apply to the order.
     * @type {Array<FeatureSettings>}
     * @memberof CreateFulfillmentOrderRequest
     */
    featureConstraints?: Array<FeatureSettings>;
    /**
     * An array of item information for creating a fulfillment order.
     * @type {Array<CreateFulfillmentOrderItem>}
     * @memberof CreateFulfillmentOrderRequest
     */
    items: Array<CreateFulfillmentOrderItem>;
    /**
     * An array of various payment attributes related to this fulfillment order.
     * @type {Array<PaymentInformation>}
     * @memberof CreateFulfillmentOrderRequest
     */
    paymentInformation?: Array<PaymentInformation>;
}
/**
 * The response schema for the `createFulfillmentOrder` operation.
 * @export
 * @interface CreateFulfillmentOrderResponse
 */
export interface CreateFulfillmentOrderResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateFulfillmentOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The `createFulfillmentReturn` operation creates a fulfillment return for items that were fulfilled using the `createFulfillmentOrder` operation. For calls to `createFulfillmentReturn`, you must include `ReturnReasonCode` values returned by a previous call to the `listReturnReasonCodes` operation.
 * @export
 * @interface CreateFulfillmentReturnRequest
 */
export interface CreateFulfillmentReturnRequest {
    /**
     * An array of items to be returned.
     * @type {Array<CreateReturnItem>}
     * @memberof CreateFulfillmentReturnRequest
     */
    items: Array<CreateReturnItem>;
}
/**
 * The response schema for the `createFulfillmentReturn` operation.
 * @export
 * @interface CreateFulfillmentReturnResponse
 */
export interface CreateFulfillmentReturnResponse {
    /**
     * 
     * @type {CreateFulfillmentReturnResult}
     * @memberof CreateFulfillmentReturnResponse
     */
    payload?: CreateFulfillmentReturnResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateFulfillmentReturnResponse
     */
    errors?: Array<Error>;
}
/**
 * The result for the createFulfillmentReturn operation.
 * @export
 * @interface CreateFulfillmentReturnResult
 */
export interface CreateFulfillmentReturnResult {
    /**
     * An array of items that Amazon accepted for return. Returns empty if no items were accepted for return.
     * @type {Array<ReturnItem>}
     * @memberof CreateFulfillmentReturnResult
     */
    returnItems?: Array<ReturnItem>;
    /**
     * An array of invalid return item information.
     * @type {Array<InvalidReturnItem>}
     * @memberof CreateFulfillmentReturnResult
     */
    invalidReturnItems?: Array<InvalidReturnItem>;
    /**
     * An array of return authorization information.
     * @type {Array<ReturnAuthorization>}
     * @memberof CreateFulfillmentReturnResult
     */
    returnAuthorizations?: Array<ReturnAuthorization>;
}
/**
 * An item that Amazon accepted for return.
 * @export
 * @interface CreateReturnItem
 */
export interface CreateReturnItem {
    /**
     * An identifier assigned by the seller to the return item.
     * @type {string}
     * @memberof CreateReturnItem
     */
    sellerReturnItemId: string;
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof CreateReturnItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The identifier for the shipment that is associated with the return item.
     * @type {string}
     * @memberof CreateReturnItem
     */
    amazonShipmentId: string;
    /**
     * The return reason code assigned to the return item by the seller.
     * @type {string}
     * @memberof CreateReturnItem
     */
    returnReasonCode: string;
    /**
     * An optional comment about the return item.
     * @type {string}
     * @memberof CreateReturnItem
     */
    returnComment?: string;
}
/**
 * The current delivery status of the package.
 * @export
 * @enum {string}
 */
export enum CurrentStatus {
    InTransit = 'IN_TRANSIT',
    Delivered = 'DELIVERED',
    Returning = 'RETURNING',
    Returned = 'RETURNED',
    Undeliverable = 'UNDELIVERABLE',
    Delayed = 'DELAYED',
    AvailableForPickup = 'AVAILABLE_FOR_PICKUP',
    CustomerAction = 'CUSTOMER_ACTION',
    Unknown = 'UNKNOWN',
    OutForDelivery = 'OUT_FOR_DELIVERY',
    DeliveryAttempted = 'DELIVERY_ATTEMPTED',
    PickupSuccessful = 'PICKUP_SUCCESSFUL',
    PickupCancelled = 'PICKUP_CANCELLED',
    PickupAttempted = 'PICKUP_ATTEMPTED',
    PickupScheduled = 'PICKUP_SCHEDULED',
    ReturnRequestAccepted = 'RETURN_REQUEST_ACCEPTED',
    RefundIssued = 'REFUND_ISSUED',
    ReturnReceivedInFc = 'RETURN_RECEIVED_IN_FC'
}

/**
 * The time range within which something (for example, a delivery) will occur.
 * @export
 * @interface DateRange
 */
export interface DateRange {
    /**
     * Date timestamp
     * @type {string}
     * @memberof DateRange
     */
    earliest: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof DateRange
     */
    latest: string;
}
/**
 * A delivery document for a package.
 * @export
 * @interface DeliveryDocument
 */
export interface DeliveryDocument {
    /**
     * The delivery document type. Values are `SIGNATURE` and `DELIVERY_IMAGE`.
     * @type {string}
     * @memberof DeliveryDocument
     */
    documentType: string;
    /**
     * A URL that you can use to download the document. This URL has a `Content-Type` header. Note that the URL expires after one hour. To get a new URL, you must call the API again.
     * @type {string}
     * @memberof DeliveryDocument
     */
    url?: string;
}
/**
 * The delivery information for the package. This information is available after the package is delivered.
 * @export
 * @interface DeliveryInformation
 */
export interface DeliveryInformation {
    /**
     * A list of delivery documents for a package.
     * @type {Array<DeliveryDocument>}
     * @memberof DeliveryInformation
     */
    deliveryDocumentList?: Array<DeliveryDocument>;
    /**
     * 
     * @type {DropOffLocation}
     * @memberof DeliveryInformation
     */
    dropOffLocation?: DropOffLocation;
}
/**
 * Localized messaging for a delivery offering.
 * @export
 * @interface DeliveryMessage
 */
export interface DeliveryMessage {
    /**
     * The message content for a delivery offering.
     * @type {string}
     * @memberof DeliveryMessage
     */
    text?: string;
    /**
     * The locale for the message (for example, en_US).
     * @type {string}
     * @memberof DeliveryMessage
     */
    locale?: string;
}
/**
 * An available offer for delivery of a product.
 * @export
 * @interface DeliveryOffer
 */
export interface DeliveryOffer {
    /**
     * Date timestamp
     * @type {string}
     * @memberof DeliveryOffer
     */
    expiresAt?: string;
    /**
     * 
     * @type {DateRange}
     * @memberof DeliveryOffer
     */
    dateRange?: DateRange;
    /**
     * 
     * @type {DeliveryPolicy}
     * @memberof DeliveryOffer
     */
    policy?: DeliveryPolicy;
}
/**
 * The policy for a delivery offering.
 * @export
 * @interface DeliveryPolicy
 */
export interface DeliveryPolicy {
    /**
     * 
     * @type {DeliveryMessage}
     * @memberof DeliveryPolicy
     */
    message?: DeliveryMessage;
}
/**
 * The delivery preferences applied to the destination address. These preferences are applied when possible and are best effort. This feature is currently supported only in the JP marketplace and not applicable for other marketplaces. For eligible orders, the default delivery preference will be to deliver the package unattended at the front door, unless you specify otherwise.
 * @export
 * @interface DeliveryPreferences
 */
export interface DeliveryPreferences {
    /**
     * Additional delivery instructions. For example, this could be instructions on how to enter a building, nearby landmark or navigation instructions, \'Beware of dogs\', etc.
     * @type {string}
     * @memberof DeliveryPreferences
     */
    deliveryInstructions?: string;
    /**
     * 
     * @type {DropOffLocation}
     * @memberof DeliveryPreferences
     */
    dropOffLocation?: DropOffLocation;
}
/**
 * The time range within which a Scheduled Delivery fulfillment order should be delivered. This is only available in the JP marketplace.
 * @export
 * @interface DeliveryWindow
 */
export interface DeliveryWindow {
    /**
     * Date timestamp
     * @type {string}
     * @memberof DeliveryWindow
     */
    startDate: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof DeliveryWindow
     */
    endDate: string;
}
/**
 * The destination for the delivery offer.
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     * 
     * @type {VariablePrecisionAddress}
     * @memberof Destination
     */
    deliveryAddress?: VariablePrecisionAddress;
    /**
     * An IP Address.
     * @type {string}
     * @memberof Destination
     */
    ipAddress?: string;
}
/**
 * The preferred location to leave packages at the destination address.
 * @export
 * @interface DropOffLocation
 */
export interface DropOffLocation {
    /**
     * Specifies the preferred location to leave the package at the destination address.
     * @type {string}
     * @memberof DropOffLocation
     */
    type: DropOffLocationTypeEnum | 'FRONT_DOOR' | 'DELIVERY_BOX' | 'GAS_METER_BOX' | 'BICYCLE_BASKET' | 'GARAGE' | 'RECEPTIONIST' | 'FALLBACK_NEIGHBOR_DELIVERY' | 'DO_NOT_LEAVE_UNATTENDED';
    /**
     * Additional information about the drop-off location that can vary depending on the type of drop-off location specified in the `type` field. If the `type` is set to `FALLBACK_NEIGHBOR_DELIVERY`, the `attributes` object should include the exact keys `neighborName` and `houseNumber` to provide the name and house number of the designated neighbor.
     * @type {{ [key: string]: string; }}
     * @memberof DropOffLocation
     */
    attributes?: { [key: string]: string; };
}

/**
    * @export
    * @enum {string}
    */
export enum DropOffLocationTypeEnum {
    FrontDoor = 'FRONT_DOOR',
    DeliveryBox = 'DELIVERY_BOX',
    GasMeterBox = 'GAS_METER_BOX',
    BicycleBasket = 'BICYCLE_BASKET',
    Garage = 'GARAGE',
    Receptionist = 'RECEPTIONIST',
    FallbackNeighborDelivery = 'FALLBACK_NEIGHBOR_DELIVERY',
    DoNotLeaveUnattended = 'DO_NOT_LEAVE_UNATTENDED'
}

/**
 * The event code for the delivery event.
 * @export
 * @enum {string}
 */
export enum EventCode {
    _101 = 'EVENT_101',
    _102 = 'EVENT_102',
    _201 = 'EVENT_201',
    _202 = 'EVENT_202',
    _203 = 'EVENT_203',
    _204 = 'EVENT_204',
    _205 = 'EVENT_205',
    _206 = 'EVENT_206',
    _301 = 'EVENT_301',
    _302 = 'EVENT_302',
    _304 = 'EVENT_304',
    _306 = 'EVENT_306',
    _307 = 'EVENT_307',
    _308 = 'EVENT_308',
    _309 = 'EVENT_309',
    _401 = 'EVENT_401',
    _402 = 'EVENT_402',
    _403 = 'EVENT_403',
    _404 = 'EVENT_404',
    _405 = 'EVENT_405',
    _406 = 'EVENT_406',
    _407 = 'EVENT_407',
    _408 = 'EVENT_408',
    _409 = 'EVENT_409',
    _411 = 'EVENT_411',
    _412 = 'EVENT_412',
    _413 = 'EVENT_413',
    _414 = 'EVENT_414',
    _415 = 'EVENT_415',
    _416 = 'EVENT_416',
    _417 = 'EVENT_417',
    _418 = 'EVENT_418',
    _419 = 'EVENT_419'
}

/**
 * A Multi-Channel Fulfillment feature.
 * @export
 * @interface Feature
 */
export interface Feature {
    /**
     * The feature name.
     * @type {string}
     * @memberof Feature
     */
    featureName: string;
    /**
     * The feature description.
     * @type {string}
     * @memberof Feature
     */
    featureDescription: string;
    /**
     * When true, indicates that the seller is eligible to use the feature.
     * @type {boolean}
     * @memberof Feature
     */
    sellerEligible?: boolean;
}
/**
 * `FeatureSettings` allows users to apply fulfillment features to an order. To block an order from being shipped using Amazon Logistics (AMZL) and an AMZL tracking number, use `featureName` as `BLOCK_AMZL` and `featureFulfillmentPolicy` as `Required`. Blocking AMZL will incur an additional fee surcharge on your MCF orders and increase the risk of some of your orders being unfulfilled or delivered late if there are no alternative carriers available. Using `BLOCK_AMZL` in an order request will take precedence over your Seller Central account setting. To ship in non-Amazon branded packaging (blank boxes), use featureName `BLANK_BOX`.
 * @export
 * @interface FeatureSettings
 */
export interface FeatureSettings {
    /**
     * The name of the feature.
     * @type {string}
     * @memberof FeatureSettings
     */
    featureName?: string;
    /**
     * Specifies the policy to use when fulfilling an order.
     * @type {string}
     * @memberof FeatureSettings
     */
    featureFulfillmentPolicy?: FeatureSettingsFeatureFulfillmentPolicyEnum | 'Required' | 'NotRequired';
}

/**
    * @export
    * @enum {string}
    */
export enum FeatureSettingsFeatureFulfillmentPolicyEnum {
    Required = 'Required',
    NotRequired = 'NotRequired'
}

/**
 * Information about an SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
 * @export
 * @interface FeatureSku
 */
export interface FeatureSku {
    /**
     * Used to identify an item in the given marketplace. `SellerSKU` is qualified by the seller\'s SellerId, which is included with every operation that you submit.
     * @type {string}
     * @memberof FeatureSku
     */
    sellerSku?: string;
    /**
     * The unique SKU used by Amazon\'s fulfillment network.
     * @type {string}
     * @memberof FeatureSku
     */
    fnSku?: string;
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof FeatureSku
     */
    asin?: string;
    /**
     * The number of SKUs available for this service.
     * @type {number}
     * @memberof FeatureSku
     */
    skuCount?: number;
    /**
     * Other seller SKUs that are shared across the same inventory.
     * @type {Array<string>}
     * @memberof FeatureSku
     */
    overlappingSkus?: Array<string>;
}
/**
 * Fee type and cost.
 * @export
 * @interface Fee
 */
export interface Fee {
    /**
     * The type of fee.
     * @type {string}
     * @memberof Fee
     */
    name: FeeNameEnum | 'FBAPerUnitFulfillmentFee' | 'FBAPerOrderFulfillmentFee' | 'FBATransportationFee' | 'FBAFulfillmentCODFee';
    /**
     * 
     * @type {Money}
     * @memberof Fee
     */
    amount: Money;
}

/**
    * @export
    * @enum {string}
    */
export enum FeeNameEnum {
    FbaPerUnitFulfillmentFee = 'FBAPerUnitFulfillmentFee',
    FbaPerOrderFulfillmentFee = 'FBAPerOrderFulfillmentFee',
    FbaTransportationFee = 'FBATransportationFee',
    FbaFulfillmentCodFee = 'FBAFulfillmentCODFee'
}

/**
 * Specifies whether the fulfillment order should ship now or have an order hold put on it.
 * @export
 * @enum {string}
 */
export enum FulfillmentAction {
    Ship = 'Ship',
    Hold = 'Hold'
}

/**
 * General information about a fulfillment order, including its status.
 * @export
 * @interface FulfillmentOrder
 */
export interface FulfillmentOrder {
    /**
     * The fulfillment order identifier submitted with the `createFulfillmentOrder` operation.
     * @type {string}
     * @memberof FulfillmentOrder
     */
    sellerFulfillmentOrderId: string;
    /**
     * The identifier for the marketplace the fulfillment order is placed against.
     * @type {string}
     * @memberof FulfillmentOrder
     */
    marketplaceId: string;
    /**
     * A fulfillment order identifier submitted with the `createFulfillmentOrder` operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
     * @type {string}
     * @memberof FulfillmentOrder
     */
    displayableOrderId: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentOrder
     */
    displayableOrderDate: string;
    /**
     * A text block submitted with the `createFulfillmentOrder` operation. Displays in recipient-facing materials such as the packing slip.
     * @type {string}
     * @memberof FulfillmentOrder
     */
    displayableOrderComment: string;
    /**
     * 
     * @type {ShippingSpeedCategory}
     * @memberof FulfillmentOrder
     */
    shippingSpeedCategory: ShippingSpeedCategory | 'Standard' | 'Expedited' | 'Priority' | 'ScheduledDelivery';
    /**
     * 
     * @type {DeliveryWindow}
     * @memberof FulfillmentOrder
     */
    deliveryWindow?: DeliveryWindow;
    /**
     * 
     * @type {Address}
     * @memberof FulfillmentOrder
     */
    destinationAddress: Address;
    /**
     * 
     * @type {FulfillmentAction}
     * @memberof FulfillmentOrder
     */
    fulfillmentAction?: FulfillmentAction | 'Ship' | 'Hold';
    /**
     * 
     * @type {FulfillmentPolicy}
     * @memberof FulfillmentOrder
     */
    fulfillmentPolicy?: FulfillmentPolicy | 'FillOrKill' | 'FillAll' | 'FillAllAvailable';
    /**
     * 
     * @type {CODSettings}
     * @memberof FulfillmentOrder
     */
    codSettings?: CODSettings;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentOrder
     */
    receivedDate: string;
    /**
     * 
     * @type {FulfillmentOrderStatus}
     * @memberof FulfillmentOrder
     */
    fulfillmentOrderStatus: FulfillmentOrderStatus | 'New' | 'Received' | 'Planning' | 'Processing' | 'Cancelled' | 'Complete' | 'CompletePartialled' | 'Unfulfillable' | 'Invalid';
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentOrder
     */
    statusUpdatedDate: string;
    /**
     * A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
     * @type {Array<string>}
     * @memberof FulfillmentOrder
     */
    notificationEmails?: Array<string>;
    /**
     * A list of features and their fulfillment policies to apply to the order.
     * @type {Array<FeatureSettings>}
     * @memberof FulfillmentOrder
     */
    featureConstraints?: Array<FeatureSettings>;
}
/**
 * Item information for a fulfillment order.
 * @export
 * @interface FulfillmentOrderItem
 */
export interface FulfillmentOrderItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    sellerSku: string;
    /**
     * A fulfillment order item identifier submitted with a call to the `createFulfillmentOrder` operation.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof FulfillmentOrderItem
     */
    quantity: number;
    /**
     * A message to the gift recipient, if applicable.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    giftMessage?: string;
    /**
     * Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    displayableComment?: string;
    /**
     * Amazon\'s fulfillment network SKU of the item.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    fulfillmentNetworkSku?: string;
    /**
     * Indicates whether the item is sellable or unsellable.
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    orderItemDisposition?: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof FulfillmentOrderItem
     */
    cancelledQuantity: number;
    /**
     * The item quantity.
     * @type {number}
     * @memberof FulfillmentOrderItem
     */
    unfulfillableQuantity: number;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    estimatedShipDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentOrderItem
     */
    estimatedArrivalDate?: string;
    /**
     * 
     * @type {Money}
     * @memberof FulfillmentOrderItem
     */
    perUnitPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof FulfillmentOrderItem
     */
    perUnitTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof FulfillmentOrderItem
     */
    perUnitDeclaredValue?: Money;
}
/**
 * The current status of the fulfillment order.
 * @export
 * @enum {string}
 */
export enum FulfillmentOrderStatus {
    New = 'New',
    Received = 'Received',
    Planning = 'Planning',
    Processing = 'Processing',
    Cancelled = 'Cancelled',
    Complete = 'Complete',
    CompletePartialled = 'CompletePartialled',
    Unfulfillable = 'Unfulfillable',
    Invalid = 'Invalid'
}

/**
 * The `FulfillmentPolicy` value specified when you submitted the `createFulfillmentOrder` operation.
 * @export
 * @enum {string}
 */
export enum FulfillmentPolicy {
    FillOrKill = 'FillOrKill',
    FillAll = 'FillAll',
    FillAllAvailable = 'FillAllAvailable'
}

/**
 * Information about a fulfillment order preview, including delivery and fee information based on shipping method.
 * @export
 * @interface FulfillmentPreview
 */
export interface FulfillmentPreview {
    /**
     * 
     * @type {ShippingSpeedCategory}
     * @memberof FulfillmentPreview
     */
    shippingSpeedCategory: ShippingSpeedCategory | 'Standard' | 'Expedited' | 'Priority' | 'ScheduledDelivery';
    /**
     * 
     * @type {ScheduledDeliveryInfo}
     * @memberof FulfillmentPreview
     */
    scheduledDeliveryInfo?: ScheduledDeliveryInfo;
    /**
     * When true, this fulfillment order preview is fulfillable.
     * @type {boolean}
     * @memberof FulfillmentPreview
     */
    isFulfillable: boolean;
    /**
     * When true, this fulfillment order preview is for COD (Cash On Delivery).
     * @type {boolean}
     * @memberof FulfillmentPreview
     */
    isCODCapable: boolean;
    /**
     * 
     * @type {Weight}
     * @memberof FulfillmentPreview
     */
    estimatedShippingWeight?: Weight;
    /**
     * An array of fee type and cost pairs.
     * @type {Array<Fee>}
     * @memberof FulfillmentPreview
     */
    estimatedFees?: Array<Fee>;
    /**
     * An array of fulfillment preview shipment information.
     * @type {Array<FulfillmentPreviewShipment>}
     * @memberof FulfillmentPreview
     */
    fulfillmentPreviewShipments?: Array<FulfillmentPreviewShipment>;
    /**
     * An array of unfulfillable preview item information.
     * @type {Array<UnfulfillablePreviewItem>}
     * @memberof FulfillmentPreview
     */
    unfulfillablePreviewItems?: Array<UnfulfillablePreviewItem>;
    /**
     * String list
     * @type {Array<string>}
     * @memberof FulfillmentPreview
     */
    orderUnfulfillableReasons?: Array<string>;
    /**
     * The marketplace the fulfillment order is placed against.
     * @type {string}
     * @memberof FulfillmentPreview
     */
    marketplaceId: string;
    /**
     * A list of features and their fulfillment policies to apply to the order.
     * @type {Array<FeatureSettings>}
     * @memberof FulfillmentPreview
     */
    featureConstraints?: Array<FeatureSettings>;
}
/**
 * Item information for a shipment in a fulfillment order preview.
 * @export
 * @interface FulfillmentPreviewItem
 */
export interface FulfillmentPreviewItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof FulfillmentPreviewItem
     */
    sellerSku: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof FulfillmentPreviewItem
     */
    quantity: number;
    /**
     * A fulfillment order item identifier that the seller created with a call to the `createFulfillmentOrder` operation.
     * @type {string}
     * @memberof FulfillmentPreviewItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * 
     * @type {Weight}
     * @memberof FulfillmentPreviewItem
     */
    estimatedShippingWeight?: Weight;
    /**
     * The method used to calculate the estimated shipping weight.
     * @type {string}
     * @memberof FulfillmentPreviewItem
     */
    shippingWeightCalculationMethod?: FulfillmentPreviewItemShippingWeightCalculationMethodEnum | 'Package' | 'Dimensional';
}

/**
    * @export
    * @enum {string}
    */
export enum FulfillmentPreviewItemShippingWeightCalculationMethodEnum {
    Package = 'Package',
    Dimensional = 'Dimensional'
}

/**
 * Delivery and item information for a shipment in a fulfillment order preview.
 * @export
 * @interface FulfillmentPreviewShipment
 */
export interface FulfillmentPreviewShipment {
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentPreviewShipment
     */
    earliestShipDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentPreviewShipment
     */
    latestShipDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentPreviewShipment
     */
    earliestArrivalDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentPreviewShipment
     */
    latestArrivalDate?: string;
    /**
     * Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
     * @type {Array<string>}
     * @memberof FulfillmentPreviewShipment
     */
    shippingNotes?: Array<string>;
    /**
     * An array of fulfillment preview item information.
     * @type {Array<FulfillmentPreviewItem>}
     * @memberof FulfillmentPreviewShipment
     */
    fulfillmentPreviewItems: Array<FulfillmentPreviewItem>;
}
/**
 * Indicates if the return item has been processed by a fulfillment center.
 * @export
 * @enum {string}
 */
export enum FulfillmentReturnItemStatus {
    New = 'New',
    Processed = 'Processed'
}

/**
 * Delivery and item information for a shipment in a fulfillment order.
 * @export
 * @interface FulfillmentShipment
 */
export interface FulfillmentShipment {
    /**
     * A shipment identifier assigned by Amazon.
     * @type {string}
     * @memberof FulfillmentShipment
     */
    amazonShipmentId: string;
    /**
     * An identifier for the fulfillment center that the shipment will be sent from.
     * @type {string}
     * @memberof FulfillmentShipment
     */
    fulfillmentCenterId: string;
    /**
     * The current status of the shipment.
     * @type {string}
     * @memberof FulfillmentShipment
     */
    fulfillmentShipmentStatus: FulfillmentShipmentFulfillmentShipmentStatusEnum | 'PENDING' | 'SHIPPED' | 'CANCELLED_BY_FULFILLER' | 'CANCELLED_BY_SELLER';
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentShipment
     */
    shippingDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentShipment
     */
    estimatedArrivalDate?: string;
    /**
     * Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren\'t available.
     * @type {Array<string>}
     * @memberof FulfillmentShipment
     */
    shippingNotes?: Array<string>;
    /**
     * An array of fulfillment shipment item information.
     * @type {Array<FulfillmentShipmentItem>}
     * @memberof FulfillmentShipment
     */
    fulfillmentShipmentItem: Array<FulfillmentShipmentItem>;
    /**
     * An array of fulfillment shipment package information.
     * @type {Array<FulfillmentShipmentPackage>}
     * @memberof FulfillmentShipment
     */
    fulfillmentShipmentPackage?: Array<FulfillmentShipmentPackage>;
}

/**
    * @export
    * @enum {string}
    */
export enum FulfillmentShipmentFulfillmentShipmentStatusEnum {
    Pending = 'PENDING',
    Shipped = 'SHIPPED',
    CancelledByFulfiller = 'CANCELLED_BY_FULFILLER',
    CancelledBySeller = 'CANCELLED_BY_SELLER'
}

/**
 * Item information for a shipment in a fulfillment order.
 * @export
 * @interface FulfillmentShipmentItem
 */
export interface FulfillmentShipmentItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof FulfillmentShipmentItem
     */
    sellerSku: string;
    /**
     * The fulfillment order item identifier that the seller created and submitted with a call to the `createFulfillmentOrder` operation.
     * @type {string}
     * @memberof FulfillmentShipmentItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof FulfillmentShipmentItem
     */
    quantity: number;
    /**
     * An identifier for the package that contains the item quantity.
     * @type {number}
     * @memberof FulfillmentShipmentItem
     */
    packageNumber?: number;
    /**
     * The serial number of the shipped item.
     * @type {string}
     * @memberof FulfillmentShipmentItem
     */
    serialNumber?: string;
    /**
     * String list
     * @type {Array<string>}
     * @memberof FulfillmentShipmentItem
     */
    manufacturerLotCodes?: Array<string>;
}
/**
 * Package information for a shipment in a fulfillment order.
 * @export
 * @interface FulfillmentShipmentPackage
 */
export interface FulfillmentShipmentPackage {
    /**
     * Identifies a package in a shipment.
     * @type {number}
     * @memberof FulfillmentShipmentPackage
     */
    packageNumber: number;
    /**
     * Identifies the carrier who will deliver the shipment to the recipient.
     * @type {string}
     * @memberof FulfillmentShipmentPackage
     */
    carrierCode: string;
    /**
     * The tracking number, if provided, can be used to obtain tracking and delivery information.
     * @type {string}
     * @memberof FulfillmentShipmentPackage
     */
    trackingNumber?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof FulfillmentShipmentPackage
     */
    estimatedArrivalDate?: string;
    /**
     * 
     * @type {LockerDetails}
     * @memberof FulfillmentShipmentPackage
     */
    lockerDetails?: LockerDetails;
    /**
     * 
     * @type {DeliveryInformation}
     * @memberof FulfillmentShipmentPackage
     */
    deliveryInformation?: DeliveryInformation;
}
/**
 * The product details for the delivery offer.
 * @export
 * @interface GetDeliveryOffersProduct
 */
export interface GetDeliveryOffersProduct {
    /**
     * 
     * @type {ProductIdentifier}
     * @memberof GetDeliveryOffersProduct
     */
    productIdentifier: ProductIdentifier;
    /**
     * 
     * @type {Amount}
     * @memberof GetDeliveryOffersProduct
     */
    amount?: Amount;
}
/**
 * The request body schema for the getDeliveryOffers operation.
 * @export
 * @interface GetDeliveryOffersRequest
 */
export interface GetDeliveryOffersRequest {
    /**
     * 
     * @type {GetDeliveryOffersProduct}
     * @memberof GetDeliveryOffersRequest
     */
    product: GetDeliveryOffersProduct;
    /**
     * 
     * @type {GetDeliveryOffersTerms}
     * @memberof GetDeliveryOffersRequest
     */
    terms: GetDeliveryOffersTerms;
}
/**
 * The response schema for the getDeliveryOffers operation.
 * @export
 * @interface GetDeliveryOffersResponse
 */
export interface GetDeliveryOffersResponse {
    /**
     * 
     * @type {GetDeliveryOffersResult}
     * @memberof GetDeliveryOffersResponse
     */
    payload?: GetDeliveryOffersResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetDeliveryOffersResponse
     */
    errors?: Array<Error>;
}
/**
 * A list of delivery offers, including offer expiration, earliest and latest date and time range, and the delivery offer policy.
 * @export
 * @interface GetDeliveryOffersResult
 */
export interface GetDeliveryOffersResult {
    /**
     * An array of delivery offer information.
     * @type {Array<DeliveryOffer>}
     * @memberof GetDeliveryOffersResult
     */
    deliveryOffers?: Array<DeliveryOffer>;
}
/**
 * The delivery terms for the delivery offer.
 * @export
 * @interface GetDeliveryOffersTerms
 */
export interface GetDeliveryOffersTerms {
    /**
     * 
     * @type {Origin}
     * @memberof GetDeliveryOffersTerms
     */
    origin: Origin;
    /**
     * 
     * @type {Destination}
     * @memberof GetDeliveryOffersTerms
     */
    destination: Destination;
}
/**
 * The breakdown of eligibility inventory by feature.
 * @export
 * @interface GetFeatureInventoryResponse
 */
export interface GetFeatureInventoryResponse {
    /**
     * 
     * @type {GetFeatureInventoryResult}
     * @memberof GetFeatureInventoryResponse
     */
    payload?: GetFeatureInventoryResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetFeatureInventoryResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the `getEligibileInventory` operation.
 * @export
 * @interface GetFeatureInventoryResult
 */
export interface GetFeatureInventoryResult {
    /**
     * The requested marketplace.
     * @type {string}
     * @memberof GetFeatureInventoryResult
     */
    marketplaceId: string;
    /**
     * The name of the feature.
     * @type {string}
     * @memberof GetFeatureInventoryResult
     */
    featureName: string;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof GetFeatureInventoryResult
     */
    nextToken?: string;
    /**
     * An array of SKUs eligible for this feature and the quantity available.
     * @type {Array<FeatureSku>}
     * @memberof GetFeatureInventoryResult
     */
    featureSkus?: Array<FeatureSku>;
}
/**
 * The response schema for the `getFeatureSKU` operation.
 * @export
 * @interface GetFeatureSkuResponse
 */
export interface GetFeatureSkuResponse {
    /**
     * 
     * @type {GetFeatureSkuResult}
     * @memberof GetFeatureSkuResponse
     */
    payload?: GetFeatureSkuResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetFeatureSkuResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the `getFeatureSKU` operation.
 * @export
 * @interface GetFeatureSkuResult
 */
export interface GetFeatureSkuResult {
    /**
     * The requested marketplace.
     * @type {string}
     * @memberof GetFeatureSkuResult
     */
    marketplaceId: string;
    /**
     * The name of the feature.
     * @type {string}
     * @memberof GetFeatureSkuResult
     */
    featureName: string;
    /**
     * When true, the seller SKU is eligible for the requested feature.
     * @type {boolean}
     * @memberof GetFeatureSkuResult
     */
    isEligible: boolean;
    /**
     * A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * `MERCHANT_NOT_ENROLLED` - The merchant isn\'t enrolled for the feature. * `SKU_NOT_ELIGIBLE` - The SKU doesn\'t reside in a warehouse that supports the feature. * `INVALID_SKU` - There is an issue with the SKU provided.
     * @type {Array<string>}
     * @memberof GetFeatureSkuResult
     */
    ineligibleReasons?: Array<string>;
    /**
     * 
     * @type {FeatureSku}
     * @memberof GetFeatureSkuResult
     */
    skuInfo?: FeatureSku;
}
/**
 * The response schema for the `getFeatures` operation.
 * @export
 * @interface GetFeaturesResponse
 */
export interface GetFeaturesResponse {
    /**
     * 
     * @type {GetFeaturesResult}
     * @memberof GetFeaturesResponse
     */
    payload?: GetFeaturesResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetFeaturesResponse
     */
    errors?: Array<Error>;
}
/**
 * The payload for the `getFeatures` operation.
 * @export
 * @interface GetFeaturesResult
 */
export interface GetFeaturesResult {
    /**
     * An array of features.
     * @type {Array<Feature>}
     * @memberof GetFeaturesResult
     */
    features: Array<Feature>;
}
/**
 * The response schema for the `getFulfillmentOrder` operation.
 * @export
 * @interface GetFulfillmentOrderResponse
 */
export interface GetFulfillmentOrderResponse {
    /**
     * 
     * @type {GetFulfillmentOrderResult}
     * @memberof GetFulfillmentOrderResponse
     */
    payload?: GetFulfillmentOrderResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetFulfillmentOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The request for the getFulfillmentOrder operation.
 * @export
 * @interface GetFulfillmentOrderResult
 */
export interface GetFulfillmentOrderResult {
    /**
     * 
     * @type {FulfillmentOrder}
     * @memberof GetFulfillmentOrderResult
     */
    fulfillmentOrder: FulfillmentOrder;
    /**
     * An array of fulfillment order item information.
     * @type {Array<FulfillmentOrderItem>}
     * @memberof GetFulfillmentOrderResult
     */
    fulfillmentOrderItems: Array<FulfillmentOrderItem>;
    /**
     * An array of fulfillment shipment information.
     * @type {Array<FulfillmentShipment>}
     * @memberof GetFulfillmentOrderResult
     */
    fulfillmentShipments?: Array<FulfillmentShipment>;
    /**
     * An array of items that Amazon accepted for return. Returns empty if no items were accepted for return.
     * @type {Array<ReturnItem>}
     * @memberof GetFulfillmentOrderResult
     */
    returnItems: Array<ReturnItem>;
    /**
     * An array of return authorization information.
     * @type {Array<ReturnAuthorization>}
     * @memberof GetFulfillmentOrderResult
     */
    returnAuthorizations: Array<ReturnAuthorization>;
    /**
     * An array of various payment attributes related to this fulfillment order.
     * @type {Array<PaymentInformation>}
     * @memberof GetFulfillmentOrderResult
     */
    paymentInformation?: Array<PaymentInformation>;
}
/**
 * Item information for a fulfillment order preview.
 * @export
 * @interface GetFulfillmentPreviewItem
 */
export interface GetFulfillmentPreviewItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof GetFulfillmentPreviewItem
     */
    sellerSku: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof GetFulfillmentPreviewItem
     */
    quantity: number;
    /**
     * 
     * @type {Money}
     * @memberof GetFulfillmentPreviewItem
     */
    perUnitDeclaredValue?: Money;
    /**
     * A fulfillment order item identifier that the seller creates to track items in the fulfillment preview.
     * @type {string}
     * @memberof GetFulfillmentPreviewItem
     */
    sellerFulfillmentOrderItemId: string;
}
/**
 * The request body schema for the `getFulfillmentPreview` operation.
 * @export
 * @interface GetFulfillmentPreviewRequest
 */
export interface GetFulfillmentPreviewRequest {
    /**
     * The marketplace the fulfillment order is placed against.
     * @type {string}
     * @memberof GetFulfillmentPreviewRequest
     */
    marketplaceId?: string;
    /**
     * 
     * @type {Address}
     * @memberof GetFulfillmentPreviewRequest
     */
    address: Address;
    /**
     * An array of fulfillment preview item information.
     * @type {Array<GetFulfillmentPreviewItem>}
     * @memberof GetFulfillmentPreviewRequest
     */
    items: Array<GetFulfillmentPreviewItem>;
    /**
     * ShippingSpeedCategory List
     * @type {Array<ShippingSpeedCategory>}
     * @memberof GetFulfillmentPreviewRequest
     */
    shippingSpeedCategories?: Array<(ShippingSpeedCategory | 'Standard' | 'Expedited' | 'Priority' | 'ScheduledDelivery')>;
    /**
     * When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.
     * @type {boolean}
     * @memberof GetFulfillmentPreviewRequest
     */
    includeCODFulfillmentPreview?: boolean;
    /**
     * When true, returns the `ScheduledDeliveryInfo` response object, which contains the available delivery windows for a Scheduled Delivery. The `ScheduledDeliveryInfo` response object can only be returned for fulfillment order previews with `ShippingSpeedCategories` = `ScheduledDelivery`.
     * @type {boolean}
     * @memberof GetFulfillmentPreviewRequest
     */
    includeDeliveryWindows?: boolean;
    /**
     * A list of features and their fulfillment policies to apply to the order.
     * @type {Array<FeatureSettings>}
     * @memberof GetFulfillmentPreviewRequest
     */
    featureConstraints?: Array<FeatureSettings>;
}
/**
 * The response schema for the `getFulfillmentPreview` operation.
 * @export
 * @interface GetFulfillmentPreviewResponse
 */
export interface GetFulfillmentPreviewResponse {
    /**
     * 
     * @type {GetFulfillmentPreviewResult}
     * @memberof GetFulfillmentPreviewResponse
     */
    payload?: GetFulfillmentPreviewResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetFulfillmentPreviewResponse
     */
    errors?: Array<Error>;
}
/**
 * A list of fulfillment order previews, including estimated shipping weights, estimated shipping fees, and estimated ship dates and arrival dates.
 * @export
 * @interface GetFulfillmentPreviewResult
 */
export interface GetFulfillmentPreviewResult {
    /**
     * An array of fulfillment preview information.
     * @type {Array<FulfillmentPreview>}
     * @memberof GetFulfillmentPreviewResult
     */
    fulfillmentPreviews?: Array<FulfillmentPreview>;
}
/**
 * The response schema for the `getPackageTrackingDetails` operation.
 * @export
 * @interface GetPackageTrackingDetailsResponse
 */
export interface GetPackageTrackingDetailsResponse {
    /**
     * 
     * @type {PackageTrackingDetails}
     * @memberof GetPackageTrackingDetailsResponse
     */
    payload?: PackageTrackingDetails;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPackageTrackingDetailsResponse
     */
    errors?: Array<Error>;
}
/**
 * The reason that the item is invalid for return.
 * @export
 * @interface InvalidItemReason
 */
export interface InvalidItemReason {
    /**
     * 
     * @type {InvalidItemReasonCode}
     * @memberof InvalidItemReason
     */
    invalidItemReasonCode: InvalidItemReasonCode | 'InvalidValues' | 'DuplicateRequest' | 'NoCompletedShipItems' | 'NoReturnableQuantity';
    /**
     * A human readable description of the invalid item reason code.
     * @type {string}
     * @memberof InvalidItemReason
     */
    description: string;
}
/**
 * A code for why the item is invalid for return.
 * @export
 * @enum {string}
 */
export enum InvalidItemReasonCode {
    InvalidValues = 'InvalidValues',
    DuplicateRequest = 'DuplicateRequest',
    NoCompletedShipItems = 'NoCompletedShipItems',
    NoReturnableQuantity = 'NoReturnableQuantity'
}

/**
 * An item that is invalid for return.
 * @export
 * @interface InvalidReturnItem
 */
export interface InvalidReturnItem {
    /**
     * An identifier assigned by the seller to the return item.
     * @type {string}
     * @memberof InvalidReturnItem
     */
    sellerReturnItemId: string;
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof InvalidReturnItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * 
     * @type {InvalidItemReason}
     * @memberof InvalidReturnItem
     */
    invalidItemReason: InvalidItemReason;
}
/**
 * The response schema for the `listAllFulfillmentOrders` operation.
 * @export
 * @interface ListAllFulfillmentOrdersResponse
 */
export interface ListAllFulfillmentOrdersResponse {
    /**
     * 
     * @type {ListAllFulfillmentOrdersResult}
     * @memberof ListAllFulfillmentOrdersResponse
     */
    payload?: ListAllFulfillmentOrdersResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListAllFulfillmentOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * The request for the listAllFulfillmentOrders operation.
 * @export
 * @interface ListAllFulfillmentOrdersResult
 */
export interface ListAllFulfillmentOrdersResult {
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof ListAllFulfillmentOrdersResult
     */
    nextToken?: string;
    /**
     * An array of fulfillment order information.
     * @type {Array<FulfillmentOrder>}
     * @memberof ListAllFulfillmentOrdersResult
     */
    fulfillmentOrders?: Array<FulfillmentOrder>;
}
/**
 * The response schema for the `listReturnReasonCodes` operation.
 * @export
 * @interface ListReturnReasonCodesResponse
 */
export interface ListReturnReasonCodesResponse {
    /**
     * 
     * @type {ListReturnReasonCodesResult}
     * @memberof ListReturnReasonCodesResponse
     */
    payload?: ListReturnReasonCodesResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ListReturnReasonCodesResponse
     */
    errors?: Array<Error>;
}
/**
 * The request for the listReturnReasonCodes operation.
 * @export
 * @interface ListReturnReasonCodesResult
 */
export interface ListReturnReasonCodesResult {
    /**
     * An array of return reason code details.
     * @type {Array<ReasonCodeDetails>}
     * @memberof ListReturnReasonCodesResult
     */
    reasonCodeDetails?: Array<ReasonCodeDetails>;
}
/**
 * The locker details, which you can use to access the locker delivery box.
 * @export
 * @interface LockerDetails
 */
export interface LockerDetails {
    /**
     * Indicates the locker number
     * @type {string}
     * @memberof LockerDetails
     */
    lockerNumber?: string;
    /**
     * Indicates the locker access code
     * @type {string}
     * @memberof LockerDetails
     */
    lockerAccessCode?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * An amount of money, including units in the form of currency.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Three digit currency code in ISO 4217 format.
     * @type {string}
     * @memberof Money
     */
    currencyCode: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
     * @type {string}
     * @memberof Money
     */
    value: string;
}
/**
 * The origin for the delivery offer.
 * @export
 * @interface Origin
 */
export interface Origin {
    /**
     * The two digit country code the items should ship from. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Origin
     */
    countryCode: string;
}
/**
 * Tracking details of package
 * @export
 * @interface PackageTrackingDetails
 */
export interface PackageTrackingDetails {
    /**
     * The package identifier.
     * @type {number}
     * @memberof PackageTrackingDetails
     */
    packageNumber: number;
    /**
     * The tracking number for the package.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    trackingNumber?: string;
    /**
     * Link on swiship.com that allows customers to track the package.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    customerTrackingLink?: string;
    /**
     * The name of the carrier.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    carrierCode?: string;
    /**
     * The phone number of the carrier.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    carrierPhoneNumber?: string;
    /**
     * The URL of the carrier\'s website.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    carrierURL?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    shipDate?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    estimatedArrivalDate?: string;
    /**
     * 
     * @type {TrackingAddress}
     * @memberof PackageTrackingDetails
     */
    shipToAddress?: TrackingAddress;
    /**
     * 
     * @type {CurrentStatus}
     * @memberof PackageTrackingDetails
     */
    currentStatus?: CurrentStatus | 'IN_TRANSIT' | 'DELIVERED' | 'RETURNING' | 'RETURNED' | 'UNDELIVERABLE' | 'DELAYED' | 'AVAILABLE_FOR_PICKUP' | 'CUSTOMER_ACTION' | 'UNKNOWN' | 'OUT_FOR_DELIVERY' | 'DELIVERY_ATTEMPTED' | 'PICKUP_SUCCESSFUL' | 'PICKUP_CANCELLED' | 'PICKUP_ATTEMPTED' | 'PICKUP_SCHEDULED' | 'RETURN_REQUEST_ACCEPTED' | 'REFUND_ISSUED' | 'RETURN_RECEIVED_IN_FC';
    /**
     * Description corresponding to the `CurrentStatus` value.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    currentStatusDescription?: string;
    /**
     * The name of the person who signed for the package.
     * @type {string}
     * @memberof PackageTrackingDetails
     */
    signedForBy?: string;
    /**
     * 
     * @type {AdditionalLocationInfo}
     * @memberof PackageTrackingDetails
     */
    additionalLocationInfo?: AdditionalLocationInfo | 'AS_INSTRUCTED' | 'CARPORT' | 'CUSTOMER_PICKUP' | 'DECK' | 'DOOR_PERSON' | 'FRONT_DESK' | 'FRONT_DOOR' | 'GARAGE' | 'GUARD' | 'MAIL_ROOM' | 'MAIL_SLOT' | 'MAILBOX' | 'MC_BOY' | 'MC_GIRL' | 'MC_MAN' | 'MC_WOMAN' | 'NEIGHBOR' | 'OFFICE' | 'OUTBUILDING' | 'PATIO' | 'PORCH' | 'REAR_DOOR' | 'RECEPTIONIST' | 'RECEIVER' | 'SECURE_LOCATION' | 'SIDE_DOOR';
    /**
     * An array of tracking event information.
     * @type {Array<TrackingEvent>}
     * @memberof PackageTrackingDetails
     */
    trackingEvents?: Array<TrackingEvent>;
}
/**
 * The attributes related to the payment made from customer to seller for this order.
 * @export
 * @interface PaymentInformation
 */
export interface PaymentInformation {
    /**
     * The transaction identifier of this payment.
     * @type {string}
     * @memberof PaymentInformation
     */
    paymentTransactionId: string;
    /**
     * The transaction mode of this payment.
     * @type {string}
     * @memberof PaymentInformation
     */
    paymentMode: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof PaymentInformation
     */
    paymentDate: string;
}
/**
 * Product identifier input that locates a product for MCF.
 * @export
 * @interface ProductIdentifier
 */
export interface ProductIdentifier {
    /**
     * The merchant SKU for the product.
     * @type {string}
     * @memberof ProductIdentifier
     */
    merchantSku: string;
}
/**
 * A return reason code, a description, and an optional description translation.
 * @export
 * @interface ReasonCodeDetails
 */
export interface ReasonCodeDetails {
    /**
     * A code that indicates a valid return reason.
     * @type {string}
     * @memberof ReasonCodeDetails
     */
    returnReasonCode: string;
    /**
     * A human readable description of the return reason code.
     * @type {string}
     * @memberof ReasonCodeDetails
     */
    description: string;
    /**
     * A translation of the description. The translation is in the language specified in the Language request parameter.
     * @type {string}
     * @memberof ReasonCodeDetails
     */
    translatedDescription?: string;
}
/**
 * Return authorization information for items accepted for return.
 * @export
 * @interface ReturnAuthorization
 */
export interface ReturnAuthorization {
    /**
     * An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
     * @type {string}
     * @memberof ReturnAuthorization
     */
    returnAuthorizationId: string;
    /**
     * An identifier for the Amazon fulfillment center that the return items should be sent to.
     * @type {string}
     * @memberof ReturnAuthorization
     */
    fulfillmentCenterId: string;
    /**
     * 
     * @type {Address}
     * @memberof ReturnAuthorization
     */
    returnToAddress: Address;
    /**
     * The return merchandise authorization (RMA) that Amazon needs to process the return.
     * @type {string}
     * @memberof ReturnAuthorization
     */
    amazonRmaId: string;
    /**
     * A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
     * @type {string}
     * @memberof ReturnAuthorization
     */
    rmaPageURL: string;
}
/**
 * An item that Amazon accepted for return.
 * @export
 * @interface ReturnItem
 */
export interface ReturnItem {
    /**
     * An identifier assigned by the seller to the return item.
     * @type {string}
     * @memberof ReturnItem
     */
    sellerReturnItemId: string;
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof ReturnItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The identifier for the shipment that is associated with the return item.
     * @type {string}
     * @memberof ReturnItem
     */
    amazonShipmentId: string;
    /**
     * The return reason code assigned to the return item by the seller.
     * @type {string}
     * @memberof ReturnItem
     */
    sellerReturnReasonCode: string;
    /**
     * An optional comment about the return item.
     * @type {string}
     * @memberof ReturnItem
     */
    returnComment?: string;
    /**
     * The return reason code that the Amazon fulfillment center assigned to the return item.
     * @type {string}
     * @memberof ReturnItem
     */
    amazonReturnReasonCode?: string;
    /**
     * 
     * @type {FulfillmentReturnItemStatus}
     * @memberof ReturnItem
     */
    status: FulfillmentReturnItemStatus | 'New' | 'Processed';
    /**
     * Date timestamp
     * @type {string}
     * @memberof ReturnItem
     */
    statusChangedDate: string;
    /**
     * Identifies the return authorization used to return this item. Refer to `ReturnAuthorization`.
     * @type {string}
     * @memberof ReturnItem
     */
    returnAuthorizationId?: string;
    /**
     * 
     * @type {ReturnItemDisposition}
     * @memberof ReturnItem
     */
    returnReceivedCondition?: ReturnItemDisposition | 'Sellable' | 'Defective' | 'CustomerDamaged' | 'CarrierDamaged' | 'FulfillerDamaged';
    /**
     * The identifier for the Amazon fulfillment center that processed the return item.
     * @type {string}
     * @memberof ReturnItem
     */
    fulfillmentCenterId?: string;
}
/**
 * The condition of the return item when received by an Amazon fulfillment center.
 * @export
 * @enum {string}
 */
export enum ReturnItemDisposition {
    Sellable = 'Sellable',
    Defective = 'Defective',
    CustomerDamaged = 'CustomerDamaged',
    CarrierDamaged = 'CarrierDamaged',
    FulfillerDamaged = 'FulfillerDamaged'
}

/**
 * Delivery information for a scheduled delivery. This is only available in the JP marketplace.
 * @export
 * @interface ScheduledDeliveryInfo
 */
export interface ScheduledDeliveryInfo {
    /**
     * The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo.
     * @type {string}
     * @memberof ScheduledDeliveryInfo
     */
    deliveryTimeZone: string;
    /**
     * An array of delivery windows.
     * @type {Array<DeliveryWindow>}
     * @memberof ScheduledDeliveryInfo
     */
    deliveryWindows: Array<DeliveryWindow>;
}
/**
 * The shipping method used for the fulfillment order. When this value is `ScheduledDelivery`, choose `Ship` for the `fulfillmentAction`. `Hold` is not a valid `fulfillmentAction` value when the `shippingSpeedCategory` value is `ScheduledDelivery`. Note: Shipping method service level agreements vary by marketplace. Sellers should refer to the [Seller Central](https://developer-docs.amazon.com/sp-api/docs/seller-central-urls) website in their marketplace for shipping method service level agreements and fulfillment fees.
 * @export
 * @enum {string}
 */
export enum ShippingSpeedCategory {
    Standard = 'Standard',
    Expedited = 'Expedited',
    Priority = 'Priority',
    ScheduledDelivery = 'ScheduledDelivery'
}

/**
 * The request body schema for the `submitFulfillmentOrderStatusUpdate` operation.
 * @export
 * @interface SubmitFulfillmentOrderStatusUpdateRequest
 */
export interface SubmitFulfillmentOrderStatusUpdateRequest {
    /**
     * 
     * @type {FulfillmentOrderStatus}
     * @memberof SubmitFulfillmentOrderStatusUpdateRequest
     */
    fulfillmentOrderStatus?: FulfillmentOrderStatus | 'New' | 'Received' | 'Planning' | 'Processing' | 'Cancelled' | 'Complete' | 'CompletePartialled' | 'Unfulfillable' | 'Invalid';
}
/**
 * The response schema for the `SubmitFulfillmentOrderStatusUpdate` operation.
 * @export
 * @interface SubmitFulfillmentOrderStatusUpdateResponse
 */
export interface SubmitFulfillmentOrderStatusUpdateResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitFulfillmentOrderStatusUpdateResponse
     */
    errors?: Array<Error>;
}
/**
 * Address information for tracking the package.
 * @export
 * @interface TrackingAddress
 */
export interface TrackingAddress {
    /**
     * The city.
     * @type {string}
     * @memberof TrackingAddress
     */
    city: string;
    /**
     * The state.
     * @type {string}
     * @memberof TrackingAddress
     */
    state: string;
    /**
     * The country.
     * @type {string}
     * @memberof TrackingAddress
     */
    country: string;
}
/**
 * Information for tracking package deliveries.
 * @export
 * @interface TrackingEvent
 */
export interface TrackingEvent {
    /**
     * Date timestamp
     * @type {string}
     * @memberof TrackingEvent
     */
    eventDate: string;
    /**
     * 
     * @type {TrackingAddress}
     * @memberof TrackingEvent
     */
    eventAddress: TrackingAddress;
    /**
     * 
     * @type {EventCode}
     * @memberof TrackingEvent
     */
    eventCode: EventCode | 'EVENT_101' | 'EVENT_102' | 'EVENT_201' | 'EVENT_202' | 'EVENT_203' | 'EVENT_204' | 'EVENT_205' | 'EVENT_206' | 'EVENT_301' | 'EVENT_302' | 'EVENT_304' | 'EVENT_306' | 'EVENT_307' | 'EVENT_308' | 'EVENT_309' | 'EVENT_401' | 'EVENT_402' | 'EVENT_403' | 'EVENT_404' | 'EVENT_405' | 'EVENT_406' | 'EVENT_407' | 'EVENT_408' | 'EVENT_409' | 'EVENT_411' | 'EVENT_412' | 'EVENT_413' | 'EVENT_414' | 'EVENT_415' | 'EVENT_416' | 'EVENT_417' | 'EVENT_418' | 'EVENT_419';
    /**
     * A description for the corresponding event code.
     * @type {string}
     * @memberof TrackingEvent
     */
    eventDescription: string;
}
/**
 * Information about unfulfillable items in a fulfillment order preview.
 * @export
 * @interface UnfulfillablePreviewItem
 */
export interface UnfulfillablePreviewItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof UnfulfillablePreviewItem
     */
    sellerSku: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof UnfulfillablePreviewItem
     */
    quantity: number;
    /**
     * A fulfillment order item identifier created with a call to the `getFulfillmentPreview` operation.
     * @type {string}
     * @memberof UnfulfillablePreviewItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * String list
     * @type {Array<string>}
     * @memberof UnfulfillablePreviewItem
     */
    itemUnfulfillableReasons?: Array<string>;
}
/**
 * Item information for updating a fulfillment order.
 * @export
 * @interface UpdateFulfillmentOrderItem
 */
export interface UpdateFulfillmentOrderItem {
    /**
     * The seller SKU of the item.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    sellerSku?: string;
    /**
     * Identifies the fulfillment order item to update. Created with a previous call to the `createFulfillmentOrder` operation.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    sellerFulfillmentOrderItemId: string;
    /**
     * The item quantity.
     * @type {number}
     * @memberof UpdateFulfillmentOrderItem
     */
    quantity: number;
    /**
     * A message to the gift recipient, if applicable.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    giftMessage?: string;
    /**
     * Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    displayableComment?: string;
    /**
     * Amazon\'s fulfillment network SKU of the item.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    fulfillmentNetworkSku?: string;
    /**
     * Indicates whether the item is sellable or unsellable.
     * @type {string}
     * @memberof UpdateFulfillmentOrderItem
     */
    orderItemDisposition?: string;
    /**
     * 
     * @type {Money}
     * @memberof UpdateFulfillmentOrderItem
     */
    perUnitDeclaredValue?: Money;
    /**
     * 
     * @type {Money}
     * @memberof UpdateFulfillmentOrderItem
     */
    perUnitPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof UpdateFulfillmentOrderItem
     */
    perUnitTax?: Money;
}
/**
 * The request body schema for the `updateFulfillmentOrder` operation.
 * @export
 * @interface UpdateFulfillmentOrderRequest
 */
export interface UpdateFulfillmentOrderRequest {
    /**
     * The marketplace the fulfillment order is placed against.
     * @type {string}
     * @memberof UpdateFulfillmentOrderRequest
     */
    marketplaceId?: string;
    /**
     * A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of `DisplayableOrderId` should match the order identifier that the seller provides to the recipient. The seller can use the `SellerFulfillmentOrderId` for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
     * @type {string}
     * @memberof UpdateFulfillmentOrderRequest
     */
    displayableOrderId?: string;
    /**
     * Date timestamp
     * @type {string}
     * @memberof UpdateFulfillmentOrderRequest
     */
    displayableOrderDate?: string;
    /**
     * Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
     * @type {string}
     * @memberof UpdateFulfillmentOrderRequest
     */
    displayableOrderComment?: string;
    /**
     * 
     * @type {ShippingSpeedCategory}
     * @memberof UpdateFulfillmentOrderRequest
     */
    shippingSpeedCategory?: ShippingSpeedCategory | 'Standard' | 'Expedited' | 'Priority' | 'ScheduledDelivery';
    /**
     * 
     * @type {Address}
     * @memberof UpdateFulfillmentOrderRequest
     */
    destinationAddress?: Address;
    /**
     * 
     * @type {FulfillmentAction}
     * @memberof UpdateFulfillmentOrderRequest
     */
    fulfillmentAction?: FulfillmentAction | 'Ship' | 'Hold';
    /**
     * 
     * @type {FulfillmentPolicy}
     * @memberof UpdateFulfillmentOrderRequest
     */
    fulfillmentPolicy?: FulfillmentPolicy | 'FillOrKill' | 'FillAll' | 'FillAllAvailable';
    /**
     * The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof UpdateFulfillmentOrderRequest
     */
    shipFromCountryCode?: string;
    /**
     * A list of email addresses that the seller provides that are used by Amazon to send ship-complete notifications to recipients on behalf of the seller.
     * @type {Array<string>}
     * @memberof UpdateFulfillmentOrderRequest
     */
    notificationEmails?: Array<string>;
    /**
     * A list of features and their fulfillment policies to apply to the order.
     * @type {Array<FeatureSettings>}
     * @memberof UpdateFulfillmentOrderRequest
     */
    featureConstraints?: Array<FeatureSettings>;
    /**
     * An array of fulfillment order item information for updating a fulfillment order.
     * @type {Array<UpdateFulfillmentOrderItem>}
     * @memberof UpdateFulfillmentOrderRequest
     */
    items?: Array<UpdateFulfillmentOrderItem>;
}
/**
 * The response schema for the `updateFulfillmentOrder` operation.
 * @export
 * @interface UpdateFulfillmentOrderResponse
 */
export interface UpdateFulfillmentOrderResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateFulfillmentOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * A physical address with varying degrees of precision. A more precise address can provide more accurate results than country code and postal code alone.
 * @export
 * @interface VariablePrecisionAddress
 */
export interface VariablePrecisionAddress {
    /**
     * The first line of the address.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    addressLine1?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    addressLine3?: string;
    /**
     * The city where the person, business, or institution is located. This property should not be used in Japan.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    city?: string;
    /**
     * The district or county where the person, business, or institution is located.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    districtOrCounty?: string;
    /**
     * The state or region where the person, business or institution is located.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    stateOrRegion?: string;
    /**
     * The postal code of the address.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    postalCode: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof VariablePrecisionAddress
     */
    countryCode: string;
}
/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of weight.
     * @type {string}
     * @memberof Weight
     */
    unit: WeightUnitEnum | 'KG' | 'KILOGRAMS' | 'LB' | 'POUNDS';
    /**
     * The weight value.
     * @type {string}
     * @memberof Weight
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitEnum {
    Kg = 'KG',
    Kilograms = 'KILOGRAMS',
    Lb = 'LB',
    Pounds = 'POUNDS'
}


/**
 * FbaOutboundApi - axios parameter creator
 * @export
 */
export const FbaOutboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillmentOrder: async (sellerFulfillmentOrderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerFulfillmentOrderId' is not null or undefined
            assertParamExists('cancelFulfillmentOrder', 'sellerFulfillmentOrderId', sellerFulfillmentOrderId)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/cancel`
                .replace(`{${"sellerFulfillmentOrderId"}}`, encodeURIComponent(String(sellerFulfillmentOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests that Amazon ship items from the seller\'s inventory in Amazon\'s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {CreateFulfillmentOrderRequest} body CreateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillmentOrder: async (body: CreateFulfillmentOrderRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createFulfillmentOrder', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer\&#39;s request to return items.
         * @param {CreateFulfillmentReturnRequest} body CreateFulfillmentReturnRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillmentReturn: async (sellerFulfillmentOrderId: string, body: CreateFulfillmentReturnRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerFulfillmentOrderId' is not null or undefined
            assertParamExists('createFulfillmentReturn', 'sellerFulfillmentOrderId', sellerFulfillmentOrderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createFulfillmentReturn', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/return`
                .replace(`{${"sellerFulfillmentOrderId"}}`, encodeURIComponent(String(sellerFulfillmentOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetDeliveryOffersRequest} body GetDeliveryOffersRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryOffers: async (body: GetDeliveryOffersRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deliveryOffers', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/deliveryOffers`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
         * @param {string} marketplaceId The marketplace for which to return a list of the inventory that is eligible for the specified feature.
         * @param {string} featureName The name of the feature for which to return a list of eligible inventory.
         * @param {string} [nextToken] A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
         * @param {string} [queryStartDate] A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureInventory: async (marketplaceId: string, featureName: string, nextToken?: string, queryStartDate?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getFeatureInventory', 'marketplaceId', marketplaceId)
            // verify required parameter 'featureName' is not null or undefined
            assertParamExists('getFeatureInventory', 'featureName', featureName)
            const localVarPath = `/fba/outbound/2020-07-01/features/inventory/{featureName}`
                .replace(`{${"featureName"}}`, encodeURIComponent(String(featureName)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (queryStartDate !== undefined) {
                localVarQueryParameter['queryStartDate'] = (queryStartDate as any instanceof Date) ?
                    (queryStartDate as any).toISOString() :
                    queryStartDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn\'t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the count.
         * @param {string} featureName The name of the feature.
         * @param {string} sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller\&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureSKU: async (marketplaceId: string, featureName: string, sellerSku: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getFeatureSKU', 'marketplaceId', marketplaceId)
            // verify required parameter 'featureName' is not null or undefined
            assertParamExists('getFeatureSKU', 'featureName', featureName)
            // verify required parameter 'sellerSku' is not null or undefined
            assertParamExists('getFeatureSKU', 'sellerSku', sellerSku)
            const localVarPath = `/fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}`
                .replace(`{${"featureName"}}`, encodeURIComponent(String(featureName)))
                .replace(`{${"sellerSku"}}`, encodeURIComponent(String(sellerSku)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the list of features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures: async (marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getFeatures', 'marketplaceId', marketplaceId)
            const localVarPath = `/fba/outbound/2020-07-01/features`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentOrder: async (sellerFulfillmentOrderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerFulfillmentOrderId' is not null or undefined
            assertParamExists('getFulfillmentOrder', 'sellerFulfillmentOrderId', sellerFulfillmentOrderId)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}`
                .replace(`{${"sellerFulfillmentOrderId"}}`, encodeURIComponent(String(sellerFulfillmentOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetFulfillmentPreviewRequest} body GetFulfillmentPreviewRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentPreview: async (body: GetFulfillmentPreviewRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('getFulfillmentPreview', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageTrackingDetails: async (packageNumber: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'packageNumber' is not null or undefined
            assertParamExists('getPackageTrackingDetails', 'packageNumber', packageNumber)
            const localVarPath = `/fba/outbound/2020-07-01/tracking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageNumber !== undefined) {
                localVarQueryParameter['packageNumber'] = packageNumber;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {string} [queryStartDate] A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
         * @param {string} [nextToken] A string token returned in the response to your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFulfillmentOrders: async (queryStartDate?: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (queryStartDate !== undefined) {
                localVarQueryParameter['queryStartDate'] = (queryStartDate as any instanceof Date) ?
                    (queryStartDate as any).toISOString() :
                    queryStartDate;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerSku The seller SKU for which return reason codes are required.
         * @param {string} [marketplaceId] The marketplace for which the seller wants return reason codes.
         * @param {string} [sellerFulfillmentOrderId] The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
         * @param {string} [language] The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReturnReasonCodes: async (sellerSku: string, marketplaceId?: string, sellerFulfillmentOrderId?: string, language?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerSku' is not null or undefined
            assertParamExists('listReturnReasonCodes', 'sellerSku', sellerSku)
            const localVarPath = `/fba/outbound/2020-07-01/returnReasonCodes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (sellerSku !== undefined) {
                localVarQueryParameter['sellerSku'] = sellerSku;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }

            if (sellerFulfillmentOrderId !== undefined) {
                localVarQueryParameter['sellerFulfillmentOrderId'] = sellerFulfillmentOrderId;
            }

            if (language !== undefined) {
                localVarQueryParameter['language'] = language;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {SubmitFulfillmentOrderStatusUpdateRequest} body The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitFulfillmentOrderStatusUpdate: async (sellerFulfillmentOrderId: string, body: SubmitFulfillmentOrderStatusUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerFulfillmentOrderId' is not null or undefined
            assertParamExists('submitFulfillmentOrderStatusUpdate', 'sellerFulfillmentOrderId', sellerFulfillmentOrderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitFulfillmentOrderStatusUpdate', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status`
                .replace(`{${"sellerFulfillmentOrderId"}}`, encodeURIComponent(String(sellerFulfillmentOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {UpdateFulfillmentOrderRequest} body UpdateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentOrder: async (sellerFulfillmentOrderId: string, body: UpdateFulfillmentOrderRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sellerFulfillmentOrderId' is not null or undefined
            assertParamExists('updateFulfillmentOrder', 'sellerFulfillmentOrderId', sellerFulfillmentOrderId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateFulfillmentOrder', 'body', body)
            const localVarPath = `/fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}`
                .replace(`{${"sellerFulfillmentOrderId"}}`, encodeURIComponent(String(sellerFulfillmentOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FbaOutboundApi - functional programming interface
 * @export
 */
export const FbaOutboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FbaOutboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelFulfillmentOrder(sellerFulfillmentOrderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelFulfillmentOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelFulfillmentOrder(sellerFulfillmentOrderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requests that Amazon ship items from the seller\'s inventory in Amazon\'s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {CreateFulfillmentOrderRequest} body CreateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFulfillmentOrder(body: CreateFulfillmentOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFulfillmentOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFulfillmentOrder(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer\&#39;s request to return items.
         * @param {CreateFulfillmentReturnRequest} body CreateFulfillmentReturnRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFulfillmentReturn(sellerFulfillmentOrderId: string, body: CreateFulfillmentReturnRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateFulfillmentReturnResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFulfillmentReturn(sellerFulfillmentOrderId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetDeliveryOffersRequest} body GetDeliveryOffersRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deliveryOffers(body: GetDeliveryOffersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeliveryOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deliveryOffers(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
         * @param {string} marketplaceId The marketplace for which to return a list of the inventory that is eligible for the specified feature.
         * @param {string} featureName The name of the feature for which to return a list of eligible inventory.
         * @param {string} [nextToken] A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
         * @param {string} [queryStartDate] A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureInventory(marketplaceId: string, featureName: string, nextToken?: string, queryStartDate?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeatureInventoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureInventory(marketplaceId, featureName, nextToken, queryStartDate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn\'t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the count.
         * @param {string} featureName The name of the feature.
         * @param {string} sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller\&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureSKU(marketplaceId: string, featureName: string, sellerSku: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeatureSkuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureSKU(marketplaceId, featureName, sellerSku, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the list of features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatures(marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFeaturesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatures(marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFulfillmentOrder(sellerFulfillmentOrderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFulfillmentOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFulfillmentOrder(sellerFulfillmentOrderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetFulfillmentPreviewRequest} body GetFulfillmentPreviewRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFulfillmentPreview(body: GetFulfillmentPreviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetFulfillmentPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFulfillmentPreview(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPackageTrackingDetails(packageNumber: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPackageTrackingDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPackageTrackingDetails(packageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {string} [queryStartDate] A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
         * @param {string} [nextToken] A string token returned in the response to your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllFulfillmentOrders(queryStartDate?: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListAllFulfillmentOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllFulfillmentOrders(queryStartDate, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerSku The seller SKU for which return reason codes are required.
         * @param {string} [marketplaceId] The marketplace for which the seller wants return reason codes.
         * @param {string} [sellerFulfillmentOrderId] The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
         * @param {string} [language] The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listReturnReasonCodes(sellerSku: string, marketplaceId?: string, sellerFulfillmentOrderId?: string, language?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListReturnReasonCodesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listReturnReasonCodes(sellerSku, marketplaceId, sellerFulfillmentOrderId, language, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {SubmitFulfillmentOrderStatusUpdateRequest} body The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId: string, body: SubmitFulfillmentOrderStatusUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitFulfillmentOrderStatusUpdateResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {UpdateFulfillmentOrderRequest} body UpdateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateFulfillmentOrder(sellerFulfillmentOrderId: string, body: UpdateFulfillmentOrderRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateFulfillmentOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateFulfillmentOrder(sellerFulfillmentOrderId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FbaOutboundApi - factory interface
 * @export
 */
export const FbaOutboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FbaOutboundApiFp(configuration)
    return {
        /**
         * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelFulfillmentOrder(sellerFulfillmentOrderId: string, options?: any): AxiosPromise<CancelFulfillmentOrderResponse> {
            return localVarFp.cancelFulfillmentOrder(sellerFulfillmentOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests that Amazon ship items from the seller\'s inventory in Amazon\'s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {CreateFulfillmentOrderRequest} body CreateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillmentOrder(body: CreateFulfillmentOrderRequest, options?: any): AxiosPromise<CreateFulfillmentOrderResponse> {
            return localVarFp.createFulfillmentOrder(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer\&#39;s request to return items.
         * @param {CreateFulfillmentReturnRequest} body CreateFulfillmentReturnRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFulfillmentReturn(sellerFulfillmentOrderId: string, body: CreateFulfillmentReturnRequest, options?: any): AxiosPromise<CreateFulfillmentReturnResponse> {
            return localVarFp.createFulfillmentReturn(sellerFulfillmentOrderId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetDeliveryOffersRequest} body GetDeliveryOffersRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deliveryOffers(body: GetDeliveryOffersRequest, options?: any): AxiosPromise<GetDeliveryOffersResponse> {
            return localVarFp.deliveryOffers(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
         * @param {string} marketplaceId The marketplace for which to return a list of the inventory that is eligible for the specified feature.
         * @param {string} featureName The name of the feature for which to return a list of eligible inventory.
         * @param {string} [nextToken] A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
         * @param {string} [queryStartDate] A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureInventory(marketplaceId: string, featureName: string, nextToken?: string, queryStartDate?: string, options?: any): AxiosPromise<GetFeatureInventoryResponse> {
            return localVarFp.getFeatureInventory(marketplaceId, featureName, nextToken, queryStartDate, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn\'t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the count.
         * @param {string} featureName The name of the feature.
         * @param {string} sellerSku Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller\&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureSKU(marketplaceId: string, featureName: string, sellerSku: string, options?: any): AxiosPromise<GetFeatureSkuResponse> {
            return localVarFp.getFeatureSKU(marketplaceId, featureName, sellerSku, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The marketplace for which to return the list of features.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatures(marketplaceId: string, options?: any): AxiosPromise<GetFeaturesResponse> {
            return localVarFp.getFeatures(marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentOrder(sellerFulfillmentOrderId: string, options?: any): AxiosPromise<GetFulfillmentOrderResponse> {
            return localVarFp.getFulfillmentOrder(sellerFulfillmentOrderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetFulfillmentPreviewRequest} body GetFulfillmentPreviewRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFulfillmentPreview(body: GetFulfillmentPreviewRequest, options?: any): AxiosPromise<GetFulfillmentPreviewResponse> {
            return localVarFp.getFulfillmentPreview(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} packageNumber The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPackageTrackingDetails(packageNumber: number, options?: any): AxiosPromise<GetPackageTrackingDetailsResponse> {
            return localVarFp.getPackageTrackingDetails(packageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
         * @param {string} [queryStartDate] A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
         * @param {string} [nextToken] A string token returned in the response to your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllFulfillmentOrders(queryStartDate?: string, nextToken?: string, options?: any): AxiosPromise<ListAllFulfillmentOrdersResponse> {
            return localVarFp.listAllFulfillmentOrders(queryStartDate, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerSku The seller SKU for which return reason codes are required.
         * @param {string} [marketplaceId] The marketplace for which the seller wants return reason codes.
         * @param {string} [sellerFulfillmentOrderId] The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
         * @param {string} [language] The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listReturnReasonCodes(sellerSku: string, marketplaceId?: string, sellerFulfillmentOrderId?: string, language?: string, options?: any): AxiosPromise<ListReturnReasonCodesResponse> {
            return localVarFp.listReturnReasonCodes(sellerSku, marketplaceId, sellerFulfillmentOrderId, language, options).then((request) => request(axios, basePath));
        },
        /**
         * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {SubmitFulfillmentOrderStatusUpdateRequest} body The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId: string, body: SubmitFulfillmentOrderStatusUpdateRequest, options?: any): AxiosPromise<SubmitFulfillmentOrderStatusUpdateResponse> {
            return localVarFp.submitFulfillmentOrderStatusUpdate(sellerFulfillmentOrderId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} sellerFulfillmentOrderId The identifier assigned to the item by the seller when the fulfillment order was created.
         * @param {UpdateFulfillmentOrderRequest} body UpdateFulfillmentOrderRequest parameter
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateFulfillmentOrder(sellerFulfillmentOrderId: string, body: UpdateFulfillmentOrderRequest, options?: any): AxiosPromise<UpdateFulfillmentOrderResponse> {
            return localVarFp.updateFulfillmentOrder(sellerFulfillmentOrderId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelFulfillmentOrder operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiCancelFulfillmentOrderRequest
 */
export interface FbaOutboundApiCancelFulfillmentOrderRequest {
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof FbaOutboundApiCancelFulfillmentOrder
     */
    readonly sellerFulfillmentOrderId: string
}

/**
 * Request parameters for createFulfillmentOrder operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiCreateFulfillmentOrderRequest
 */
export interface FbaOutboundApiCreateFulfillmentOrderRequest {
    /**
     * CreateFulfillmentOrderRequest parameter
     * @type {CreateFulfillmentOrderRequest}
     * @memberof FbaOutboundApiCreateFulfillmentOrder
     */
    readonly body: CreateFulfillmentOrderRequest
}

/**
 * Request parameters for createFulfillmentReturn operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiCreateFulfillmentReturnRequest
 */
export interface FbaOutboundApiCreateFulfillmentReturnRequest {
    /**
     * An identifier assigned by the seller to the fulfillment order at the time it was created. The seller uses their own records to find the correct &#x60;SellerFulfillmentOrderId&#x60; value based on the buyer\&#39;s request to return items.
     * @type {string}
     * @memberof FbaOutboundApiCreateFulfillmentReturn
     */
    readonly sellerFulfillmentOrderId: string

    /**
     * CreateFulfillmentReturnRequest parameter
     * @type {CreateFulfillmentReturnRequest}
     * @memberof FbaOutboundApiCreateFulfillmentReturn
     */
    readonly body: CreateFulfillmentReturnRequest
}

/**
 * Request parameters for deliveryOffers operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiDeliveryOffersRequest
 */
export interface FbaOutboundApiDeliveryOffersRequest {
    /**
     * GetDeliveryOffersRequest parameter
     * @type {GetDeliveryOffersRequest}
     * @memberof FbaOutboundApiDeliveryOffers
     */
    readonly body: GetDeliveryOffersRequest
}

/**
 * Request parameters for getFeatureInventory operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetFeatureInventoryRequest
 */
export interface FbaOutboundApiGetFeatureInventoryRequest {
    /**
     * The marketplace for which to return a list of the inventory that is eligible for the specified feature.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureInventory
     */
    readonly marketplaceId: string

    /**
     * The name of the feature for which to return a list of eligible inventory.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureInventory
     */
    readonly featureName: string

    /**
     * A string token returned in the response to your previous request that is used to return the next response page. A value of null will return the first page.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureInventory
     */
    readonly nextToken?: string

    /**
     * A date that you can use to select inventory that has been updated since a specified date. An update is defined as any change in feature-enabled inventory availability. The date must be in the format yyyy-MM-ddTHH:mm:ss.sssZ
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureInventory
     */
    readonly queryStartDate?: string
}

/**
 * Request parameters for getFeatureSKU operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetFeatureSKURequest
 */
export interface FbaOutboundApiGetFeatureSKURequest {
    /**
     * The marketplace for which to return the count.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureSKU
     */
    readonly marketplaceId: string

    /**
     * The name of the feature.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureSKU
     */
    readonly featureName: string

    /**
     * Used to identify an item in the given marketplace. &#x60;SellerSKU&#x60; is qualified by the seller\&#39;s &#x60;SellerId&#x60;, which is included with every operation that you submit.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatureSKU
     */
    readonly sellerSku: string
}

/**
 * Request parameters for getFeatures operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetFeaturesRequest
 */
export interface FbaOutboundApiGetFeaturesRequest {
    /**
     * The marketplace for which to return the list of features.
     * @type {string}
     * @memberof FbaOutboundApiGetFeatures
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for getFulfillmentOrder operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetFulfillmentOrderRequest
 */
export interface FbaOutboundApiGetFulfillmentOrderRequest {
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof FbaOutboundApiGetFulfillmentOrder
     */
    readonly sellerFulfillmentOrderId: string
}

/**
 * Request parameters for getFulfillmentPreview operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetFulfillmentPreviewRequest
 */
export interface FbaOutboundApiGetFulfillmentPreviewRequest {
    /**
     * GetFulfillmentPreviewRequest parameter
     * @type {GetFulfillmentPreviewRequest}
     * @memberof FbaOutboundApiGetFulfillmentPreview
     */
    readonly body: GetFulfillmentPreviewRequest
}

/**
 * Request parameters for getPackageTrackingDetails operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiGetPackageTrackingDetailsRequest
 */
export interface FbaOutboundApiGetPackageTrackingDetailsRequest {
    /**
     * The unencrypted package identifier returned by the &#x60;getFulfillmentOrder&#x60; operation.
     * @type {number}
     * @memberof FbaOutboundApiGetPackageTrackingDetails
     */
    readonly packageNumber: number
}

/**
 * Request parameters for listAllFulfillmentOrders operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiListAllFulfillmentOrdersRequest
 */
export interface FbaOutboundApiListAllFulfillmentOrdersRequest {
    /**
     * A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.
     * @type {string}
     * @memberof FbaOutboundApiListAllFulfillmentOrders
     */
    readonly queryStartDate?: string

    /**
     * A string token returned in the response to your previous request.
     * @type {string}
     * @memberof FbaOutboundApiListAllFulfillmentOrders
     */
    readonly nextToken?: string
}

/**
 * Request parameters for listReturnReasonCodes operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiListReturnReasonCodesRequest
 */
export interface FbaOutboundApiListReturnReasonCodesRequest {
    /**
     * The seller SKU for which return reason codes are required.
     * @type {string}
     * @memberof FbaOutboundApiListReturnReasonCodes
     */
    readonly sellerSku: string

    /**
     * The marketplace for which the seller wants return reason codes.
     * @type {string}
     * @memberof FbaOutboundApiListReturnReasonCodes
     */
    readonly marketplaceId?: string

    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created. The service uses this value to determine the marketplace for which the seller wants return reason codes.
     * @type {string}
     * @memberof FbaOutboundApiListReturnReasonCodes
     */
    readonly sellerFulfillmentOrderId?: string

    /**
     * The language that the &#x60;TranslatedDescription&#x60; property of the &#x60;ReasonCodeDetails&#x60; response object should be translated into.
     * @type {string}
     * @memberof FbaOutboundApiListReturnReasonCodes
     */
    readonly language?: string
}

/**
 * Request parameters for submitFulfillmentOrderStatusUpdate operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiSubmitFulfillmentOrderStatusUpdateRequest
 */
export interface FbaOutboundApiSubmitFulfillmentOrderStatusUpdateRequest {
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof FbaOutboundApiSubmitFulfillmentOrderStatusUpdate
     */
    readonly sellerFulfillmentOrderId: string

    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {SubmitFulfillmentOrderStatusUpdateRequest}
     * @memberof FbaOutboundApiSubmitFulfillmentOrderStatusUpdate
     */
    readonly body: SubmitFulfillmentOrderStatusUpdateRequest
}

/**
 * Request parameters for updateFulfillmentOrder operation in FbaOutboundApi.
 * @export
 * @interface FbaOutboundApiUpdateFulfillmentOrderRequest
 */
export interface FbaOutboundApiUpdateFulfillmentOrderRequest {
    /**
     * The identifier assigned to the item by the seller when the fulfillment order was created.
     * @type {string}
     * @memberof FbaOutboundApiUpdateFulfillmentOrder
     */
    readonly sellerFulfillmentOrderId: string

    /**
     * UpdateFulfillmentOrderRequest parameter
     * @type {UpdateFulfillmentOrderRequest}
     * @memberof FbaOutboundApiUpdateFulfillmentOrder
     */
    readonly body: UpdateFulfillmentOrderRequest
}

/**
 * FbaOutboundApi - object-oriented interface
 * @export
 * @class FbaOutboundApi
 * @extends {BaseAPI}
 */
export class FbaOutboundApi extends BaseAPI {
    /**
     * Requests that Amazon stop attempting to fulfill the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiCancelFulfillmentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public cancelFulfillmentOrder(requestParameters: FbaOutboundApiCancelFulfillmentOrderRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).cancelFulfillmentOrder(requestParameters.sellerFulfillmentOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requests that Amazon ship items from the seller\'s inventory in Amazon\'s fulfillment network to a destination address.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {FbaOutboundApiCreateFulfillmentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public createFulfillmentOrder(requestParameters: FbaOutboundApiCreateFulfillmentOrderRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).createFulfillmentOrder(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a fulfillment return.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiCreateFulfillmentReturnRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public createFulfillmentReturn(requestParameters: FbaOutboundApiCreateFulfillmentReturnRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).createFulfillmentReturn(requestParameters.sellerFulfillmentOrderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns delivery options that include an estimated delivery date and offer expiration, based on criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiDeliveryOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public deliveryOffers(requestParameters: FbaOutboundApiDeliveryOffersRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).deliveryOffers(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of inventory items that are eligible for the fulfillment feature you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)..
     * @param {FbaOutboundApiGetFeatureInventoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getFeatureInventory(requestParameters: FbaOutboundApiGetFeatureInventoryRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getFeatureInventory(requestParameters.marketplaceId, requestParameters.featureName, requestParameters.nextToken, requestParameters.queryStartDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the number of items with the sellerSKU you specify that can have orders fulfilled using the specified feature. Note that if the sellerSKU isn\'t eligible, the response will contain an empty skuInfo object. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiGetFeatureSKURequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getFeatureSKU(requestParameters: FbaOutboundApiGetFeatureSKURequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getFeatureSKU(requestParameters.marketplaceId, requestParameters.featureName, requestParameters.sellerSku, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of features available for Multi-Channel Fulfillment orders in the marketplace you specify, and whether the seller for which you made the call is enrolled for each feature.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiGetFeaturesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getFeatures(requestParameters: FbaOutboundApiGetFeaturesRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getFeatures(requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the fulfillment order indicated by the specified order identifier.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiGetFulfillmentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getFulfillmentOrder(requestParameters: FbaOutboundApiGetFulfillmentOrderRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getFulfillmentOrder(requestParameters.sellerFulfillmentOrderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of fulfillment order previews based on shipping criteria that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiGetFulfillmentPreviewRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getFulfillmentPreview(requestParameters: FbaOutboundApiGetFulfillmentPreviewRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getFulfillmentPreview(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns delivery tracking information for a package in an outbound shipment for a Multi-Channel Fulfillment order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiGetPackageTrackingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public getPackageTrackingDetails(requestParameters: FbaOutboundApiGetPackageTrackingDetailsRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).getPackageTrackingDetails(requestParameters.packageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of fulfillment orders fulfilled after (or at) a specified date-time, or indicated by the next token parameter.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api)
     * @param {FbaOutboundApiListAllFulfillmentOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public listAllFulfillmentOrders(requestParameters: FbaOutboundApiListAllFulfillmentOrdersRequest = {}, options?: any) {
        return FbaOutboundApiFp(this.configuration).listAllFulfillmentOrders(requestParameters.queryStartDate, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of return reason codes for a seller SKU in a given marketplace. The parameters for this operation may contain special characters that require URL encoding. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiListReturnReasonCodesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public listReturnReasonCodes(requestParameters: FbaOutboundApiListReturnReasonCodesRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).listReturnReasonCodes(requestParameters.sellerSku, requestParameters.marketplaceId, requestParameters.sellerFulfillmentOrderId, requestParameters.language, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Requests that Amazon update the status of an order in the sandbox testing environment. This is a sandbox-only operation and must be directed to a sandbox endpoint. Refer to [Fulfillment Outbound Dynamic Sandbox Guide](https://developer-docs.amazon.com/sp-api/docs/fulfillment-outbound-dynamic-sandbox-guide) and [Selling Partner API sandbox](https://developer-docs.amazon.com/sp-api/docs/the-selling-partner-api-sandbox) for more information.
     * @param {FbaOutboundApiSubmitFulfillmentOrderStatusUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public submitFulfillmentOrderStatusUpdate(requestParameters: FbaOutboundApiSubmitFulfillmentOrderStatusUpdateRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).submitFulfillmentOrderStatusUpdate(requestParameters.sellerFulfillmentOrderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates and/or requests shipment for a fulfillment order with an order hold on it.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaOutboundApiUpdateFulfillmentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaOutboundApi
     */
    public updateFulfillmentOrder(requestParameters: FbaOutboundApiUpdateFulfillmentOrderRequest, options?: any) {
        return FbaOutboundApiFp(this.configuration).updateFulfillmentOrder(requestParameters.sellerFulfillmentOrderId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


