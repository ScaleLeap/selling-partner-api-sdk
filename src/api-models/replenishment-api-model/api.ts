/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Replenishment
 * The Selling Partner API for Replenishment (Replenishment API) provides programmatic access to replenishment program metrics and offers. These programs provide recurring delivery (automatic or manual) of any replenishable item at a frequency chosen by the customer.
 *
 * The version of the OpenAPI document: 2022-11-07
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The time period used to group data in the response. Note that this is only valid for the performance time period type.
 * @export
 * @enum {string}
 */
export enum AggregationFrequency {
    Week = 'WEEK',
    Month = 'MONTH',
    Quarter = 'QUARTER',
    Year = 'YEAR'
}

/**
 * The auto-enrollment preference indicates whether the offer is opted-in to or opted-out of Amazon\'s auto-enrollment feature.
 * @export
 * @enum {string}
 */
export enum AutoEnrollmentPreference {
    In = 'OPTED_IN',
    Out = 'OPTED_OUT'
}

/**
 * The discount funding on the offer.
 * @export
 * @interface DiscountFunding
 */
export interface DiscountFunding {
    /**
     * Filters the results to only include offers with the percentage specified.
     * @type {Array<number>}
     * @memberof DiscountFunding
     */
    percentage?: Array<number>;
}
/**
 * The current eligibility status of an offer.
 * @export
 * @enum {string}
 */
export enum EligibilityStatus {
    Eligible = 'ELIGIBLE',
    Ineligible = 'INELIGIBLE',
    Suspended = 'SUSPENDED',
    ReplenishmentOnlyOrdering = 'REPLENISHMENT_ONLY_ORDERING'
}

/**
 * The enrollment method used to enroll the offer into the program.
 * @export
 * @enum {string}
 */
export enum EnrollmentMethod {
    Manual = 'MANUAL',
    Automatic = 'AUTOMATIC'
}

/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * The request body for the `getSellingPartnerMetrics` operation.
 * @export
 * @interface GetSellingPartnerMetricsRequest
 */
export interface GetSellingPartnerMetricsRequest {
    /**
     * 
     * @type {AggregationFrequency}
     * @memberof GetSellingPartnerMetricsRequest
     */
    aggregationFrequency?: AggregationFrequency | 'WEEK' | 'MONTH' | 'QUARTER' | 'YEAR';
    /**
     * 
     * @type {TimeInterval}
     * @memberof GetSellingPartnerMetricsRequest
     */
    timeInterval: TimeInterval;
    /**
     * The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.
     * @type {Array<Metric>}
     * @memberof GetSellingPartnerMetricsRequest
     */
    metrics?: Array<(Metric | 'SHIPPED_SUBSCRIPTION_UNITS' | 'TOTAL_SUBSCRIPTIONS_REVENUE' | 'ACTIVE_SUBSCRIPTIONS' | 'NOT_DELIVERED_DUE_TO_OOS' | 'SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE')>;
    /**
     * 
     * @type {TimePeriodType}
     * @memberof GetSellingPartnerMetricsRequest
     */
    timePeriodType: TimePeriodType | 'PERFORMANCE' | 'FORECAST';
    /**
     * The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     * @type {string}
     * @memberof GetSellingPartnerMetricsRequest
     */
    marketplaceId: string;
    /**
     * A list of replenishment program types.
     * @type {Array<ProgramType>}
     * @memberof GetSellingPartnerMetricsRequest
     */
    programTypes: Array<(ProgramType | 'SUBSCRIBE_AND_SAVE')>;
}
/**
 * The response schema for the `getSellingPartnerMetrics` operation.
 * @export
 * @interface GetSellingPartnerMetricsResponse
 */
export interface GetSellingPartnerMetricsResponse {
    /**
     * A list of metrics data for the selling partner.
     * @type {Array<GetSellingPartnerMetricsResponseMetric>}
     * @memberof GetSellingPartnerMetricsResponse
     */
    metrics?: Array<GetSellingPartnerMetricsResponseMetric>;
}
/**
 * An object which contains metric data for a selling partner.
 * @export
 * @interface GetSellingPartnerMetricsResponseMetric
 */
export interface GetSellingPartnerMetricsResponseMetric {
    /**
     * The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    notDeliveredDueToOOS?: number;
    /**
     * The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    totalSubscriptionsRevenue?: number;
    /**
     * The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    shippedSubscriptionUnits?: number;
    /**
     * The number of active subscriptions present at the end of the period. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    activeSubscriptions?: number;
    /**
     * The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    subscriberAverageRevenue?: number;
    /**
     * The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    nonSubscriberAverageRevenue?: number;
    /**
     * 
     * @type {TimeInterval}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    timeInterval?: TimeInterval;
    /**
     * The currency code in ISO 4217 format.
     * @type {string}
     * @memberof GetSellingPartnerMetricsResponseMetric
     */
    currencyCode?: string;
}
/**
 * The request body for the `listOfferMetrics` operation.
 * @export
 * @interface ListOfferMetricsRequest
 */
export interface ListOfferMetricsRequest {
    /**
     * 
     * @type {ListOfferMetricsRequestPagination}
     * @memberof ListOfferMetricsRequest
     */
    pagination: ListOfferMetricsRequestPagination;
    /**
     * 
     * @type {ListOfferMetricsRequestSort}
     * @memberof ListOfferMetricsRequest
     */
    sort?: ListOfferMetricsRequestSort;
    /**
     * 
     * @type {ListOfferMetricsRequestFilters}
     * @memberof ListOfferMetricsRequest
     */
    filters: ListOfferMetricsRequestFilters;
}
/**
 * Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
 * @export
 * @interface ListOfferMetricsRequestFilters
 */
export interface ListOfferMetricsRequestFilters {
    /**
     * 
     * @type {AggregationFrequency}
     * @memberof ListOfferMetricsRequestFilters
     */
    aggregationFrequency?: AggregationFrequency | 'WEEK' | 'MONTH' | 'QUARTER' | 'YEAR';
    /**
     * 
     * @type {TimeInterval}
     * @memberof ListOfferMetricsRequestFilters
     */
    timeInterval: TimeInterval;
    /**
     * 
     * @type {TimePeriodType}
     * @memberof ListOfferMetricsRequestFilters
     */
    timePeriodType: TimePeriodType | 'PERFORMANCE' | 'FORECAST';
    /**
     * The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     * @type {string}
     * @memberof ListOfferMetricsRequestFilters
     */
    marketplaceId: string;
    /**
     * A list of replenishment program types.
     * @type {Array<ProgramType>}
     * @memberof ListOfferMetricsRequestFilters
     */
    programTypes: Array<(ProgramType | 'SUBSCRIBE_AND_SAVE')>;
    /**
     * A list of Amazon Standard Identification Numbers (ASINs).
     * @type {Array<string>}
     * @memberof ListOfferMetricsRequestFilters
     */
    asins?: Array<string>;
}
/**
 * Use these parameters to paginate through the response.
 * @export
 * @interface ListOfferMetricsRequestPagination
 */
export interface ListOfferMetricsRequestPagination {
    /**
     * The maximum number of results to return in the response.
     * @type {number}
     * @memberof ListOfferMetricsRequestPagination
     */
    limit: number;
    /**
     * The offset from which to retrieve the number of results specified by the `limit` value. The first result is at offset 0.
     * @type {number}
     * @memberof ListOfferMetricsRequestPagination
     */
    offset: number;
}
/**
 * Use these parameters to sort the response.
 * @export
 * @interface ListOfferMetricsRequestSort
 */
export interface ListOfferMetricsRequestSort {
    /**
     * 
     * @type {SortOrder}
     * @memberof ListOfferMetricsRequestSort
     */
    order: SortOrder | 'ASC' | 'DESC';
    /**
     * 
     * @type {ListOfferMetricsSortKey}
     * @memberof ListOfferMetricsRequestSort
     */
    key: ListOfferMetricsSortKey | 'SHIPPED_SUBSCRIPTION_UNITS' | 'TOTAL_SUBSCRIPTIONS_REVENUE' | 'ACTIVE_SUBSCRIPTIONS' | 'NEXT_90DAYS_SHIPPED_SUBSCRIPTION_UNITS' | 'NEXT_60DAYS_SHIPPED_SUBSCRIPTION_UNITS' | 'NEXT_30DAYS_SHIPPED_SUBSCRIPTION_UNITS' | 'NEXT_90DAYS_TOTAL_SUBSCRIPTIONS_REVENUE' | 'NEXT_60DAYS_TOTAL_SUBSCRIPTIONS_REVENUE' | 'NEXT_30DAYS_TOTAL_SUBSCRIPTIONS_REVENUE';
}
/**
 * The response schema for the `listOfferMetrics` operation.
 * @export
 * @interface ListOfferMetricsResponse
 */
export interface ListOfferMetricsResponse {
    /**
     * A list of offers and associated metrics.
     * @type {Array<ListOfferMetricsResponseOffer>}
     * @memberof ListOfferMetricsResponse
     */
    offers?: Array<ListOfferMetricsResponseOffer>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListOfferMetricsResponse
     */
    pagination?: PaginationResponse;
}
/**
 * An object which contains offer metrics.
 * @export
 * @interface ListOfferMetricsResponseOffer
 */
export interface ListOfferMetricsResponseOffer {
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof ListOfferMetricsResponseOffer
     */
    asin?: string;
    /**
     * The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    notDeliveredDueToOOS?: number;
    /**
     * The revenue generated from subscriptions over a period of time. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    totalSubscriptionsRevenue?: number;
    /**
     * The number of units shipped to the subscribers over a period of time. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    shippedSubscriptionUnits?: number;
    /**
     * The number of active subscriptions present at the end of the period. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    activeSubscriptions?: number;
    /**
     * The percentage of total program revenue out of total product revenue. Applicable only for the PERFORMANCE timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    revenuePenetration?: number;
    /**
     * The forecasted total subscription revenue for the next 30 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next30DayTotalSubscriptionsRevenue?: number;
    /**
     * The forecasted total subscription revenue for the next 60 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next60DayTotalSubscriptionsRevenue?: number;
    /**
     * The forecasted total subscription revenue for the next 90 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next90DayTotalSubscriptionsRevenue?: number;
    /**
     * The forecasted shipped subscription units for the next 30 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next30DayShippedSubscriptionUnits?: number;
    /**
     * The forecasted shipped subscription units for the next 60 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next60DayShippedSubscriptionUnits?: number;
    /**
     * The forecasted shipped subscription units for the next 90 days. Applicable only for the FORECAST timePeriodType.
     * @type {number}
     * @memberof ListOfferMetricsResponseOffer
     */
    next90DayShippedSubscriptionUnits?: number;
    /**
     * 
     * @type {TimeInterval}
     * @memberof ListOfferMetricsResponseOffer
     */
    timeInterval?: TimeInterval;
    /**
     * The currency code in ISO 4217 format.
     * @type {string}
     * @memberof ListOfferMetricsResponseOffer
     */
    currencyCode?: string;
}
/**
 * The attribute to use to sort the results.
 * @export
 * @enum {string}
 */
export enum ListOfferMetricsSortKey {
    ShippedSubscriptionUnits = 'SHIPPED_SUBSCRIPTION_UNITS',
    TotalSubscriptionsRevenue = 'TOTAL_SUBSCRIPTIONS_REVENUE',
    ActiveSubscriptions = 'ACTIVE_SUBSCRIPTIONS',
    Next90DaysShippedSubscriptionUnits = 'NEXT_90DAYS_SHIPPED_SUBSCRIPTION_UNITS',
    Next60DaysShippedSubscriptionUnits = 'NEXT_60DAYS_SHIPPED_SUBSCRIPTION_UNITS',
    Next30DaysShippedSubscriptionUnits = 'NEXT_30DAYS_SHIPPED_SUBSCRIPTION_UNITS',
    Next90DaysTotalSubscriptionsRevenue = 'NEXT_90DAYS_TOTAL_SUBSCRIPTIONS_REVENUE',
    Next60DaysTotalSubscriptionsRevenue = 'NEXT_60DAYS_TOTAL_SUBSCRIPTIONS_REVENUE',
    Next30DaysTotalSubscriptionsRevenue = 'NEXT_30DAYS_TOTAL_SUBSCRIPTIONS_REVENUE'
}

/**
 * The request body for the `listOffers` operation.
 * @export
 * @interface ListOffersRequest
 */
export interface ListOffersRequest {
    /**
     * 
     * @type {ListOffersRequestPagination}
     * @memberof ListOffersRequest
     */
    pagination: ListOffersRequestPagination;
    /**
     * 
     * @type {ListOffersRequestFilters}
     * @memberof ListOffersRequest
     */
    filters: ListOffersRequestFilters;
    /**
     * 
     * @type {ListOffersRequestSort}
     * @memberof ListOffersRequest
     */
    sort?: ListOffersRequestSort;
}
/**
 * Use these parameters to filter results. Any result must match all of the provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
 * @export
 * @interface ListOffersRequestFilters
 */
export interface ListOffersRequestFilters {
    /**
     * The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     * @type {string}
     * @memberof ListOffersRequestFilters
     */
    marketplaceId: string;
    /**
     * A list of SKUs to filter. This filter is only supported for sellers and not for vendors.
     * @type {Array<string>}
     * @memberof ListOffersRequestFilters
     */
    skus?: Array<string>;
    /**
     * A list of Amazon Standard Identification Numbers (ASINs).
     * @type {Array<string>}
     * @memberof ListOffersRequestFilters
     */
    asins?: Array<string>;
    /**
     * A list of eligibilities associated with an offer.
     * @type {Array<EligibilityStatus>}
     * @memberof ListOffersRequestFilters
     */
    eligibilities?: Array<(EligibilityStatus | 'ELIGIBLE' | 'INELIGIBLE' | 'SUSPENDED' | 'REPLENISHMENT_ONLY_ORDERING')>;
    /**
     * 
     * @type {Preference}
     * @memberof ListOffersRequestFilters
     */
    preferences?: Preference;
    /**
     * 
     * @type {Promotion}
     * @memberof ListOffersRequestFilters
     */
    promotions?: Promotion;
    /**
     * A list of replenishment program types.
     * @type {Array<ProgramType>}
     * @memberof ListOffersRequestFilters
     */
    programTypes: Array<(ProgramType | 'SUBSCRIBE_AND_SAVE')>;
}
/**
 * Use these parameters to paginate through the response.
 * @export
 * @interface ListOffersRequestPagination
 */
export interface ListOffersRequestPagination {
    /**
     * The maximum number of results to return in the response.
     * @type {number}
     * @memberof ListOffersRequestPagination
     */
    limit: number;
    /**
     * The offset from which to retrieve the number of results specified by the `limit` value. The first result is at offset 0.
     * @type {number}
     * @memberof ListOffersRequestPagination
     */
    offset: number;
}
/**
 * Use these parameters to sort the response.
 * @export
 * @interface ListOffersRequestSort
 */
export interface ListOffersRequestSort {
    /**
     * 
     * @type {SortOrder}
     * @memberof ListOffersRequestSort
     */
    order: SortOrder | 'ASC' | 'DESC';
    /**
     * 
     * @type {ListOffersSortKey}
     * @memberof ListOffersRequestSort
     */
    key: ListOffersSortKey | 'ASIN' | 'SELLING_PARTNER_FUNDED_BASE_DISCOUNT_PERCENTAGE' | 'SELLING_PARTNER_FUNDED_TIERED_DISCOUNT_PERCENTAGE' | 'AMAZON_FUNDED_BASE_DISCOUNT_PERCENTAGE' | 'AMAZON_FUNDED_TIERED_DISCOUNT_PERCENTAGE';
}
/**
 * The response schema for the `listOffers` operation.
 * @export
 * @interface ListOffersResponse
 */
export interface ListOffersResponse {
    /**
     * A list of offers.
     * @type {Array<ListOffersResponseOffer>}
     * @memberof ListOffersResponse
     */
    offers?: Array<ListOffersResponseOffer>;
    /**
     * 
     * @type {PaginationResponse}
     * @memberof ListOffersResponse
     */
    pagination?: PaginationResponse;
}
/**
 * An object which contains details about an offer.
 * @export
 * @interface ListOffersResponseOffer
 */
export interface ListOffersResponseOffer {
    /**
     * The SKU. This property is only supported for sellers and not for vendors.
     * @type {string}
     * @memberof ListOffersResponseOffer
     */
    sku?: string;
    /**
     * The Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof ListOffersResponseOffer
     */
    asin?: string;
    /**
     * The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
     * @type {string}
     * @memberof ListOffersResponseOffer
     */
    marketplaceId?: string;
    /**
     * 
     * @type {EligibilityStatus}
     * @memberof ListOffersResponseOffer
     */
    eligibility?: EligibilityStatus | 'ELIGIBLE' | 'INELIGIBLE' | 'SUSPENDED' | 'REPLENISHMENT_ONLY_ORDERING';
    /**
     * 
     * @type {OfferProgramConfiguration}
     * @memberof ListOffersResponseOffer
     */
    offerProgramConfiguration?: OfferProgramConfiguration;
    /**
     * 
     * @type {ProgramType}
     * @memberof ListOffersResponseOffer
     */
    programType?: ProgramType | 'SUBSCRIBE_AND_SAVE';
    /**
     * A list of vendor codes associated with the offer.
     * @type {Array<string>}
     * @memberof ListOffersResponseOffer
     */
    vendorCodes?: Array<string>;
}
/**
 * The attribute to use to sort the results.
 * @export
 * @enum {string}
 */
export enum ListOffersSortKey {
    Asin = 'ASIN',
    SellingPartnerFundedBaseDiscountPercentage = 'SELLING_PARTNER_FUNDED_BASE_DISCOUNT_PERCENTAGE',
    SellingPartnerFundedTieredDiscountPercentage = 'SELLING_PARTNER_FUNDED_TIERED_DISCOUNT_PERCENTAGE',
    AmazonFundedBaseDiscountPercentage = 'AMAZON_FUNDED_BASE_DISCOUNT_PERCENTAGE',
    AmazonFundedTieredDiscountPercentage = 'AMAZON_FUNDED_TIERED_DISCOUNT_PERCENTAGE'
}

/**
 * The metric name and description.
 * @export
 * @enum {string}
 */
export enum Metric {
    ShippedSubscriptionUnits = 'SHIPPED_SUBSCRIPTION_UNITS',
    TotalSubscriptionsRevenue = 'TOTAL_SUBSCRIPTIONS_REVENUE',
    ActiveSubscriptions = 'ACTIVE_SUBSCRIPTIONS',
    NotDeliveredDueToOos = 'NOT_DELIVERED_DUE_TO_OOS',
    SubscriberNonSubscriberAverageRevenue = 'SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The offer program configuration contains a set of program properties for an offer.
 * @export
 * @interface OfferProgramConfiguration
 */
export interface OfferProgramConfiguration {
    /**
     * 
     * @type {OfferProgramConfigurationPreferences}
     * @memberof OfferProgramConfiguration
     */
    preferences?: OfferProgramConfigurationPreferences;
    /**
     * 
     * @type {OfferProgramConfigurationPromotions}
     * @memberof OfferProgramConfiguration
     */
    promotions?: OfferProgramConfigurationPromotions;
    /**
     * 
     * @type {EnrollmentMethod}
     * @memberof OfferProgramConfiguration
     */
    enrollmentMethod?: EnrollmentMethod | 'MANUAL' | 'AUTOMATIC';
}
/**
 * An object which contains the preferences applied to the offer.
 * @export
 * @interface OfferProgramConfigurationPreferences
 */
export interface OfferProgramConfigurationPreferences {
    /**
     * 
     * @type {AutoEnrollmentPreference}
     * @memberof OfferProgramConfigurationPreferences
     */
    autoEnrollment?: AutoEnrollmentPreference | 'OPTED_IN' | 'OPTED_OUT';
}
/**
 * An object which represents all promotions applied to an offer.
 * @export
 * @interface OfferProgramConfigurationPromotions
 */
export interface OfferProgramConfigurationPromotions {
    /**
     * 
     * @type {OfferProgramConfigurationPromotionsDiscountFunding}
     * @memberof OfferProgramConfigurationPromotions
     */
    sellingPartnerFundedBaseDiscount?: OfferProgramConfigurationPromotionsDiscountFunding;
    /**
     * 
     * @type {OfferProgramConfigurationPromotionsDiscountFunding}
     * @memberof OfferProgramConfigurationPromotions
     */
    sellingPartnerFundedTieredDiscount?: OfferProgramConfigurationPromotionsDiscountFunding;
    /**
     * 
     * @type {OfferProgramConfigurationPromotionsDiscountFunding}
     * @memberof OfferProgramConfigurationPromotions
     */
    amazonFundedBaseDiscount?: OfferProgramConfigurationPromotionsDiscountFunding;
    /**
     * 
     * @type {OfferProgramConfigurationPromotionsDiscountFunding}
     * @memberof OfferProgramConfigurationPromotions
     */
    amazonFundedTieredDiscount?: OfferProgramConfigurationPromotionsDiscountFunding;
}
/**
 * A promotional percentage discount applied to the offer.
 * @export
 * @interface OfferProgramConfigurationPromotionsDiscountFunding
 */
export interface OfferProgramConfigurationPromotionsDiscountFunding {
    /**
     * The percentage discount on the offer.
     * @type {number}
     * @memberof OfferProgramConfigurationPromotionsDiscountFunding
     */
    percentage?: number;
}
/**
 * Use these parameters to paginate through the response.
 * @export
 * @interface PaginationResponse
 */
export interface PaginationResponse {
    /**
     * Total number of results matching the given filter criteria.
     * @type {number}
     * @memberof PaginationResponse
     */
    totalResults?: number;
}
/**
 * Offer preferences that you can include in the result filter criteria.
 * @export
 * @interface Preference
 */
export interface Preference {
    /**
     * Filters the results to only include offers with the auto-enrollment preference specified.
     * @type {Array<AutoEnrollmentPreference>}
     * @memberof Preference
     */
    autoEnrollment?: Array<(AutoEnrollmentPreference | 'OPTED_IN' | 'OPTED_OUT')>;
}
/**
 * The replenishment program type.
 * @export
 * @enum {string}
 */
export enum ProgramType {
    SubscribeAndSave = 'SUBSCRIBE_AND_SAVE'
}

/**
 * Offer promotions to include in the result filter criteria.
 * @export
 * @interface Promotion
 */
export interface Promotion {
    /**
     * 
     * @type {DiscountFunding}
     * @memberof Promotion
     */
    sellingPartnerFundedBaseDiscount?: DiscountFunding;
    /**
     * 
     * @type {DiscountFunding}
     * @memberof Promotion
     */
    sellingPartnerFundedTieredDiscount?: DiscountFunding;
    /**
     * 
     * @type {DiscountFunding}
     * @memberof Promotion
     */
    amazonFundedBaseDiscount?: DiscountFunding;
    /**
     * 
     * @type {DiscountFunding}
     * @memberof Promotion
     */
    amazonFundedTieredDiscount?: DiscountFunding;
}
/**
 * The sort order.
 * @export
 * @enum {string}
 */
export enum SortOrder {
    Asc = 'ASC',
    Desc = 'DESC'
}

/**
 * A date-time interval in ISO 8601 format which is used to compute metrics. Only the date is required, but you must pass the complete date and time value. For example, November 11, 2022 should be passed as \"2022-11-07T00:00:00Z\". Note that only data for the trailing 2 years is supported.   **Note**: The `listOfferMetrics` operation only supports a time interval which covers a single unit of the aggregation frequency. For example, for a MONTH aggregation frequency, the duration of the interval between the startDate and endDate can not be more than 1 month.
 * @export
 * @interface TimeInterval
 */
export interface TimeInterval {
    /**
     * When this object is used as a request parameter, the specified startDate is adjusted based on the aggregation frequency.  * For WEEK the metric is computed from the first day of the week (that is, Sunday based on ISO 8601) that contains the startDate. * For MONTH the metric is computed from the first day of the month that contains the startDate. * For QUARTER the metric is computed from the first day of the quarter that contains the startDate. * For YEAR the metric is computed from the first day of the year that contains the startDate.
     * @type {string}
     * @memberof TimeInterval
     */
    startDate: string;
    /**
     * When this object is used as a request parameter, the specified endDate is adjusted based on the aggregation frequency.  * For WEEK the metric is computed up to the last day of the week (that is, Sunday based on ISO 8601) that contains the endDate. * For MONTH, the metric is computed up to the last day that contains the endDate. * For QUARTER the metric is computed up to the last day of the quarter that contains the endDate. * For YEAR the metric is computed up to the last day of the year that contains the endDate.  Note: The end date may be adjusted to a lower value based on the data available in our system.
     * @type {string}
     * @memberof TimeInterval
     */
    endDate: string;
}
/**
 * The time period type that determines whether the metrics requested are backward-looking (performance) or forward-looking (forecast).
 * @export
 * @enum {string}
 */
export enum TimePeriodType {
    Performance = 'PERFORMANCE',
    Forecast = 'FORECAST'
}


/**
 * OffersApi - axios parameter creator
 * @export
 */
export const OffersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfferMetrics: async (body?: ListOfferMetricsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/replenishment/2022-11-07/offers/metrics/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers. Note that this operation only supports sellers at this time.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOffers: async (body?: ListOffersRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/replenishment/2022-11-07/offers/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OffersApi - functional programming interface
 * @export
 */
export const OffersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOfferMetrics(body?: ListOfferMetricsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOfferMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOfferMetrics(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers. Note that this operation only supports sellers at this time.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listOffers(body?: ListOffersRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListOffersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listOffers(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OffersApi - factory interface
 * @export
 */
export const OffersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OffersApiFp(configuration)
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOfferMetricsRequest} [body] The request body for the &#x60;listOfferMetrics&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOfferMetrics(body?: ListOfferMetricsRequest, options?: any): AxiosPromise<ListOfferMetricsResponse> {
            return localVarFp.listOfferMetrics(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the details of a selling partner\'s replenishment program offers. Note that this operation only supports sellers at this time.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListOffersRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listOffers(body?: ListOffersRequest, options?: any): AxiosPromise<ListOffersResponse> {
            return localVarFp.listOffers(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for listOfferMetrics operation in OffersApi.
 * @export
 * @interface OffersApiListOfferMetricsRequest
 */
export interface OffersApiListOfferMetricsRequest {
    /**
     * The request body for the &#x60;listOfferMetrics&#x60; operation.
     * @type {ListOfferMetricsRequest}
     * @memberof OffersApiListOfferMetrics
     */
    readonly body?: ListOfferMetricsRequest
}

/**
 * Request parameters for listOffers operation in OffersApi.
 * @export
 * @interface OffersApiListOffersRequest
 */
export interface OffersApiListOffersRequest {
    /**
     * 
     * @type {ListOffersRequest}
     * @memberof OffersApiListOffers
     */
    readonly body?: ListOffersRequest
}

/**
 * OffersApi - object-oriented interface
 * @export
 * @class OffersApi
 * @extends {BaseAPI}
 */
export class OffersApi extends BaseAPI {
    /**
     * Returns aggregated replenishment program metrics for a selling partner\'s offers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OffersApiListOfferMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public listOfferMetrics(requestParameters: OffersApiListOfferMetricsRequest = {}, options?: any) {
        return OffersApiFp(this.configuration).listOfferMetrics(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the details of a selling partner\'s replenishment program offers. Note that this operation only supports sellers at this time.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {OffersApiListOffersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OffersApi
     */
    public listOffers(requestParameters: OffersApiListOffersRequest = {}, options?: any) {
        return OffersApiFp(this.configuration).listOffers(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SellingpartnersApi - axios parameter creator
 * @export
 */
export const SellingpartnersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellingPartnerMetrics: async (body?: GetSellingPartnerMetricsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/replenishment/2022-11-07/sellingPartners/metrics/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SellingpartnersApi - functional programming interface
 * @export
 */
export const SellingpartnersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SellingpartnersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSellingPartnerMetrics(body?: GetSellingPartnerMetricsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSellingPartnerMetricsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSellingPartnerMetrics(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SellingpartnersApi - factory interface
 * @export
 */
export const SellingpartnersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SellingpartnersApiFp(configuration)
    return {
        /**
         * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {GetSellingPartnerMetricsRequest} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSellingPartnerMetrics(body?: GetSellingPartnerMetricsRequest, options?: any): AxiosPromise<GetSellingPartnerMetricsResponse> {
            return localVarFp.getSellingPartnerMetrics(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getSellingPartnerMetrics operation in SellingpartnersApi.
 * @export
 * @interface SellingpartnersApiGetSellingPartnerMetricsRequest
 */
export interface SellingpartnersApiGetSellingPartnerMetricsRequest {
    /**
     * 
     * @type {GetSellingPartnerMetricsRequest}
     * @memberof SellingpartnersApiGetSellingPartnerMetrics
     */
    readonly body?: GetSellingPartnerMetricsRequest
}

/**
 * SellingpartnersApi - object-oriented interface
 * @export
 * @class SellingpartnersApi
 * @extends {BaseAPI}
 */
export class SellingpartnersApi extends BaseAPI {
    /**
     * Returns aggregated replenishment program metrics for a selling partner.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {SellingpartnersApiGetSellingPartnerMetricsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SellingpartnersApi
     */
    public getSellingPartnerMetrics(requestParameters: SellingpartnersApiGetSellingPartnerMetricsRequest = {}, options?: any) {
        return SellingpartnersApiFp(this.configuration).getSellingPartnerMetrics(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


