/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for FBA inbound operations.
 * The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon\'s fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
 *
 * The version of the OpenAPI document: 2024-03-20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Specific details to identify a place.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * Street address information.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional street address information.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * The city.
     * @type {string}
     * @memberof Address
     */
    city: string;
    /**
     * The name of the business.
     * @type {string}
     * @memberof Address
     */
    companyName?: string;
    /**
     * The country code in two-character ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The name of the individual or business.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The postal code.
     * @type {string}
     * @memberof Address
     */
    postalCode: string;
    /**
     * The state or province code.
     * @type {string}
     * @memberof Address
     */
    stateOrProvinceCode?: string;
}
/**
 * The fulfillment center appointment slot for the transportation option.
 * @export
 * @interface AppointmentSlot
 */
export interface AppointmentSlot {
    /**
     * An identifier to a self-ship appointment slot.
     * @type {string}
     * @memberof AppointmentSlot
     */
    slotId: string;
    /**
     * 
     * @type {AppointmentSlotTime}
     * @memberof AppointmentSlot
     */
    slotTime: AppointmentSlotTime;
}
/**
 * An appointment slot time with a start and end.
 * @export
 * @interface AppointmentSlotTime
 */
export interface AppointmentSlotTime {
    /**
     * The end timestamp of the appointment in UTC.
     * @type {string}
     * @memberof AppointmentSlotTime
     */
    endTime: string;
    /**
     * The start timestamp of the appointment in UTC.
     * @type {string}
     * @memberof AppointmentSlotTime
     */
    startTime: string;
}
/**
 * Contains information about a box that is used in the inbound plan. The box may contain an item and metadata about the box itself.
 * @export
 * @interface Box
 */
export interface Box {
    /**
     * The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box.
     * @type {string}
     * @memberof Box
     */
    boxId?: string;
    /**
     * 
     * @type {Region}
     * @memberof Box
     */
    destinationRegion?: Region;
    /**
     * 
     * @type {Dimensions}
     * @memberof Box
     */
    dimensions?: Dimensions;
    /**
     * Items contained within the box.
     * @type {Array<Item>}
     * @memberof Box
     */
    items?: Array<Item>;
    /**
     * Primary key to uniquely identify a Package (Box or Pallet).
     * @type {string}
     * @memberof Box
     */
    packageId: string;
    /**
     * The number of containers where all other properties like weight or dimensions are identical.
     * @type {number}
     * @memberof Box
     */
    quantity?: number;
    /**
     * Template name of the box.
     * @type {string}
     * @memberof Box
     */
    templateName?: string;
    /**
     * 
     * @type {Weight}
     * @memberof Box
     */
    weight?: Weight;
}
/**
 * Specifies contents in a box. Each `BoxContent` minimally contains a mapping of an MSKU to the prep owner, label owner and its quantity in the box. It also contains the MSKU expiration date and manufacturing lot code if applicable.
 * @export
 * @interface BoxContent
 */
export interface BoxContent {
    /**
     * The date in ISO 8601 format for when the MSKU expires.
     * @type {string}
     * @memberof BoxContent
     */
    expiration?: string;
    /**
     * 
     * @type {LabelOwner}
     * @memberof BoxContent
     */
    labelOwner: LabelOwner | 'AMAZON' | 'SELLER';
    /**
     * The manufacturing lot code.
     * @type {string}
     * @memberof BoxContent
     */
    manufacturingLotCode?: string;
    /**
     * The merchant SKU, a merchant-supplied identifier for a specific SKU.
     * @type {string}
     * @memberof BoxContent
     */
    msku: string;
    /**
     * 
     * @type {PrepOwner}
     * @memberof BoxContent
     */
    prepOwner: PrepOwner | 'AMAZON' | 'SELLER';
    /**
     * The number of units of the given MSKU in the box.
     * @type {number}
     * @memberof BoxContent
     */
    quantityInBox: number;
}
/**
 * Indication of how box content is meant to be provided.
 * @export
 * @enum {string}
 */
export enum BoxContentInformationSource {
    BoxContentProvided = 'BOX_CONTENT_PROVIDED',
    ManualProcess = 'MANUAL_PROCESS',
    Barcode2D = 'BARCODE_2D'
}

/**
 * Input information for a given box.
 * @export
 * @interface BoxInput
 */
export interface BoxInput {
    /**
     * The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID         (which is generated after transportation has been confirmed) and the index of the box.
     * @type {string}
     * @memberof BoxInput
     */
    boxId?: string;
    /**
     * 
     * @type {BoxContentInformationSource}
     * @memberof BoxInput
     */
    contentInformationSource: BoxContentInformationSource | 'BOX_CONTENT_PROVIDED' | 'MANUAL_PROCESS' | 'BARCODE_2D';
    /**
     * The Contents of the box containing a list of MSKUs and their quantity. If `boxAttribute` is `BARCODE_2D` or `MANUAL_PROCESS`, user should provide ALL of the items that could be in the box, without specifying item quantities.
     * @type {Array<BoxContent>}
     * @memberof BoxInput
     */
    contents?: Array<BoxContent>;
    /**
     * 
     * @type {Dimensions}
     * @memberof BoxInput
     */
    dimensions: Dimensions;
    /**
     * The number of containers where all other properties like weight or dimensions are identical.
     * @type {number}
     * @memberof BoxInput
     */
    quantity: number;
    /**
     * The seller-provided name for a \'type\' of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents.
     * @type {string}
     * @memberof BoxInput
     */
    templateName: string;
    /**
     * 
     * @type {Weight}
     * @memberof BoxInput
     */
    weight: Weight;
}
/**
 * The `cancelInboundPlan` response.
 * @export
 * @interface CancelInboundPlanResponse
 */
export interface CancelInboundPlanResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof CancelInboundPlanResponse
     */
    operationId: string;
}
/**
 * The `cancelSelfShipAppointment` request.
 * @export
 * @interface CancelSelfShipAppointmentRequest
 */
export interface CancelSelfShipAppointmentRequest {
    /**
     * 
     * @type {ReasonComment}
     * @memberof CancelSelfShipAppointmentRequest
     */
    reasonComment?: ReasonComment | 'APPOINTMENT_REQUESTED_BY_MISTAKE' | 'VEHICLE_DELAY' | 'SLOT_NOT_SUITABLE' | 'OUTSIDE_CARRIER_BUSINESS_HOURS' | 'UNFAVOURABLE_EXTERNAL_CONDITIONS' | 'PROCUREMENT_DELAY' | 'SHIPPING_PLAN_CHANGED' | 'INCREASED_QUANTITY' | 'OTHER';
}
/**
 * The `cancelSelfShipAppointment` response.
 * @export
 * @interface CancelSelfShipAppointmentResponse
 */
export interface CancelSelfShipAppointmentResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof CancelSelfShipAppointmentResponse
     */
    operationId: string;
}
/**
 * The carrier for the inbound shipment.
 * @export
 * @interface Carrier
 */
export interface Carrier {
    /**
     * The carrier code. For example, USPS or DHLEX.
     * @type {string}
     * @memberof Carrier
     */
    alphaCode?: string;
    /**
     * The name of the carrier.
     * @type {string}
     * @memberof Carrier
     */
    name?: string;
}
/**
 * Contains item identifiers and related tax information.
 * @export
 * @interface ComplianceDetail
 */
export interface ComplianceDetail {
    /**
     * The Amazon Standard Identification Number, which identifies the detail page identifier.
     * @type {string}
     * @memberof ComplianceDetail
     */
    asin?: string;
    /**
     * The Fulfillment Network SKU, which identifies a real fulfillable item with catalog data and condition.
     * @type {string}
     * @memberof ComplianceDetail
     */
    fnsku?: string;
    /**
     * The merchant SKU, a merchant-supplied identifier for a specific SKU.
     * @type {string}
     * @memberof ComplianceDetail
     */
    msku?: string;
    /**
     * 
     * @type {TaxDetails}
     * @memberof ComplianceDetail
     */
    taxDetails?: TaxDetails;
}
/**
 * The `confirmPackingOption` response.
 * @export
 * @interface ConfirmPackingOptionResponse
 */
export interface ConfirmPackingOptionResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof ConfirmPackingOptionResponse
     */
    operationId: string;
}
/**
 * The `confirmPlacementOption` response.
 * @export
 * @interface ConfirmPlacementOptionResponse
 */
export interface ConfirmPlacementOptionResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof ConfirmPlacementOptionResponse
     */
    operationId: string;
}
/**
 * The `confirmTransportationOptions` request.
 * @export
 * @interface ConfirmTransportationOptionsRequest
 */
export interface ConfirmTransportationOptionsRequest {
    /**
     * Information needed to confirm one of the available transportation options.
     * @type {Array<TransportationSelection>}
     * @memberof ConfirmTransportationOptionsRequest
     */
    transportationSelections: Array<TransportationSelection>;
}
/**
 * The `confirmTransportationOptions` response.
 * @export
 * @interface ConfirmTransportationOptionsResponse
 */
export interface ConfirmTransportationOptionsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof ConfirmTransportationOptionsResponse
     */
    operationId: string;
}
/**
 * The seller\'s contact information.
 * @export
 * @interface ContactInformation
 */
export interface ContactInformation {
    /**
     * Email address.
     * @type {string}
     * @memberof ContactInformation
     */
    email?: string;
    /**
     * The name belonging to the contact. This field is required when contact information is being provided for         Less-Than-Truckload (LTL) carrier shipments.
     * @type {string}
     * @memberof ContactInformation
     */
    name?: string;
    /**
     * The phone number of the seller.
     * @type {string}
     * @memberof ContactInformation
     */
    phoneNumber: string;
}
/**
 * The `createInboundPlan` request.
 * @export
 * @interface CreateInboundPlanRequest
 */
export interface CreateInboundPlanRequest {
    /**
     * 
     * @type {ContactInformation}
     * @memberof CreateInboundPlanRequest
     */
    contactInformation: ContactInformation;
    /**
     * Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request.
     * @type {Array<string>}
     * @memberof CreateInboundPlanRequest
     */
    destinationMarketplaces: Array<string>;
    /**
     * Items included in this plan.
     * @type {Array<ItemInput>}
     * @memberof CreateInboundPlanRequest
     */
    items: Array<ItemInput>;
    /**
     * Name for the Inbound Plan. If one isn\'t provided, a default name will be provided.
     * @type {string}
     * @memberof CreateInboundPlanRequest
     */
    name?: string;
    /**
     * 
     * @type {Address}
     * @memberof CreateInboundPlanRequest
     */
    sourceAddress: Address;
}
/**
 * The `createInboundPlan` response.
 * @export
 * @interface CreateInboundPlanResponse
 */
export interface CreateInboundPlanResponse {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof CreateInboundPlanResponse
     */
    inboundPlanId: string;
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof CreateInboundPlanResponse
     */
    operationId: string;
}
/**
 * Currency definition.
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * Decimal value of the currency.
     * @type {number}
     * @memberof Currency
     */
    amount: number;
    /**
     * ISO 4217 standard of a currency code.
     * @type {string}
     * @memberof Currency
     */
    code: string;
}
/**
 * Provide units going to the warehouse.
 * @export
 * @interface CustomPlacementInput
 */
export interface CustomPlacementInput {
    /**
     * Items included while creating Inbound Plan.
     * @type {Array<ItemInput>}
     * @memberof CustomPlacementInput
     */
    items: Array<ItemInput>;
    /**
     * Warehouse Id.
     * @type {string}
     * @memberof CustomPlacementInput
     */
    warehouseId: string;
}
/**
 * Specifies the dates that the seller expects their shipment will be shipped and delivered.
 * @export
 * @interface Dates
 */
export interface Dates {
    /**
     * 
     * @type {Window}
     * @memberof Dates
     */
    deliveryWindow?: Window;
    /**
     * 
     * @type {Window}
     * @memberof Dates
     */
    readyToShipWindow?: Window;
}
/**
 * Measurement of a package dimensions.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * Height.
     * @type {number}
     * @memberof Dimensions
     */
    height: number;
    /**
     * Length.
     * @type {number}
     * @memberof Dimensions
     */
    length: number;
    /**
     * 
     * @type {UnitOfMeasurement}
     * @memberof Dimensions
     */
    unitOfMeasurement: UnitOfMeasurement | 'IN' | 'CM';
    /**
     * Width.
     * @type {number}
     * @memberof Dimensions
     */
    width: number;
}
/**
 * Resource to download the requested document.
 * @export
 * @interface DocumentDownload
 */
export interface DocumentDownload {
    /**
     * The type of download. Can be `URL` or `PDF_BASE64`.
     * @type {string}
     * @memberof DocumentDownload
     */
    downloadType: string;
    /**
     * The timestamp of expiration of the URI. This is in ISO 8601 datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof DocumentDownload
     */
    expiration?: string;
    /**
     * Uniform resource identifier to identify where the document is located.
     * @type {string}
     * @memberof DocumentDownload
     */
    uri: string;
}
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * List of errors.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * The `generatePackingOptions` response.
 * @export
 * @interface GeneratePackingOptionsResponse
 */
export interface GeneratePackingOptionsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof GeneratePackingOptionsResponse
     */
    operationId: string;
}
/**
 * The `generatePlacementOptions` request.
 * @export
 * @interface GeneratePlacementOptionsRequest
 */
export interface GeneratePlacementOptionsRequest {
    /**
     * Custom placements options to be added to the plan.
     * @type {Array<CustomPlacementInput>}
     * @memberof GeneratePlacementOptionsRequest
     */
    customPlacement?: Array<CustomPlacementInput>;
}
/**
 * The `generatePlacementOptions` response.
 * @export
 * @interface GeneratePlacementOptionsResponse
 */
export interface GeneratePlacementOptionsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof GeneratePlacementOptionsResponse
     */
    operationId: string;
}
/**
 * The `generateSelfShipAppointmentSlots` request.
 * @export
 * @interface GenerateSelfShipAppointmentSlotsRequest
 */
export interface GenerateSelfShipAppointmentSlotsRequest {
    /**
     * The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof GenerateSelfShipAppointmentSlotsRequest
     */
    desiredEndDate?: string;
    /**
     * The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof GenerateSelfShipAppointmentSlotsRequest
     */
    desiredStartDate?: string;
}
/**
 * The `generateSelfShipAppointmentSlots` response.
 * @export
 * @interface GenerateSelfShipAppointmentSlotsResponse
 */
export interface GenerateSelfShipAppointmentSlotsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof GenerateSelfShipAppointmentSlotsResponse
     */
    operationId: string;
}
/**
 * The `generateTransportationOptions` request.
 * @export
 * @interface GenerateTransportationOptionsRequest
 */
export interface GenerateTransportationOptionsRequest {
    /**
     * The placement option to generate transportation options for.
     * @type {string}
     * @memberof GenerateTransportationOptionsRequest
     */
    placementOptionId: string;
    /**
     * List of shipment transportation configurations.
     * @type {Array<ShipmentTransportationConfiguration>}
     * @memberof GenerateTransportationOptionsRequest
     */
    shipmentTransportationConfigurations: Array<ShipmentTransportationConfiguration>;
}
/**
 * The `generateTransportationOptions` response.
 * @export
 * @interface GenerateTransportationOptionsResponse
 */
export interface GenerateTransportationOptionsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof GenerateTransportationOptionsResponse
     */
    operationId: string;
}
/**
 * The `getDeliveryChallanDocumentResponse` response.
 * @export
 * @interface GetDeliveryChallanDocumentResponse
 */
export interface GetDeliveryChallanDocumentResponse {
    /**
     * 
     * @type {DocumentDownload}
     * @memberof GetDeliveryChallanDocumentResponse
     */
    documentDownload: DocumentDownload;
}
/**
 * The `getSelfShipAppointmentSlots` response.
 * @export
 * @interface GetSelfShipAppointmentSlotsResponse
 */
export interface GetSelfShipAppointmentSlotsResponse {
    /**
     * 
     * @type {Pagination}
     * @memberof GetSelfShipAppointmentSlotsResponse
     */
    pagination?: Pagination;
    /**
     * 
     * @type {SelfShipAppointmentSlotsAvailability}
     * @memberof GetSelfShipAppointmentSlotsResponse
     */
    selfShipAppointmentSlotsAvailability: SelfShipAppointmentSlotsAvailability;
}
/**
 * The `getInboundOperationStatus` response.
 * @export
 * @interface InboundOperationStatus
 */
export interface InboundOperationStatus {
    /**
     * The name of the operation that was executed in the asynchronous API call.
     * @type {string}
     * @memberof InboundOperationStatus
     */
    operation: string;
    /**
     * The operation Id returned by the asynchronous API call.
     * @type {string}
     * @memberof InboundOperationStatus
     */
    operationId: string;
    /**
     * The problems in the processing of the asynchronous operation.
     * @type {Array<OperationProblem>}
     * @memberof InboundOperationStatus
     */
    operationProblems: Array<OperationProblem>;
    /**
     * 
     * @type {OperationStatus}
     * @memberof InboundOperationStatus
     */
    operationStatus: OperationStatus | 'SUCCESS' | 'FAILED' | 'IN_PROGRESS';
}
/**
 * Inbound plan containing details of the inbound workflow.
 * @export
 * @interface InboundPlan
 */
export interface InboundPlan {
    /**
     * 
     * @type {ContactInformation}
     * @memberof InboundPlan
     */
    contactInformation: ContactInformation;
    /**
     * The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof InboundPlan
     */
    createdAt: string;
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof InboundPlan
     */
    inboundPlanId: string;
    /**
     * The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof InboundPlan
     */
    lastUpdatedAt: string;
    /**
     * Marketplace IDs.
     * @type {Array<string>}
     * @memberof InboundPlan
     */
    marketplaceIds: Array<string>;
    /**
     * The human-readable name of the inbound plan.
     * @type {string}
     * @memberof InboundPlan
     */
    name: string;
    /**
     * Packing options for the inbound plan. This property will be populated when it has been generated via the corresponding endpoint. If there is a chosen placement option, only packing options for that placement option will be returned. If there are confirmed shipments, only packing options for those shipments will be returned. Query the packing option for more details.
     * @type {Array<PackingOptionSummary>}
     * @memberof InboundPlan
     */
    packingOptions?: Array<PackingOptionSummary>;
    /**
     * Placement options for the inbound plan. This property will be populated when it has been generated via the corresponding endpoint. If there is a chosen placement option, that will be the only returned option. Query the placement option for more details.
     * @type {Array<PlacementOptionSummary>}
     * @memberof InboundPlan
     */
    placementOptions?: Array<PlacementOptionSummary>;
    /**
     * Shipment IDs for the inbound plan. This property will be populated when it has been generated via the corresponding endpoint. If there is a chosen placement option, only shipments for that option will be returned. If there are confirmed shipments, only those shipments will be returned. Query the shipment for more details.
     * @type {Array<ShipmentSummary>}
     * @memberof InboundPlan
     */
    shipments?: Array<ShipmentSummary>;
    /**
     * 
     * @type {Address}
     * @memberof InboundPlan
     */
    sourceAddress: Address;
    /**
     * Current status of the inbound plan. Can be `ACTIVE`, `VOIDED`, or `SHIPPED`.
     * @type {string}
     * @memberof InboundPlan
     */
    status: string;
}
/**
 * A light-weight inbound plan.
 * @export
 * @interface InboundPlanSummary
 */
export interface InboundPlanSummary {
    /**
     * 
     * @type {ContactInformation}
     * @memberof InboundPlanSummary
     */
    contactInformation: ContactInformation;
    /**
     * The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof InboundPlanSummary
     */
    createdAt: string;
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof InboundPlanSummary
     */
    inboundPlanId: string;
    /**
     * ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof InboundPlanSummary
     */
    lastUpdatedAt: string;
    /**
     * Marketplace IDs.
     * @type {Array<string>}
     * @memberof InboundPlanSummary
     */
    marketplaceIds: Array<string>;
    /**
     * Human-readable name of the inbound plan.
     * @type {string}
     * @memberof InboundPlanSummary
     */
    name: string;
    /**
     * 
     * @type {Address}
     * @memberof InboundPlanSummary
     */
    sourceAddress: Address;
    /**
     * Current status of the inbound plan. Can be \'ACTIVE\', \'VOIDED\', or \'SHIPPED\'.
     * @type {string}
     * @memberof InboundPlanSummary
     */
    status: string;
}
/**
 * Contains details about cost related modifications to the placement cost.
 * @export
 * @interface Incentive
 */
export interface Incentive {
    /**
     * Description of the incentive.
     * @type {string}
     * @memberof Incentive
     */
    description: string;
    /**
     * Target of the incentive. Can be \'Placement Services\' or \'Fulfillment Fee Discount\'.
     * @type {string}
     * @memberof Incentive
     */
    target: string;
    /**
     * Type of incentive. Can be `FEE` or `DISCOUNT`.
     * @type {string}
     * @memberof Incentive
     */
    type: string;
    /**
     * 
     * @type {Currency}
     * @memberof Incentive
     */
    value: Currency;
}
/**
 * Information associated with a single SKU in the seller\'s catalog.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof Item
     */
    asin: string;
    /**
     * The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.
     * @type {string}
     * @memberof Item
     */
    expiration?: string;
    /**
     * A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
     * @type {string}
     * @memberof Item
     */
    fnsku: string;
    /**
     * Specifies who will label the items. Options include `AMAZON` and `SELLER`.
     * @type {string}
     * @memberof Item
     */
    labelOwner: string;
    /**
     * The manufacturing lot code.
     * @type {string}
     * @memberof Item
     */
    manufacturingLotCode?: string;
    /**
     * The merchant defined SKU ID.
     * @type {string}
     * @memberof Item
     */
    msku: string;
    /**
     * Special preparations that are required for an item.
     * @type {Array<PrepInstruction>}
     * @memberof Item
     */
    prepInstructions: Array<PrepInstruction>;
    /**
     * The number of the specified MSKU.
     * @type {number}
     * @memberof Item
     */
    quantity: number;
}
/**
 * Defines an item\'s input parameters.
 * @export
 * @interface ItemInput
 */
export interface ItemInput {
    /**
     * The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.
     * @type {string}
     * @memberof ItemInput
     */
    expiration?: string;
    /**
     * 
     * @type {LabelOwner}
     * @memberof ItemInput
     */
    labelOwner: LabelOwner | 'AMAZON' | 'SELLER';
    /**
     * The manufacturing lot code.
     * @type {string}
     * @memberof ItemInput
     */
    manufacturingLotCode?: string;
    /**
     * The merchant SKU.
     * @type {string}
     * @memberof ItemInput
     */
    msku: string;
    /**
     * 
     * @type {PrepOwner}
     * @memberof ItemInput
     */
    prepOwner: PrepOwner | 'AMAZON' | 'SELLER';
    /**
     * The number of units of the specified MSKU that will be shipped.
     * @type {number}
     * @memberof ItemInput
     */
    quantity: number;
}
/**
 * Specifies who will label the items. Options include `AMAZON` and `SELLER`.
 * @export
 * @enum {string}
 */
export enum LabelOwner {
    Amazon = 'AMAZON',
    Seller = 'SELLER'
}

/**
 * `listInboundPlanBoxes` response.
 * @export
 * @interface ListInboundPlanBoxesResponse
 */
export interface ListInboundPlanBoxesResponse {
    /**
     * A list of boxes in an inbound plan.
     * @type {Array<Box>}
     * @memberof ListInboundPlanBoxesResponse
     */
    boxes: Array<Box>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListInboundPlanBoxesResponse
     */
    pagination?: Pagination;
}
/**
 * `listInboundPlanItems` response.
 * @export
 * @interface ListInboundPlanItemsResponse
 */
export interface ListInboundPlanItemsResponse {
    /**
     * The items in an inbound plan.
     * @type {Array<Item>}
     * @memberof ListInboundPlanItemsResponse
     */
    items: Array<Item>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListInboundPlanItemsResponse
     */
    pagination?: Pagination;
}
/**
 * `listInboundPlanPallets` response.
 * @export
 * @interface ListInboundPlanPalletsResponse
 */
export interface ListInboundPlanPalletsResponse {
    /**
     * 
     * @type {Pagination}
     * @memberof ListInboundPlanPalletsResponse
     */
    pagination?: Pagination;
    /**
     * The pallets in an inbound plan.
     * @type {Array<Pallet>}
     * @memberof ListInboundPlanPalletsResponse
     */
    pallets: Array<Pallet>;
}
/**
 * `listInboundPlans` response.
 * @export
 * @interface ListInboundPlansResponse
 */
export interface ListInboundPlansResponse {
    /**
     * A list of inbound plans with minimal information.
     * @type {Array<InboundPlanSummary>}
     * @memberof ListInboundPlansResponse
     */
    inboundPlans?: Array<InboundPlanSummary>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListInboundPlansResponse
     */
    pagination?: Pagination;
}
/**
 * `listItemComplianceDetails` response.
 * @export
 * @interface ListItemComplianceDetailsResponse
 */
export interface ListItemComplianceDetailsResponse {
    /**
     * List of compliance details.
     * @type {Array<ComplianceDetail>}
     * @memberof ListItemComplianceDetailsResponse
     */
    complianceDetails?: Array<ComplianceDetail>;
}
/**
 * `listPackingGroupItems` response.
 * @export
 * @interface ListPackingGroupItemsResponse
 */
export interface ListPackingGroupItemsResponse {
    /**
     * Provides the information about the list of items in the inbound plan.
     * @type {Array<Item>}
     * @memberof ListPackingGroupItemsResponse
     */
    items: Array<Item>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListPackingGroupItemsResponse
     */
    pagination?: Pagination;
}
/**
 * `listPackingOptions` response.
 * @export
 * @interface ListPackingOptionsResponse
 */
export interface ListPackingOptionsResponse {
    /**
     * List of packing options.
     * @type {Array<PackingOption>}
     * @memberof ListPackingOptionsResponse
     */
    packingOptions: Array<PackingOption>;
    /**
     * 
     * @type {Pagination}
     * @memberof ListPackingOptionsResponse
     */
    pagination?: Pagination;
}
/**
 * `listPlacementOptions` response.
 * @export
 * @interface ListPlacementOptionsResponse
 */
export interface ListPlacementOptionsResponse {
    /**
     * 
     * @type {Pagination}
     * @memberof ListPlacementOptionsResponse
     */
    pagination?: Pagination;
    /**
     * Placement options generated for the inbound plan.
     * @type {Array<PlacementOption>}
     * @memberof ListPlacementOptionsResponse
     */
    placementOptions: Array<PlacementOption>;
}
/**
 * `listTransportationOptions` response.
 * @export
 * @interface ListTransportationOptionsResponse
 */
export interface ListTransportationOptionsResponse {
    /**
     * 
     * @type {Pagination}
     * @memberof ListTransportationOptionsResponse
     */
    pagination?: Pagination;
    /**
     * Transportation options generated for the placement option.
     * @type {Array<TransportationOption>}
     * @memberof ListTransportationOptionsResponse
     */
    transportationOptions: Array<TransportationOption>;
}
/**
 * Contains information related to Less-Than-Truckload (LTL) shipment tracking.
 * @export
 * @interface LtlTrackingDetail
 */
export interface LtlTrackingDetail {
    /**
     * The number of the carrier shipment acknowledgement document.
     * @type {string}
     * @memberof LtlTrackingDetail
     */
    billOfLadingNumber?: string;
    /**
     * The number associated with the freight bill.
     * @type {Array<string>}
     * @memberof LtlTrackingDetail
     */
    freightBillNumber?: Array<string>;
}
/**
 * Contains input information to update Less-Than-Truckload (LTL) tracking information.
 * @export
 * @interface LtlTrackingDetailInput
 */
export interface LtlTrackingDetailInput {
    /**
     * The number of the carrier shipment acknowledgement document.
     * @type {string}
     * @memberof LtlTrackingDetailInput
     */
    billOfLadingNumber?: string;
    /**
     * Number associated with the freight bill.
     * @type {Array<string>}
     * @memberof LtlTrackingDetailInput
     */
    freightBillNumber: Array<string>;
}
/**
 * Error object containing information about what went wrong.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
}
/**
 * A problem with additional properties persisted to an operation.
 * @export
 * @interface OperationProblem
 */
export interface OperationProblem {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof OperationProblem
     */
    code: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof OperationProblem
     */
    details?: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof OperationProblem
     */
    message: string;
    /**
     * The severity of the problem. Can be \'WARNING\', or \'ERROR\'.
     * @type {string}
     * @memberof OperationProblem
     */
    severity: string;
}
/**
 * The status of an operation.
 * @export
 * @enum {string}
 */
export enum OperationStatus {
    Success = 'SUCCESS',
    Failed = 'FAILED',
    InProgress = 'IN_PROGRESS'
}

/**
 * Packing information for the inbound plan.
 * @export
 * @interface PackageGroupingInput
 */
export interface PackageGroupingInput {
    /**
     * Box level information being provided.
     * @type {Array<BoxInput>}
     * @memberof PackageGroupingInput
     */
    boxes: Array<BoxInput>;
    /**
     * The ID of the `packingGroup` that packages are grouped according to. The `PackingGroupId` can only be provided before placement confirmation, and it must belong to the confirmed `PackingOption`. One of `ShipmentId` or `PackingGroupId` must be provided with every request.
     * @type {string}
     * @memberof PackageGroupingInput
     */
    packingGroupId?: string;
    /**
     * The ID of the shipment that packages are grouped according to. The `ShipmentId` can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of `ShipmentId` or `PackingGroupId` must be provided with every request.
     * @type {string}
     * @memberof PackageGroupingInput
     */
    shipmentId?: string;
}
/**
 * A packing option contains a set of pack groups plus additional information about the packing option, such as any discounts or fees if it\'s selected.
 * @export
 * @interface PackingOption
 */
export interface PackingOption {
    /**
     * Discount for the offered option.
     * @type {Array<Incentive>}
     * @memberof PackingOption
     */
    discounts: Array<Incentive>;
    /**
     * The timestamp at which this packing option becomes no longer valid. This is in ISO 8601 datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof PackingOption
     */
    expiration?: string;
    /**
     * Fee for the offered option.
     * @type {Array<Incentive>}
     * @memberof PackingOption
     */
    fees: Array<Incentive>;
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof PackingOption
     */
    inboundPlanId: string;
    /**
     * Packing group IDs.
     * @type {Array<string>}
     * @memberof PackingOption
     */
    packingGroups: Array<string>;
    /**
     * Identifier to a packing option.
     * @type {string}
     * @memberof PackingOption
     */
    packingOptionId: string;
    /**
     * The status of the packing option. Can be `OFFERED`, `ACCEPTED`, or `EXPIRED`.
     * @type {string}
     * @memberof PackingOption
     */
    status: string;
    /**
     * List of supported shipping modes.
     * @type {Array<ShippingConfiguration>}
     * @memberof PackingOption
     */
    supportedShippingConfigurations: Array<ShippingConfiguration>;
}
/**
 * Summary information about a packing option.
 * @export
 * @interface PackingOptionSummary
 */
export interface PackingOptionSummary {
    /**
     * Identifier to a packing option.
     * @type {string}
     * @memberof PackingOptionSummary
     */
    packingOptionId: string;
    /**
     * The status of a packing option. Can be \'OFFERED\', \'ACCEPTED\', or \'EXPIRED\'.
     * @type {string}
     * @memberof PackingOptionSummary
     */
    status: string;
}
/**
 * Contains tokens to fetch from a certain page.
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * When present, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
}
/**
 * Contains information about a pallet that is used in the inbound plan. The pallet is a container that holds multiple items or boxes.
 * @export
 * @interface Pallet
 */
export interface Pallet {
    /**
     * 
     * @type {Dimensions}
     * @memberof Pallet
     */
    dimensions?: Dimensions;
    /**
     * Primary key to uniquely identify a Package (Box or Pallet).
     * @type {string}
     * @memberof Pallet
     */
    packageId: string;
    /**
     * The number of containers where all other properties like weight or dimensions are identical.
     * @type {number}
     * @memberof Pallet
     */
    quantity?: number;
    /**
     * 
     * @type {Stackability}
     * @memberof Pallet
     */
    stackability?: Stackability | 'STACKABLE' | 'NON_STACKABLE';
    /**
     * 
     * @type {Weight}
     * @memberof Pallet
     */
    weight?: Weight;
}
/**
 * Pallet information, including weight, dimensions, quantity, stackability, freight class, and declared value.
 * @export
 * @interface PalletInformation
 */
export interface PalletInformation {
    /**
     * 
     * @type {Currency}
     * @memberof PalletInformation
     */
    declaredValue?: Currency;
    /**
     * Freight class. Can be `NONE`, `FC_50`, `FC_55`, `FC_60`, `FC_65`, `FC_70`, `FC_77_5`, `FC_85`, `FC_92_5`, `FC_100`, `FC_110`, `FC_125`, `FC_150`, `FC_175`, `FC_200`, `FC_250`, `FC_300`, `FC_400`, or `FC_500`.
     * @type {string}
     * @memberof PalletInformation
     */
    freightClass?: string;
    /**
     * Set pallet configuration for Less-Than-Truckload (LTL).
     * @type {Array<PalletInput>}
     * @memberof PalletInformation
     */
    pallets: Array<PalletInput>;
}
/**
 * Set pallet configuration for Less-Than-Truckload (LTL).
 * @export
 * @interface PalletInput
 */
export interface PalletInput {
    /**
     * 
     * @type {Dimensions}
     * @memberof PalletInput
     */
    dimensions?: Dimensions;
    /**
     * The number of containers where all other properties like weight or dimensions are identical.
     * @type {number}
     * @memberof PalletInput
     */
    quantity: number;
    /**
     * 
     * @type {Stackability}
     * @memberof PalletInput
     */
    stackability?: Stackability | 'STACKABLE' | 'NON_STACKABLE';
    /**
     * 
     * @type {Weight}
     * @memberof PalletInput
     */
    weight?: Weight;
}
/**
 * Contains information pertaining to the placement of the contents of an inbound plan and the related costs.
 * @export
 * @interface PlacementOption
 */
export interface PlacementOption {
    /**
     * Discount for the offered option.
     * @type {Array<Incentive>}
     * @memberof PlacementOption
     */
    discounts: Array<Incentive>;
    /**
     * The expiration date of the placement option. This is in ISO 8601 datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof PlacementOption
     */
    expiration?: string;
    /**
     * Fee for the offered option.
     * @type {Array<Incentive>}
     * @memberof PlacementOption
     */
    fees: Array<Incentive>;
    /**
     * Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof PlacementOption
     */
    placementOptionId: string;
    /**
     * Shipment ids.
     * @type {Array<string>}
     * @memberof PlacementOption
     */
    shipmentIds: Array<string>;
    /**
     * The status of a placement option. Can be `OFFERED`, `ACCEPTED`, or `EXPIRED`.
     * @type {string}
     * @memberof PlacementOption
     */
    status: string;
}
/**
 * Summary information about a placement option.
 * @export
 * @interface PlacementOptionSummary
 */
export interface PlacementOptionSummary {
    /**
     * Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof PlacementOptionSummary
     */
    placementOptionId: string;
    /**
     * The status of a placement option. Can be `OFFERED` or `ACCEPTED`.
     * @type {string}
     * @memberof PlacementOptionSummary
     */
    status: string;
}
/**
 * Information pertaining to the preparation of inbound goods.
 * @export
 * @interface PrepInstruction
 */
export interface PrepInstruction {
    /**
     * 
     * @type {Currency}
     * @memberof PrepInstruction
     */
    fee?: Currency;
    /**
     * In some situations, special preparations are required for items and this field reflects the owner of the         preparations. Options include `AMAZON` or `SELLER`.
     * @type {string}
     * @memberof PrepInstruction
     */
    prepOwner?: string;
    /**
     * Type of preparation that should be done. Can be `ITEM_LABELING`, `ITEM_BUBBLEWRAP`, `ITEM_POLYBAGGING`, `ITEM_TAPING`, `ITEM_BLACK_SHRINKWRAP`, `ITEM_HANG_GARMENT`, `ITEM_BOXING`, `ITEM_SETCREAT`, `ITEM_RMOVHANG`, `ITEM_SUFFOSTK`, `ITEM_CAP_SEALING`, `ITEM_DEBUNDLE`, `ITEM_SETSTK`, `ITEM_SIOC`, `ITEM_NO_PREP`, `ADULT`, `BABY`, `TEXTILE`, `HANGER`, `FRAGILE`, `LIQUID`, `SHARP`, `SMALL`, `PERFORATED`, `GRANULAR`, `SET`, `FC_PROVIDED`, `UNKNOWN`, or `NONE`.
     * @type {string}
     * @memberof PrepInstruction
     */
    prepType?: string;
}
/**
 * In some situations, special preparations are required for items and this field reflects the owner of the preparations. Options include `AMAZON` or `SELLER`.
 * @export
 * @enum {string}
 */
export enum PrepOwner {
    Amazon = 'AMAZON',
    Seller = 'SELLER'
}

/**
 * The estimated shipping cost associated with the transportation option.
 * @export
 * @interface Quote
 */
export interface Quote {
    /**
     * 
     * @type {Currency}
     * @memberof Quote
     */
    cost: Currency;
    /**
     * The timestamp at which this transportation option quote becomes no longer valid. This is in ISO 8601 datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof Quote
     */
    expiration?: string;
    /**
     * Voidable until timestamp.
     * @type {string}
     * @memberof Quote
     */
    voidableUntil?: string;
}
/**
 * Reason for cancelling or rescheduling a self-ship appointment.
 * @export
 * @enum {string}
 */
export enum ReasonComment {
    AppointmentRequestedByMistake = 'APPOINTMENT_REQUESTED_BY_MISTAKE',
    VehicleDelay = 'VEHICLE_DELAY',
    SlotNotSuitable = 'SLOT_NOT_SUITABLE',
    OutsideCarrierBusinessHours = 'OUTSIDE_CARRIER_BUSINESS_HOURS',
    UnfavourableExternalConditions = 'UNFAVOURABLE_EXTERNAL_CONDITIONS',
    ProcurementDelay = 'PROCUREMENT_DELAY',
    ShippingPlanChanged = 'SHIPPING_PLAN_CHANGED',
    IncreasedQuantity = 'INCREASED_QUANTITY',
    Other = 'OTHER'
}

/**
 * Representation of a location used within the inbounding experience.
 * @export
 * @interface Region
 */
export interface Region {
    /**
     * ISO 3166 standard alpha-2 country code.
     * @type {string}
     * @memberof Region
     */
    countryCode?: string;
    /**
     * State.
     * @type {string}
     * @memberof Region
     */
    state?: string;
    /**
     * An identifier for a warehouse, such as a FC, IXD, upstream storage.
     * @type {string}
     * @memberof Region
     */
    warehouseId?: string;
}
/**
 * `scheduleSelfShipAppointment` request.
 * @export
 * @interface ScheduleSelfShipAppointmentRequest
 */
export interface ScheduleSelfShipAppointmentRequest {
    /**
     * 
     * @type {ReasonComment}
     * @memberof ScheduleSelfShipAppointmentRequest
     */
    reasonComment?: ReasonComment | 'APPOINTMENT_REQUESTED_BY_MISTAKE' | 'VEHICLE_DELAY' | 'SLOT_NOT_SUITABLE' | 'OUTSIDE_CARRIER_BUSINESS_HOURS' | 'UNFAVOURABLE_EXTERNAL_CONDITIONS' | 'PROCUREMENT_DELAY' | 'SHIPPING_PLAN_CHANGED' | 'INCREASED_QUANTITY' | 'OTHER';
}
/**
 * `scheduleSelfShipAppointment` response.
 * @export
 * @interface ScheduleSelfShipAppointmentResponse
 */
export interface ScheduleSelfShipAppointmentResponse {
    /**
     * 
     * @type {SelfShipAppointmentDetails}
     * @memberof ScheduleSelfShipAppointmentResponse
     */
    selfShipAppointmentDetails: SelfShipAppointmentDetails;
}
/**
 * Appointment details for carrier pickup or fulfillment center appointments.
 * @export
 * @interface SelfShipAppointmentDetails
 */
export interface SelfShipAppointmentDetails {
    /**
     * Identifier for appointment.
     * @type {number}
     * @memberof SelfShipAppointmentDetails
     */
    appointmentId?: number;
    /**
     * 
     * @type {AppointmentSlotTime}
     * @memberof SelfShipAppointmentDetails
     */
    appointmentSlotTime?: AppointmentSlotTime;
    /**
     * Status of the appointment.
     * @type {string}
     * @memberof SelfShipAppointmentDetails
     */
    appointmentStatus?: string;
}
/**
 * The self ship appointment time slots availability and an expiration date for which the slots can be scheduled.
 * @export
 * @interface SelfShipAppointmentSlotsAvailability
 */
export interface SelfShipAppointmentSlotsAvailability {
    /**
     * ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
     * @type {string}
     * @memberof SelfShipAppointmentSlotsAvailability
     */
    expiresAt?: string;
    /**
     * List of appointment slots.
     * @type {Array<AppointmentSlot>}
     * @memberof SelfShipAppointmentSlotsAvailability
     */
    slots?: Array<AppointmentSlot>;
}
/**
 * `setPackingInformation` request.
 * @export
 * @interface SetPackingInformationRequest
 */
export interface SetPackingInformationRequest {
    /**
     * List of packing information for the inbound plan.
     * @type {Array<PackageGroupingInput>}
     * @memberof SetPackingInformationRequest
     */
    packageGroupings?: Array<PackageGroupingInput>;
}
/**
 * `setPackingInformation` response.
 * @export
 * @interface SetPackingInformationResponse
 */
export interface SetPackingInformationResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof SetPackingInformationResponse
     */
    operationId: string;
}
/**
 * Contains information pertaining to a shipment in an inbound plan.
 * @export
 * @interface Shipment
 */
export interface Shipment {
    /**
     * A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
     * @type {string}
     * @memberof Shipment
     */
    amazonReferenceId?: string;
    /**
     * 
     * @type {ContactInformation}
     * @memberof Shipment
     */
    contactInformation?: ContactInformation;
    /**
     * 
     * @type {Dates}
     * @memberof Shipment
     */
    dates?: Dates;
    /**
     * 
     * @type {ShipmentDestination}
     * @memberof Shipment
     */
    destination: ShipmentDestination;
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof Shipment
     */
    inboundPlanId: string;
    /**
     * The name of the shipment.
     * @type {string}
     * @memberof Shipment
     */
    name?: string;
    /**
     * 
     * @type {PalletInformation}
     * @memberof Shipment
     */
    palletInformation?: PalletInformation;
    /**
     * Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof Shipment
     */
    placementOptionId: string;
    /**
     * Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
     * @type {string}
     * @memberof Shipment
     */
    selectedTransportationOptionId?: string;
    /**
     * List of self ship appointment details.
     * @type {Array<SelfShipAppointmentDetails>}
     * @memberof Shipment
     */
    selfShipAppointmentDetails?: Array<SelfShipAppointmentDetails>;
    /**
     * The confirmed shipment ID which shows up on labels (for example, FBA1234ABCD).
     * @type {string}
     * @memberof Shipment
     */
    shipmentConfirmationId?: string;
    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof Shipment
     */
    shipmentId: string;
    /**
     * 
     * @type {ShipmentSource}
     * @memberof Shipment
     */
    source: ShipmentSource;
    /**
     * The status of a shipment. The state of the shipment will typically start in `WORKING` and transition to `READY_TO_SHIP` once required actions are complete prior to being picked up or shipped out. Can be `ABANDONED`, `CANCELLED`, `CHECKED_IN`, `CLOSED`, `DELETED`, `DELIVERED`, `IN_TRANSIT`, `MIXED`, `READY_TO_SHIP`, `RECEIVING`, `SHIPPED`, or `WORKING`.
     * @type {string}
     * @memberof Shipment
     */
    status?: string;
    /**
     * 
     * @type {TrackingDetails}
     * @memberof Shipment
     */
    trackingDetails?: TrackingDetails;
}
/**
 * The Amazon fulfillment center address and warehouse ID.
 * @export
 * @interface ShipmentDestination
 */
export interface ShipmentDestination {
    /**
     * 
     * @type {Address}
     * @memberof ShipmentDestination
     */
    address?: Address;
    /**
     * The type of destination for this shipment. Can be `AMAZON_OPTIMIZED`, or `AMAZON_WAREHOUSE`.
     * @type {string}
     * @memberof ShipmentDestination
     */
    destinationType: string;
    /**
     * The warehouse that the shipment should be sent to.  Empty if the destination type is `AMAZON_OPTIMIZED`.
     * @type {string}
     * @memberof ShipmentDestination
     */
    warehouseId?: string;
}
/**
 * Specifies the \'ship from\' address for the shipment.
 * @export
 * @interface ShipmentSource
 */
export interface ShipmentSource {
    /**
     * 
     * @type {Address}
     * @memberof ShipmentSource
     */
    address?: Address;
    /**
     * The type of source for this shipment. Can be `SELLER_FACILITY`.
     * @type {string}
     * @memberof ShipmentSource
     */
    sourceType: string;
}
/**
 * Summary information about a shipment.
 * @export
 * @interface ShipmentSummary
 */
export interface ShipmentSummary {
    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof ShipmentSummary
     */
    shipmentId: string;
    /**
     * The status of a shipment. The state of the shipment will typically start in `WORKING` and transition to `READY_TO_SHIP` once required actions are complete prior to being picked up or shipped out. Can be `ABANDONED`, `CANCELLED`, `CHECKED_IN`, `CLOSED`, `DELETED`, `DELIVERED`, `IN_TRANSIT`, `MIXED`, `READY_TO_SHIP`, `RECEIVING`, `SHIPPED`, or `WORKING`.
     * @type {string}
     * @memberof ShipmentSummary
     */
    status: string;
}
/**
 * Details needed to generate the transportation options.
 * @export
 * @interface ShipmentTransportationConfiguration
 */
export interface ShipmentTransportationConfiguration {
    /**
     * 
     * @type {ContactInformation}
     * @memberof ShipmentTransportationConfiguration
     */
    contactInformation?: ContactInformation;
    /**
     * 
     * @type {PalletInformation}
     * @memberof ShipmentTransportationConfiguration
     */
    palletInformation?: PalletInformation;
    /**
     * 
     * @type {WindowInput}
     * @memberof ShipmentTransportationConfiguration
     */
    readyToShipWindow: WindowInput;
    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof ShipmentTransportationConfiguration
     */
    shipmentId: string;
}
/**
 * The shipping configurations supported for the packing option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
 * @export
 * @interface ShippingConfiguration
 */
export interface ShippingConfiguration {
    /**
     * Mode of shipment transportation that this option will provide. Can be `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, or `AIR_SMALL_PARCEL_EXPRESS`.
     * @type {string}
     * @memberof ShippingConfiguration
     */
    shippingMode?: string;
    /**
     * Shipping program for the option. Can be `AMAZON_PARTNERED_CARRIER` or `USE_YOUR_OWN_CARRIER`.
     * @type {string}
     * @memberof ShippingConfiguration
     */
    shippingSolution?: string;
}
/**
 * Contains information related to Small Parcel Delivery (SPD) shipment tracking.
 * @export
 * @interface SpdTrackingDetail
 */
export interface SpdTrackingDetail {
    /**
     * List of Small Parcel Delivery (SPD) tracking items.
     * @type {Array<SpdTrackingItem>}
     * @memberof SpdTrackingDetail
     */
    spdTrackingItems?: Array<SpdTrackingItem>;
}
/**
 * Contains input information to update Small Parcel Delivery (SPD) tracking information.
 * @export
 * @interface SpdTrackingDetailInput
 */
export interface SpdTrackingDetailInput {
    /**
     * List of Small Parcel Delivery (SPD) tracking items input.
     * @type {Array<SpdTrackingItemInput>}
     * @memberof SpdTrackingDetailInput
     */
    spdTrackingItems: Array<SpdTrackingItemInput>;
}
/**
 * Contains information used to track and identify a Small Parcel Delivery (SPD) item.
 * @export
 * @interface SpdTrackingItem
 */
export interface SpdTrackingItem {
    /**
     * The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box.
     * @type {string}
     * @memberof SpdTrackingItem
     */
    boxId?: string;
    /**
     * The tracking ID associated with each box in a non-Amazon partnered Small Parcel Delivery (SPD) shipment.
     * @type {string}
     * @memberof SpdTrackingItem
     */
    trackingId?: string;
    /**
     * Whether or not Amazon has validated the tracking number. If more than 24 hours have passed and the status is         not yet \'VALIDATED\', please verify the number and update if necessary. Can be `VALIDATED` or `NOT_VALIDATED`.
     * @type {string}
     * @memberof SpdTrackingItem
     */
    trackingNumberValidationStatus?: string;
}
/**
 * Small Parcel Delivery (SPD) tracking items input information.
 * @export
 * @interface SpdTrackingItemInput
 */
export interface SpdTrackingItemInput {
    /**
     * The ID provided by Amazon that identifies a given box. This ID is comprised of the external shipment ID (which         is generated after transportation has been confirmed) and the index of the box.
     * @type {string}
     * @memberof SpdTrackingItemInput
     */
    boxId: string;
    /**
     * The tracking Id associated with each box in a non-Amazon partnered Small Parcel Delivery (SPD) shipment. The seller must provide this information. 
     * @type {string}
     * @memberof SpdTrackingItemInput
     */
    trackingId: string;
}
/**
 * Indicates whether pallets will be stacked when carrier arrives for pick-up.
 * @export
 * @enum {string}
 */
export enum Stackability {
    Stackable = 'STACKABLE',
    NonStackable = 'NON_STACKABLE'
}

/**
 * Information used to determine the tax compliance.
 * @export
 * @interface TaxDetails
 */
export interface TaxDetails {
    /**
     * 
     * @type {Currency}
     * @memberof TaxDetails
     */
    declaredValue?: Currency;
    /**
     * Harmonized System of Nomenclature code.
     * @type {string}
     * @memberof TaxDetails
     */
    hsnCode?: string;
    /**
     * List of tax rates.
     * @type {Array<TaxRate>}
     * @memberof TaxDetails
     */
    taxRates?: Array<TaxRate>;
}
/**
 * Contains the type and rate of tax.
 * @export
 * @interface TaxRate
 */
export interface TaxRate {
    /**
     * Rate of cess tax.
     * @type {number}
     * @memberof TaxRate
     */
    cessRate?: number;
    /**
     * Rate of gst tax.
     * @type {number}
     * @memberof TaxRate
     */
    gstRate?: number;
    /**
     * Type of tax. Can be `CGST`, `SGST`, `IGST`, or `TOTAL_TAX`.
     * @type {string}
     * @memberof TaxRate
     */
    taxType?: string;
}
/**
 * Tracking information for Less-Than-Truckload (LTL) and Small Parcel Delivery (SPD) shipments.
 * @export
 * @interface TrackingDetails
 */
export interface TrackingDetails {
    /**
     * 
     * @type {LtlTrackingDetail}
     * @memberof TrackingDetails
     */
    ltlTrackingDetail?: LtlTrackingDetail;
    /**
     * 
     * @type {SpdTrackingDetail}
     * @memberof TrackingDetails
     */
    spdTrackingDetail?: SpdTrackingDetail;
}
/**
 * Tracking information input for Less-Than-Truckload (LTL) and Small Parcel Delivery (SPD) shipments.
 * @export
 * @interface TrackingDetailsInput
 */
export interface TrackingDetailsInput {
    /**
     * 
     * @type {LtlTrackingDetailInput}
     * @memberof TrackingDetailsInput
     */
    ltlTrackingDetail?: LtlTrackingDetailInput;
    /**
     * 
     * @type {SpdTrackingDetailInput}
     * @memberof TrackingDetailsInput
     */
    spdTrackingDetail?: SpdTrackingDetailInput;
}
/**
 * Contains information pertaining to a transportation option and the related carrier.
 * @export
 * @interface TransportationOption
 */
export interface TransportationOption {
    /**
     * 
     * @type {AppointmentSlot}
     * @memberof TransportationOption
     */
    appointmentSlot?: AppointmentSlot;
    /**
     * 
     * @type {Carrier}
     * @memberof TransportationOption
     */
    carrier: Carrier;
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof TransportationOption
     */
    inboundPlanId: string;
    /**
     * The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof TransportationOption
     */
    placementOptionId: string;
    /**
     * 
     * @type {Quote}
     * @memberof TransportationOption
     */
    quote?: Quote;
    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof TransportationOption
     */
    shipmentId: string;
    /**
     * The shipping mode associated with the transportation option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
     * @type {string}
     * @memberof TransportationOption
     */
    shippingMode: string;
    /**
     * The shipping solution associated with the transportation option. Available solutions are Amazon-partnered carrier or \'use your own carrier\'.
     * @type {string}
     * @memberof TransportationOption
     */
    shippingSolution: string;
    /**
     * Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
     * @type {string}
     * @memberof TransportationOption
     */
    transportationOptionId: string;
}
/**
 * The transportation option selected to confirm.
 * @export
 * @interface TransportationSelection
 */
export interface TransportationSelection {
    /**
     * 
     * @type {ContactInformation}
     * @memberof TransportationSelection
     */
    contactInformation?: ContactInformation;
    /**
     * 
     * @type {WindowInput}
     * @memberof TransportationSelection
     */
    deliveryWindow?: WindowInput;
    /**
     * Shipment ID that the transportation Option is for.
     * @type {string}
     * @memberof TransportationSelection
     */
    shipmentId: string;
    /**
     * Transportation option being selected for the provided shipment.
     * @type {string}
     * @memberof TransportationSelection
     */
    transportationOptionId: string;
}
/**
 * Unit of linear measure.
 * @export
 * @enum {string}
 */
export enum UnitOfMeasurement {
    In = 'IN',
    Cm = 'CM'
}

/**
 * Unit of the weight being measured.
 * @export
 * @enum {string}
 */
export enum UnitOfWeight {
    Lb = 'LB',
    Kg = 'KG'
}

/**
 * The `updateItemComplianceDetails` request.
 * @export
 * @interface UpdateItemComplianceDetailsRequest
 */
export interface UpdateItemComplianceDetailsRequest {
    /**
     * The merchant SKU, a merchant-supplied identifier for a specific SKU.
     * @type {string}
     * @memberof UpdateItemComplianceDetailsRequest
     */
    msku: string;
    /**
     * 
     * @type {TaxDetails}
     * @memberof UpdateItemComplianceDetailsRequest
     */
    taxDetails: TaxDetails;
}
/**
 * The `updateItemComplianceDetails` response.
 * @export
 * @interface UpdateItemComplianceDetailsResponse
 */
export interface UpdateItemComplianceDetailsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof UpdateItemComplianceDetailsResponse
     */
    operationId: string;
}
/**
 * The `updateShipmentDeliveryWindow` request.
 * @export
 * @interface UpdateShipmentDeliveryWindowRequest
 */
export interface UpdateShipmentDeliveryWindowRequest {
    /**
     * 
     * @type {WindowInput}
     * @memberof UpdateShipmentDeliveryWindowRequest
     */
    deliveryWindow: WindowInput;
}
/**
 * The `updateShipmentDeliveryWindow` response.
 * @export
 * @interface UpdateShipmentDeliveryWindowResponse
 */
export interface UpdateShipmentDeliveryWindowResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof UpdateShipmentDeliveryWindowResponse
     */
    operationId: string;
}
/**
 * The `updateShipmentTrackingDetails` request.
 * @export
 * @interface UpdateShipmentTrackingDetailsRequest
 */
export interface UpdateShipmentTrackingDetailsRequest {
    /**
     * 
     * @type {TrackingDetailsInput}
     * @memberof UpdateShipmentTrackingDetailsRequest
     */
    trackingDetails: TrackingDetailsInput;
}
/**
 * The `updateShipmentTrackingDetails` response.
 * @export
 * @interface UpdateShipmentTrackingDetailsResponse
 */
export interface UpdateShipmentTrackingDetailsResponse {
    /**
     * UUID for the given operation.
     * @type {string}
     * @memberof UpdateShipmentTrackingDetailsResponse
     */
    operationId: string;
}
/**
 * The weight of a package.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * 
     * @type {UnitOfWeight}
     * @memberof Weight
     */
    unit: UnitOfWeight | 'LB' | 'KG';
    /**
     * Value of a weight.
     * @type {number}
     * @memberof Weight
     */
    value: number;
}
/**
 * Contains a start and end DateTime representing a time range.
 * @export
 * @interface Window
 */
export interface Window {
    /**
     * The timestamp at which this Window can no longer be edited.
     * @type {string}
     * @memberof Window
     */
    editableUntil?: string;
    /**
     * The end timestamp of the window.
     * @type {string}
     * @memberof Window
     */
    end: string;
    /**
     * The start timestamp of the window.
     * @type {string}
     * @memberof Window
     */
    start: string;
}
/**
 * Contains only a starting DateTime.
 * @export
 * @interface WindowInput
 */
export interface WindowInput {
    /**
     * The start date of the window. The time component must be zero.
     * @type {string}
     * @memberof WindowInput
     */
    start: string;
}

/**
 * FbaInboundApi - axios parameter creator
 * @export
 */
export const FbaInboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window     for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan: async (inboundPlanId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, slotId: string, body: CancelSelfShipAppointmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'slotId' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'slotId', slotId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('cancelSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/cancellation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"slotId"}}`, encodeURIComponent(String(slotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption: async (inboundPlanId: string, packingOptionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPackingOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingOptionId' is not null or undefined
            assertParamExists('confirmPackingOption', 'packingOptionId', packingOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingOptionId"}}`, encodeURIComponent(String(packingOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} placementOptionId Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption: async (inboundPlanId: string, placementOptionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'placementOptionId' is not null or undefined
            assertParamExists('confirmPlacementOption', 'placementOptionId', placementOptionId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"placementOptionId"}}`, encodeURIComponent(String(placementOptionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions: async (inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('confirmTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan: async (body: CreateInboundPlanRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createInboundPlan', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions: async (inboundPlanId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions: async (inboundPlanId: string, body: GeneratePlacementOptionsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generatePlacementOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generatePlacementOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateSelfShipAppointmentSlots', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions: async (inboundPlanId: string, body: GenerateTransportationOptionsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('generateTransportationOptions', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('generateTransportationOptions', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument: async (inboundPlanId: string, shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getDeliveryChallanDocument', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} operationId Identifier to an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus: async (operationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'operationId' is not null or undefined
            assertParamExists('getInboundOperationStatus', 'operationId', operationId)
            const localVarPath = `/inbound/fba/2024-03-20/operations/{operationId}`
                .replace(`{${"operationId"}}`, encodeURIComponent(String(operationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan: async (inboundPlanId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getInboundPlan', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots: async (inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getSelfShipAppointmentSlots', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment: async (inboundPlanId: string, shipmentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('getShipment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('getShipment', 'shipmentId', shipmentId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanBoxes', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanItems', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listInboundPlanPallets', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {'ACTIVE' | 'VOIDED' | 'SHIPPED'} [status] The status of an inbound plan.
         * @param {'LAST_UPDATED_TIME' | 'CREATION_TIME'} [sortBy] Sort by field.
         * @param {'ASC' | 'DESC'} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans: async (pageSize?: number, paginationToken?: string, status?: 'ACTIVE' | 'VOIDED' | 'SHIPPED', sortBy?: 'LAST_UPDATED_TIME' | 'CREATION_TIME', sortOrder?: 'ASC' | 'DESC', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} mskus List of merchant SKUs, a merchant-supplied identifier for a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails: async (mskus: Array<string>, marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'mskus' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'mskus', mskus)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('listItemComplianceDetails', 'marketplaceId', marketplaceId)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mskus) {
                localVarQueryParameter['mskus'] = mskus;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all items in a packing options\'s packing group. Packing options must first be generated by the corresponding endpoint before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {string} packingGroupId Identifier to a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems: async (inboundPlanId: string, packingOptionId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'packingOptionId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'packingOptionId', packingOptionId)
            // verify required parameter 'packingGroupId' is not null or undefined
            assertParamExists('listPackingGroupItems', 'packingGroupId', packingGroupId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/packingGroups/{packingGroupId}/items`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"packingOptionId"}}`, encodeURIComponent(String(packingOptionId)))
                .replace(`{${"packingGroupId"}}`, encodeURIComponent(String(packingGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPackingOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listPlacementOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions: async (inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('listTransportationOptions', 'inboundPlanId', inboundPlanId)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (paginationToken !== undefined) {
                localVarQueryParameter['paginationToken'] = paginationToken;
            }

            if (placementOptionId !== undefined) {
                localVarQueryParameter['placementOptionId'] = placementOptionId;
            }

            if (shipmentId !== undefined) {
                localVarQueryParameter['shipmentId'] = shipmentId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment: async (inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'shipmentId', shipmentId)
            // verify required parameter 'slotId' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'slotId', slotId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('scheduleSelfShipAppointment', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)))
                .replace(`{${"slotId"}}`, encodeURIComponent(String(slotId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate     the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation: async (inboundPlanId: string, body: SetPackingInformationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('setPackingInformation', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('setPackingInformation', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails: async (marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'marketplaceId', marketplaceId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateItemComplianceDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/items/compliance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the time window that a shipment will be delivered to the warehouse. The window is used to provide the expected time that a non-Amazon partnered carrier will arrive at the warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentDeliveryWindowRequest} body The body of the request to &#x60;updateShipmentDeliveryWindow&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentDeliveryWindow: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentDeliveryWindowRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentDeliveryWindow', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentDeliveryWindow', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentDeliveryWindow', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails: async (inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'inboundPlanId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'inboundPlanId', inboundPlanId)
            // verify required parameter 'shipmentId' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'shipmentId', shipmentId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('updateShipmentTrackingDetails', 'body', body)
            const localVarPath = `/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails`
                .replace(`{${"inboundPlanId"}}`, encodeURIComponent(String(inboundPlanId)))
                .replace(`{${"shipmentId"}}`, encodeURIComponent(String(shipmentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FbaInboundApi - functional programming interface
 * @export
 */
export const FbaInboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FbaInboundApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window     for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelInboundPlan(inboundPlanId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelInboundPlan(inboundPlanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: CancelSelfShipAppointmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPackingOption(inboundPlanId: string, packingOptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPackingOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPackingOption(inboundPlanId, packingOptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} placementOptionId Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPlacementOption(inboundPlanId: string, placementOptionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmPlacementOptionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPlacementOption(inboundPlanId, placementOptionId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmTransportationOptions(inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ConfirmTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmTransportationOptions(inboundPlanId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createInboundPlan(body: CreateInboundPlanRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateInboundPlanResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createInboundPlan(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePackingOptions(inboundPlanId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePackingOptions(inboundPlanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generatePlacementOptions(inboundPlanId: string, body: GeneratePlacementOptionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneratePlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generatePlacementOptions(inboundPlanId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async generateTransportationOptions(inboundPlanId: string, body: GenerateTransportationOptionsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenerateTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.generateTransportationOptions(inboundPlanId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDeliveryChallanDocument(inboundPlanId: string, shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetDeliveryChallanDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDeliveryChallanDocument(inboundPlanId, shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} operationId Identifier to an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundOperationStatus(operationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundOperationStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundOperationStatus(operationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInboundPlan(inboundPlanId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InboundPlan>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInboundPlan(inboundPlanId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetSelfShipAppointmentSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSelfShipAppointmentSlots(inboundPlanId, shipmentId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShipment(inboundPlanId: string, shipmentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Shipment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShipment(inboundPlanId, shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanBoxes(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanBoxesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanBoxes(inboundPlanId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanItems(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanItems(inboundPlanId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlanPallets(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlanPalletsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlanPallets(inboundPlanId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {'ACTIVE' | 'VOIDED' | 'SHIPPED'} [status] The status of an inbound plan.
         * @param {'LAST_UPDATED_TIME' | 'CREATION_TIME'} [sortBy] Sort by field.
         * @param {'ASC' | 'DESC'} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listInboundPlans(pageSize?: number, paginationToken?: string, status?: 'ACTIVE' | 'VOIDED' | 'SHIPPED', sortBy?: 'LAST_UPDATED_TIME' | 'CREATION_TIME', sortOrder?: 'ASC' | 'DESC', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListInboundPlansResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listInboundPlans(pageSize, paginationToken, status, sortBy, sortOrder, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} mskus List of merchant SKUs, a merchant-supplied identifier for a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listItemComplianceDetails(mskus: Array<string>, marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listItemComplianceDetails(mskus, marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all items in a packing options\'s packing group. Packing options must first be generated by the corresponding endpoint before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {string} packingGroupId Identifier to a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingGroupItems(inboundPlanId: string, packingOptionId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingGroupItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingGroupItems(inboundPlanId, packingOptionId, packingGroupId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPackingOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPackingOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPackingOptions(inboundPlanId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlacementOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListPlacementOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlacementOptions(inboundPlanId, pageSize, paginationToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTransportationOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListTransportationOptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTransportationOptions(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scheduleSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ScheduleSelfShipAppointmentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate     the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setPackingInformation(inboundPlanId: string, body: SetPackingInformationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SetPackingInformationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setPackingInformation(inboundPlanId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateItemComplianceDetails(marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateItemComplianceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateItemComplianceDetails(marketplaceId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the time window that a shipment will be delivered to the warehouse. The window is used to provide the expected time that a non-Amazon partnered carrier will arrive at the warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentDeliveryWindowRequest} body The body of the request to &#x60;updateShipmentDeliveryWindow&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentDeliveryWindow(inboundPlanId: string, shipmentId: string, body: UpdateShipmentDeliveryWindowRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentDeliveryWindowResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentDeliveryWindow(inboundPlanId, shipmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentTrackingDetails(inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateShipmentTrackingDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentTrackingDetails(inboundPlanId, shipmentId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FbaInboundApi - factory interface
 * @export
 */
export const FbaInboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FbaInboundApiFp(configuration)
    return {
        /**
         * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window     for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelInboundPlan(inboundPlanId: string, options?: any): AxiosPromise<CancelInboundPlanResponse> {
            return localVarFp.cancelInboundPlan(inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {CancelSelfShipAppointmentRequest} body The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: CancelSelfShipAppointmentRequest, options?: any): AxiosPromise<CancelSelfShipAppointmentResponse> {
            return localVarFp.cancelSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPackingOption(inboundPlanId: string, packingOptionId: string, options?: any): AxiosPromise<ConfirmPackingOptionResponse> {
            return localVarFp.confirmPackingOption(inboundPlanId, packingOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} placementOptionId Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPlacementOption(inboundPlanId: string, placementOptionId: string, options?: any): AxiosPromise<ConfirmPlacementOptionResponse> {
            return localVarFp.confirmPlacementOption(inboundPlanId, placementOptionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {ConfirmTransportationOptionsRequest} body The body of the request to &#x60;confirmTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmTransportationOptions(inboundPlanId: string, body: ConfirmTransportationOptionsRequest, options?: any): AxiosPromise<ConfirmTransportationOptionsResponse> {
            return localVarFp.confirmTransportationOptions(inboundPlanId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateInboundPlanRequest} body The body of the request to &#x60;createInboundPlan&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createInboundPlan(body: CreateInboundPlanRequest, options?: any): AxiosPromise<CreateInboundPlanResponse> {
            return localVarFp.createInboundPlan(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePackingOptions(inboundPlanId: string, options?: any): AxiosPromise<GeneratePackingOptionsResponse> {
            return localVarFp.generatePackingOptions(inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GeneratePlacementOptionsRequest} body The body of the request to &#x60;generatePlacementOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generatePlacementOptions(inboundPlanId: string, body: GeneratePlacementOptionsRequest, options?: any): AxiosPromise<GeneratePlacementOptionsResponse> {
            return localVarFp.generatePlacementOptions(inboundPlanId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {GenerateSelfShipAppointmentSlotsRequest} body The body of the request &#x60;generateSelfShipAppointmentSlots&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, body: GenerateSelfShipAppointmentSlotsRequest, options?: any): AxiosPromise<GenerateSelfShipAppointmentSlotsResponse> {
            return localVarFp.generateSelfShipAppointmentSlots(inboundPlanId, shipmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {GenerateTransportationOptionsRequest} body The body of the request to &#x60;generateTransportationOptions&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        generateTransportationOptions(inboundPlanId: string, body: GenerateTransportationOptionsRequest, options?: any): AxiosPromise<GenerateTransportationOptionsResponse> {
            return localVarFp.generateTransportationOptions(inboundPlanId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeliveryChallanDocument(inboundPlanId: string, shipmentId: string, options?: any): AxiosPromise<GetDeliveryChallanDocumentResponse> {
            return localVarFp.getDeliveryChallanDocument(inboundPlanId, shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} operationId Identifier to an asynchronous operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundOperationStatus(operationId: string, options?: any): AxiosPromise<InboundOperationStatus> {
            return localVarFp.getInboundOperationStatus(operationId, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInboundPlan(inboundPlanId: string, options?: any): AxiosPromise<InboundPlan> {
            return localVarFp.getInboundPlan(inboundPlanId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {number} [pageSize] The number of self ship appointment slots to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSelfShipAppointmentSlots(inboundPlanId: string, shipmentId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<GetSelfShipAppointmentSlotsResponse> {
            return localVarFp.getSelfShipAppointmentSlots(inboundPlanId, shipmentId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShipment(inboundPlanId: string, shipmentId: string, options?: any): AxiosPromise<Shipment> {
            return localVarFp.getShipment(inboundPlanId, shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of boxes to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanBoxes(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListInboundPlanBoxesResponse> {
            return localVarFp.listInboundPlanBoxes(inboundPlanId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanItems(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListInboundPlanItemsResponse> {
            return localVarFp.listInboundPlanItems(inboundPlanId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of pallets to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlanPallets(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListInboundPlanPalletsResponse> {
            return localVarFp.listInboundPlanPallets(inboundPlanId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {number} [pageSize] The number of inbound plans to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {'ACTIVE' | 'VOIDED' | 'SHIPPED'} [status] The status of an inbound plan.
         * @param {'LAST_UPDATED_TIME' | 'CREATION_TIME'} [sortBy] Sort by field.
         * @param {'ASC' | 'DESC'} [sortOrder] The sort order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listInboundPlans(pageSize?: number, paginationToken?: string, status?: 'ACTIVE' | 'VOIDED' | 'SHIPPED', sortBy?: 'LAST_UPDATED_TIME' | 'CREATION_TIME', sortOrder?: 'ASC' | 'DESC', options?: any): AxiosPromise<ListInboundPlansResponse> {
            return localVarFp.listInboundPlans(pageSize, paginationToken, status, sortBy, sortOrder, options).then((request) => request(axios, basePath));
        },
        /**
         * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} mskus List of merchant SKUs, a merchant-supplied identifier for a specific SKU.
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listItemComplianceDetails(mskus: Array<string>, marketplaceId: string, options?: any): AxiosPromise<ListItemComplianceDetailsResponse> {
            return localVarFp.listItemComplianceDetails(mskus, marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all items in a packing options\'s packing group. Packing options must first be generated by the corresponding endpoint before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} packingOptionId Identifier to a packing option.
         * @param {string} packingGroupId Identifier to a packing group.
         * @param {number} [pageSize] The number of packing group items to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingGroupItems(inboundPlanId: string, packingOptionId: string, packingGroupId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListPackingGroupItemsResponse> {
            return localVarFp.listPackingGroupItems(inboundPlanId, packingOptionId, packingGroupId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of packing options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPackingOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListPackingOptionsResponse> {
            return localVarFp.listPackingOptions(inboundPlanId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of placement options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlacementOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, options?: any): AxiosPromise<ListPlacementOptionsResponse> {
            return localVarFp.listPlacementOptions(inboundPlanId, pageSize, paginationToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves all transportation options for a shipment. Transportation options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {number} [pageSize] The number of transportation options to return in the response matching the given query.
         * @param {string} [paginationToken] A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
         * @param {string} [placementOptionId] The placement option to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {string} [shipmentId] The shipment to get transportation options for. Either placementOptionId or shipmentId must be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTransportationOptions(inboundPlanId: string, pageSize?: number, paginationToken?: string, placementOptionId?: string, shipmentId?: string, options?: any): AxiosPromise<ListTransportationOptionsResponse> {
            return localVarFp.listTransportationOptions(inboundPlanId, pageSize, paginationToken, placementOptionId, shipmentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {string} slotId Identifier to a self-ship appointment slot.
         * @param {ScheduleSelfShipAppointmentRequest} body The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scheduleSelfShipAppointment(inboundPlanId: string, shipmentId: string, slotId: string, body: ScheduleSelfShipAppointmentRequest, options?: any): AxiosPromise<ScheduleSelfShipAppointmentResponse> {
            return localVarFp.scheduleSelfShipAppointment(inboundPlanId, shipmentId, slotId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate     the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {SetPackingInformationRequest} body The body of the request to &#x60;setPackingInformation&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setPackingInformation(inboundPlanId: string, body: SetPackingInformationRequest, options?: any): AxiosPromise<SetPackingInformationResponse> {
            return localVarFp.setPackingInformation(inboundPlanId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} marketplaceId The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
         * @param {UpdateItemComplianceDetailsRequest} body The body of the request to &#x60;updateItemComplianceDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateItemComplianceDetails(marketplaceId: string, body: UpdateItemComplianceDetailsRequest, options?: any): AxiosPromise<UpdateItemComplianceDetailsResponse> {
            return localVarFp.updateItemComplianceDetails(marketplaceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the time window that a shipment will be delivered to the warehouse. The window is used to provide the expected time that a non-Amazon partnered carrier will arrive at the warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentDeliveryWindowRequest} body The body of the request to &#x60;updateShipmentDeliveryWindow&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentDeliveryWindow(inboundPlanId: string, shipmentId: string, body: UpdateShipmentDeliveryWindowRequest, options?: any): AxiosPromise<UpdateShipmentDeliveryWindowResponse> {
            return localVarFp.updateShipmentDeliveryWindow(inboundPlanId, shipmentId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} inboundPlanId Identifier to an inbound plan.
         * @param {string} shipmentId Identifier to a shipment. A shipment contains the boxes and units being inbounded.
         * @param {UpdateShipmentTrackingDetailsRequest} body The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentTrackingDetails(inboundPlanId: string, shipmentId: string, body: UpdateShipmentTrackingDetailsRequest, options?: any): AxiosPromise<UpdateShipmentTrackingDetailsResponse> {
            return localVarFp.updateShipmentTrackingDetails(inboundPlanId, shipmentId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cancelInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCancelInboundPlanRequest
 */
export interface FbaInboundApiCancelInboundPlanRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiCancelInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for cancelSelfShipAppointment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCancelSelfShipAppointmentRequest
 */
export interface FbaInboundApiCancelSelfShipAppointmentRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * Identifier to a self-ship appointment slot.
     * @type {string}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly slotId: string

    /**
     * The body of the request to &#x60;cancelSelfShipAppointment&#x60;.
     * @type {CancelSelfShipAppointmentRequest}
     * @memberof FbaInboundApiCancelSelfShipAppointment
     */
    readonly body: CancelSelfShipAppointmentRequest
}

/**
 * Request parameters for confirmPackingOption operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmPackingOptionRequest
 */
export interface FbaInboundApiConfirmPackingOptionRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmPackingOption
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a packing option.
     * @type {string}
     * @memberof FbaInboundApiConfirmPackingOption
     */
    readonly packingOptionId: string
}

/**
 * Request parameters for confirmPlacementOption operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmPlacementOptionRequest
 */
export interface FbaInboundApiConfirmPlacementOptionRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmPlacementOption
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
     * @type {string}
     * @memberof FbaInboundApiConfirmPlacementOption
     */
    readonly placementOptionId: string
}

/**
 * Request parameters for confirmTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiConfirmTransportationOptionsRequest
 */
export interface FbaInboundApiConfirmTransportationOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiConfirmTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;confirmTransportationOptions&#x60;.
     * @type {ConfirmTransportationOptionsRequest}
     * @memberof FbaInboundApiConfirmTransportationOptions
     */
    readonly body: ConfirmTransportationOptionsRequest
}

/**
 * Request parameters for createInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiCreateInboundPlanRequest
 */
export interface FbaInboundApiCreateInboundPlanRequest {
    /**
     * The body of the request to &#x60;createInboundPlan&#x60;.
     * @type {CreateInboundPlanRequest}
     * @memberof FbaInboundApiCreateInboundPlan
     */
    readonly body: CreateInboundPlanRequest
}

/**
 * Request parameters for generatePackingOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGeneratePackingOptionsRequest
 */
export interface FbaInboundApiGeneratePackingOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGeneratePackingOptions
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for generatePlacementOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGeneratePlacementOptionsRequest
 */
export interface FbaInboundApiGeneratePlacementOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGeneratePlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generatePlacementOptions&#x60;.
     * @type {GeneratePlacementOptionsRequest}
     * @memberof FbaInboundApiGeneratePlacementOptions
     */
    readonly body: GeneratePlacementOptionsRequest
}

/**
 * Request parameters for generateSelfShipAppointmentSlots operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateSelfShipAppointmentSlotsRequest
 */
export interface FbaInboundApiGenerateSelfShipAppointmentSlotsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The body of the request &#x60;generateSelfShipAppointmentSlots&#x60;.
     * @type {GenerateSelfShipAppointmentSlotsRequest}
     * @memberof FbaInboundApiGenerateSelfShipAppointmentSlots
     */
    readonly body: GenerateSelfShipAppointmentSlotsRequest
}

/**
 * Request parameters for generateTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGenerateTransportationOptionsRequest
 */
export interface FbaInboundApiGenerateTransportationOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGenerateTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;generateTransportationOptions&#x60;.
     * @type {GenerateTransportationOptionsRequest}
     * @memberof FbaInboundApiGenerateTransportationOptions
     */
    readonly body: GenerateTransportationOptionsRequest
}

/**
 * Request parameters for getDeliveryChallanDocument operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetDeliveryChallanDocumentRequest
 */
export interface FbaInboundApiGetDeliveryChallanDocumentRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetDeliveryChallanDocument
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetDeliveryChallanDocument
     */
    readonly shipmentId: string
}

/**
 * Request parameters for getInboundOperationStatus operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetInboundOperationStatusRequest
 */
export interface FbaInboundApiGetInboundOperationStatusRequest {
    /**
     * Identifier to an asynchronous operation.
     * @type {string}
     * @memberof FbaInboundApiGetInboundOperationStatus
     */
    readonly operationId: string
}

/**
 * Request parameters for getInboundPlan operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetInboundPlanRequest
 */
export interface FbaInboundApiGetInboundPlanRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetInboundPlan
     */
    readonly inboundPlanId: string
}

/**
 * Request parameters for getSelfShipAppointmentSlots operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetSelfShipAppointmentSlotsRequest
 */
export interface FbaInboundApiGetSelfShipAppointmentSlotsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly shipmentId: string

    /**
     * The number of self ship appointment slots to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiGetSelfShipAppointmentSlots
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for getShipment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiGetShipmentRequest
 */
export interface FbaInboundApiGetShipmentRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiGetShipment
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiGetShipment
     */
    readonly shipmentId: string
}

/**
 * Request parameters for listInboundPlanBoxes operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanBoxesRequest
 */
export interface FbaInboundApiListInboundPlanBoxesRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly inboundPlanId: string

    /**
     * The number of boxes to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanBoxes
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanItems operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanItemsRequest
 */
export interface FbaInboundApiListInboundPlanItemsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly inboundPlanId: string

    /**
     * The number of items to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlanPallets operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlanPalletsRequest
 */
export interface FbaInboundApiListInboundPlanPalletsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly inboundPlanId: string

    /**
     * The number of pallets to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlanPallets
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listInboundPlans operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListInboundPlansRequest
 */
export interface FbaInboundApiListInboundPlansRequest {
    /**
     * The number of inbound plans to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly paginationToken?: string

    /**
     * The status of an inbound plan.
     * @type {'ACTIVE' | 'VOIDED' | 'SHIPPED'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly status?: 'ACTIVE' | 'VOIDED' | 'SHIPPED'

    /**
     * Sort by field.
     * @type {'LAST_UPDATED_TIME' | 'CREATION_TIME'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly sortBy?: 'LAST_UPDATED_TIME' | 'CREATION_TIME'

    /**
     * The sort order.
     * @type {'ASC' | 'DESC'}
     * @memberof FbaInboundApiListInboundPlans
     */
    readonly sortOrder?: 'ASC' | 'DESC'
}

/**
 * Request parameters for listItemComplianceDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListItemComplianceDetailsRequest
 */
export interface FbaInboundApiListItemComplianceDetailsRequest {
    /**
     * List of merchant SKUs, a merchant-supplied identifier for a specific SKU.
     * @type {Array<string>}
     * @memberof FbaInboundApiListItemComplianceDetails
     */
    readonly mskus: Array<string>

    /**
     * The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
     * @type {string}
     * @memberof FbaInboundApiListItemComplianceDetails
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listPackingGroupItems operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPackingGroupItemsRequest
 */
export interface FbaInboundApiListPackingGroupItemsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a packing option.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly packingOptionId: string

    /**
     * Identifier to a packing group.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly packingGroupId: string

    /**
     * The number of packing group items to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPackingGroupItems
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPackingOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPackingOptionsRequest
 */
export interface FbaInboundApiListPackingOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of packing options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPackingOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listPlacementOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListPlacementOptionsRequest
 */
export interface FbaInboundApiListPlacementOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of placement options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListPlacementOptions
     */
    readonly paginationToken?: string
}

/**
 * Request parameters for listTransportationOptions operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiListTransportationOptionsRequest
 */
export interface FbaInboundApiListTransportationOptionsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly inboundPlanId: string

    /**
     * The number of transportation options to return in the response matching the given query.
     * @type {number}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the &#x60;pagination&#x60; returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly paginationToken?: string

    /**
     * The placement option to get transportation options for. Either placementOptionId or shipmentId must be specified.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly placementOptionId?: string

    /**
     * The shipment to get transportation options for. Either placementOptionId or shipmentId must be specified.
     * @type {string}
     * @memberof FbaInboundApiListTransportationOptions
     */
    readonly shipmentId?: string
}

/**
 * Request parameters for scheduleSelfShipAppointment operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiScheduleSelfShipAppointmentRequest
 */
export interface FbaInboundApiScheduleSelfShipAppointmentRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly shipmentId: string

    /**
     * Identifier to a self-ship appointment slot.
     * @type {string}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly slotId: string

    /**
     * The body of the request to &#x60;scheduleSelfShipAppointment&#x60;.
     * @type {ScheduleSelfShipAppointmentRequest}
     * @memberof FbaInboundApiScheduleSelfShipAppointment
     */
    readonly body: ScheduleSelfShipAppointmentRequest
}

/**
 * Request parameters for setPackingInformation operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiSetPackingInformationRequest
 */
export interface FbaInboundApiSetPackingInformationRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiSetPackingInformation
     */
    readonly inboundPlanId: string

    /**
     * The body of the request to &#x60;setPackingInformation&#x60;.
     * @type {SetPackingInformationRequest}
     * @memberof FbaInboundApiSetPackingInformation
     */
    readonly body: SetPackingInformationRequest
}

/**
 * Request parameters for updateItemComplianceDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateItemComplianceDetailsRequest
 */
export interface FbaInboundApiUpdateItemComplianceDetailsRequest {
    /**
     * The Marketplace ID. Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a list of possible values.
     * @type {string}
     * @memberof FbaInboundApiUpdateItemComplianceDetails
     */
    readonly marketplaceId: string

    /**
     * The body of the request to &#x60;updateItemComplianceDetails&#x60;.
     * @type {UpdateItemComplianceDetailsRequest}
     * @memberof FbaInboundApiUpdateItemComplianceDetails
     */
    readonly body: UpdateItemComplianceDetailsRequest
}

/**
 * Request parameters for updateShipmentDeliveryWindow operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateShipmentDeliveryWindowRequest
 */
export interface FbaInboundApiUpdateShipmentDeliveryWindowRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentDeliveryWindow
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentDeliveryWindow
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentDeliveryWindow&#x60;.
     * @type {UpdateShipmentDeliveryWindowRequest}
     * @memberof FbaInboundApiUpdateShipmentDeliveryWindow
     */
    readonly body: UpdateShipmentDeliveryWindowRequest
}

/**
 * Request parameters for updateShipmentTrackingDetails operation in FbaInboundApi.
 * @export
 * @interface FbaInboundApiUpdateShipmentTrackingDetailsRequest
 */
export interface FbaInboundApiUpdateShipmentTrackingDetailsRequest {
    /**
     * Identifier to an inbound plan.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly inboundPlanId: string

    /**
     * Identifier to a shipment. A shipment contains the boxes and units being inbounded.
     * @type {string}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly shipmentId: string

    /**
     * The body of the request to &#x60;updateShipmentTrackingDetails&#x60;.
     * @type {UpdateShipmentTrackingDetailsRequest}
     * @memberof FbaInboundApiUpdateShipmentTrackingDetails
     */
    readonly body: UpdateShipmentTrackingDetailsRequest
}

/**
 * FbaInboundApi - object-oriented interface
 * @export
 * @class FbaInboundApi
 * @extends {BaseAPI}
 */
export class FbaInboundApi extends BaseAPI {
    /**
     * Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window     for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiCancelInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public cancelInboundPlan(requestParameters: FbaInboundApiCancelInboundPlanRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).cancelInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiCancelSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public cancelSelfShipAppointment(requestParameters: FbaInboundApiCancelSelfShipAppointmentRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).cancelSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the packing option for an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiConfirmPackingOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmPackingOption(requestParameters: FbaInboundApiConfirmPackingOptionRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).confirmPackingOption(requestParameters.inboundPlanId, requestParameters.packingOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiConfirmPlacementOptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmPlacementOption(requestParameters: FbaInboundApiConfirmPlacementOptionRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).confirmPlacementOption(requestParameters.inboundPlanId, requestParameters.placementOptionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiConfirmTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public confirmTransportationOptions(requestParameters: FbaInboundApiConfirmTransportationOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).confirmTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon\'s fufillment network.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiCreateInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public createInboundPlan(requestParameters: FbaInboundApiCreateInboundPlanRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).createInboundPlan(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available packing options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGeneratePackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generatePackingOptions(requestParameters: FbaInboundApiGeneratePackingOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).generatePackingOptions(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates placement options for the inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGeneratePlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generatePlacementOptions(requestParameters: FbaInboundApiGeneratePlacementOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).generatePlacementOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Initiates the process of generating the appointment slots list.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGenerateSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateSelfShipAppointmentSlots(requestParameters: FbaInboundApiGenerateSelfShipAppointmentSlotsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).generateSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Generates available transportation options for a given placement option.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGenerateTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public generateTransportationOptions(requestParameters: FbaInboundApiGenerateTransportationOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).generateTransportationOptions(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provide delivery challan document for PCP transportation in IN marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGetDeliveryChallanDocumentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getDeliveryChallanDocument(requestParameters: FbaInboundApiGetDeliveryChallanDocumentRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).getDeliveryChallanDocument(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets the status of the processing of an asynchronous API call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGetInboundOperationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getInboundOperationStatus(requestParameters: FbaInboundApiGetInboundOperationStatusRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).getInboundOperationStatus(requestParameters.operationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Fetches the top level information about an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGetInboundPlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getInboundPlan(requestParameters: FbaInboundApiGetInboundPlanRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).getInboundPlan(requestParameters.inboundPlanId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGetSelfShipAppointmentSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getSelfShipAppointmentSlots(requestParameters: FbaInboundApiGetSelfShipAppointmentSlotsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).getSelfShipAppointmentSlots(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiGetShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getShipment(requestParameters: FbaInboundApiGetShipmentRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).getShipment(requestParameters.inboundPlanId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of box packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListInboundPlanBoxesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanBoxes(requestParameters: FbaInboundApiListInboundPlanBoxesRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listInboundPlanBoxes(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of item packages in an inbound plan.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListInboundPlanItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanItems(requestParameters: FbaInboundApiListInboundPlanItemsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listInboundPlanItems(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListInboundPlanPalletsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlanPallets(requestParameters: FbaInboundApiListInboundPlanPalletsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listInboundPlanPallets(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of inbound plans with minimal information.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListInboundPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listInboundPlans(requestParameters: FbaInboundApiListInboundPlansRequest = {}, options?: any) {
        return FbaInboundApiFp(this.configuration).listInboundPlans(requestParameters.pageSize, requestParameters.paginationToken, requestParameters.status, requestParameters.sortBy, requestParameters.sortOrder, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * List the inbound compliance details for MSKUs in a given marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listItemComplianceDetails(requestParameters: FbaInboundApiListItemComplianceDetailsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listItemComplianceDetails(requestParameters.mskus, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all items in a packing options\'s packing group. Packing options must first be generated by the corresponding endpoint before packing group items can be listed.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListPackingGroupItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPackingGroupItems(requestParameters: FbaInboundApiListPackingGroupItemsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listPackingGroupItems(requestParameters.inboundPlanId, requestParameters.packingOptionId, requestParameters.packingGroupId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListPackingOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPackingOptions(requestParameters: FbaInboundApiListPackingOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listPackingOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListPlacementOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listPlacementOptions(requestParameters: FbaInboundApiListPlacementOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listPlacementOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves all transportation options for a shipment. Transportation options must first be generated by the corresponding endpoint before becoming available.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiListTransportationOptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public listTransportationOptions(requestParameters: FbaInboundApiListTransportationOptionsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).listTransportationOptions(requestParameters.inboundPlanId, requestParameters.pageSize, requestParameters.paginationToken, requestParameters.placementOptionId, requestParameters.shipmentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Confirms or reschedules a self-ship appointment slot against a shipment.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiScheduleSelfShipAppointmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public scheduleSelfShipAppointment(requestParameters: FbaInboundApiScheduleSelfShipAppointmentRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).scheduleSelfShipAppointment(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.slotId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate     the box level information required for planning and transportation estimates.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.05 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiSetPackingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public setPackingInformation(requestParameters: FbaInboundApiSetPackingInformationRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).setPackingInformation(requestParameters.inboundPlanId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiUpdateItemComplianceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateItemComplianceDetails(requestParameters: FbaInboundApiUpdateItemComplianceDetailsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).updateItemComplianceDetails(requestParameters.marketplaceId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the time window that a shipment will be delivered to the warehouse. The window is used to provide the expected time that a non-Amazon partnered carrier will arrive at the warehouse.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiUpdateShipmentDeliveryWindowRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateShipmentDeliveryWindow(requestParameters: FbaInboundApiUpdateShipmentDeliveryWindowRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).updateShipmentDeliveryWindow(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a shipment\'s tracking details.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {FbaInboundApiUpdateShipmentTrackingDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public updateShipmentTrackingDetails(requestParameters: FbaInboundApiUpdateShipmentTrackingDetailsRequest, options?: any) {
        return FbaInboundApiFp(this.configuration).updateShipmentTrackingDetails(requestParameters.inboundPlanId, requestParameters.shipmentId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


