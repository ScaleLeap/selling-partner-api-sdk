/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Retail Procurement Orders
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Details of item quantity ordered
 * @export
 * @interface AcknowledgementStatusDetails
 */
export interface AcknowledgementStatusDetails {
    /**
     * The date when the line item was confirmed by vendor. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof AcknowledgementStatusDetails
     */
    acknowledgementDate?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof AcknowledgementStatusDetails
     */
    acceptedQuantity?: ItemQuantity;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof AcknowledgementStatusDetails
     */
    rejectedQuantity?: ItemQuantity;
}
/**
 * Address of the party.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * The response schema for the getPurchaseOrder operation.
 * @export
 * @interface GetPurchaseOrderResponse
 */
export interface GetPurchaseOrderResponse {
    /**
     * 
     * @type {Order}
     * @memberof GetPurchaseOrderResponse
     */
    payload?: Order;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPurchaseOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getPurchaseOrders operation.
 * @export
 * @interface GetPurchaseOrdersResponse
 */
export interface GetPurchaseOrdersResponse {
    /**
     * 
     * @type {OrderList}
     * @memberof GetPurchaseOrdersResponse
     */
    payload?: OrderList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPurchaseOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getPurchaseOrdersStatus operation.
 * @export
 * @interface GetPurchaseOrdersStatusResponse
 */
export interface GetPurchaseOrdersStatusResponse {
    /**
     * 
     * @type {OrderListStatus}
     * @memberof GetPurchaseOrdersStatusResponse
     */
    payload?: OrderListStatus;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetPurchaseOrdersStatusResponse
     */
    errors?: Array<Error>;
}
/**
 * Import details for an import order.
 * @export
 * @interface ImportDetails
 */
export interface ImportDetails {
    /**
     * If the recipient requests, contains the shipment method of payment. This is for import PO\'s only.
     * @type {string}
     * @memberof ImportDetails
     */
    methodOfPayment?: ImportDetailsMethodOfPaymentEnum | 'PaidByBuyer' | 'CollectOnDelivery' | 'DefinedByBuyerAndSeller' | 'FOBPortOfCall' | 'PrepaidBySeller' | 'PaidBySeller';
    /**
     * Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. 
     * @type {string}
     * @memberof ImportDetails
     */
    internationalCommercialTerms?: ImportDetailsInternationalCommercialTermsEnum | 'ExWorks' | 'FreeCarrier' | 'FreeOnBoard' | 'FreeAlongSideShip' | 'CarriagePaidTo' | 'CostAndFreight' | 'CarriageAndInsurancePaidTo' | 'CostInsuranceAndFreight' | 'DeliveredAtTerminal' | 'DeliveredAtPlace' | 'DeliverDutyPaid';
    /**
     * The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.
     * @type {string}
     * @memberof ImportDetails
     */
    portOfDelivery?: string;
    /**
     * Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40\'(40-foot container), 40\'HC (40-foot high-capacity container), 45\', 45\'HC, 30\', 30\'HC, 20\', 20\'HC.
     * @type {string}
     * @memberof ImportDetails
     */
    importContainers?: string;
    /**
     * Special instructions regarding the shipment. This field is for import purchase orders.
     * @type {string}
     * @memberof ImportDetails
     */
    shippingInstructions?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ImportDetailsMethodOfPaymentEnum {
    PaidByBuyer = 'PaidByBuyer',
    CollectOnDelivery = 'CollectOnDelivery',
    DefinedByBuyerAndSeller = 'DefinedByBuyerAndSeller',
    FobPortOfCall = 'FOBPortOfCall',
    PrepaidBySeller = 'PrepaidBySeller',
    PaidBySeller = 'PaidBySeller'
}
/**
    * @export
    * @enum {string}
    */
export enum ImportDetailsInternationalCommercialTermsEnum {
    ExWorks = 'ExWorks',
    FreeCarrier = 'FreeCarrier',
    FreeOnBoard = 'FreeOnBoard',
    FreeAlongSideShip = 'FreeAlongSideShip',
    CarriagePaidTo = 'CarriagePaidTo',
    CostAndFreight = 'CostAndFreight',
    CarriageAndInsurancePaidTo = 'CarriageAndInsurancePaidTo',
    CostInsuranceAndFreight = 'CostInsuranceAndFreight',
    DeliveredAtTerminal = 'DeliveredAtTerminal',
    DeliveredAtPlace = 'DeliveredAtPlace',
    DeliverDutyPaid = 'DeliverDutyPaid'
}

/**
 * Details of quantity ordered.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Acknowledged quantity. This value should not be zero.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount?: number;
    /**
     * Unit of measure for the acknowledged quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure?: ItemQuantityUnitOfMeasureEnum | 'Cases' | 'Eaches';
    /**
     * The case size, in the event that we ordered using cases.
     * @type {number}
     * @memberof ItemQuantity
     */
    unitSize?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemQuantityUnitOfMeasureEnum {
    Cases = 'Cases',
    Eaches = 'Eaches'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * An amount of money, including units in the form of currency.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Three digit currency code in ISO 4217 format. String of length 3.
     * @type {string}
     * @memberof Money
     */
    currencyCode?: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Money
     */
    amount?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof Order
     */
    purchaseOrderNumber: string;
    /**
     * This field will contain the current state of the purchase order.
     * @type {string}
     * @memberof Order
     */
    purchaseOrderState: OrderPurchaseOrderStateEnum | 'New' | 'Acknowledged' | 'Closed';
    /**
     * 
     * @type {OrderDetails}
     * @memberof Order
     */
    orderDetails?: OrderDetails;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderPurchaseOrderStateEnum {
    New = 'New',
    Acknowledged = 'Acknowledged',
    Closed = 'Closed'
}

/**
 * 
 * @export
 * @interface OrderAcknowledgement
 */
export interface OrderAcknowledgement {
    /**
     * The purchase order number. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof OrderAcknowledgement
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderAcknowledgement
     */
    sellingParty: PartyIdentification;
    /**
     * The date and time when the purchase order is acknowledged, in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderAcknowledgement
     */
    acknowledgementDate: string;
    /**
     * A list of the items being acknowledged with associated details.
     * @type {Array<OrderAcknowledgementItem>}
     * @memberof OrderAcknowledgement
     */
    items: Array<OrderAcknowledgementItem>;
}
/**
 * Details of the item being acknowledged.
 * @export
 * @interface OrderAcknowledgementItem
 */
export interface OrderAcknowledgementItem {
    /**
     * Line item sequence number for the item.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    itemSequenceNumber?: string;
    /**
     * Amazon Standard Identification Number (ASIN) of an item.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    amazonProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderAcknowledgementItem
     */
    orderedQuantity: ItemQuantity;
    /**
     * 
     * @type {Money}
     * @memberof OrderAcknowledgementItem
     */
    netCost: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderAcknowledgementItem
     */
    listPrice?: Money;
    /**
     * The discount multiplier that should be applied to the price if a vendor sells books with a list price. This is a multiplier factor to arrive at a final discounted price. A multiplier of .90 would be the factor if a 10% discount is given.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    discountMultiplier?: string;
    /**
     * This is used to indicate acknowledged quantity.
     * @type {Array<OrderItemAcknowledgement>}
     * @memberof OrderAcknowledgementItem
     */
    itemAcknowledgements: Array<OrderItemAcknowledgement>;
}
/**
 * Details of an order.
 * @export
 * @interface OrderDetails
 */
export interface OrderDetails {
    /**
     * The date the purchase order was placed. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderDetails
     */
    purchaseOrderDate: string;
    /**
     * The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than \'purchaseOrderDate\'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderDetails
     */
    purchaseOrderChangedDate?: string;
    /**
     * The date when current purchase order state was changed. Current purchase order state is available in the field \'purchaseOrderState\'. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderDetails
     */
    purchaseOrderStateChangedDate: string;
    /**
     * Type of purchase order.
     * @type {string}
     * @memberof OrderDetails
     */
    purchaseOrderType?: OrderDetailsPurchaseOrderTypeEnum | 'RegularOrder' | 'ConsignedOrder' | 'NewProductIntroduction' | 'RushOrder';
    /**
     * 
     * @type {ImportDetails}
     * @memberof OrderDetails
     */
    importDetails?: ImportDetails;
    /**
     * If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
     * @type {string}
     * @memberof OrderDetails
     */
    dealCode?: string;
    /**
     * Payment method used.
     * @type {string}
     * @memberof OrderDetails
     */
    paymentMethod?: OrderDetailsPaymentMethodEnum | 'Invoice' | 'Consignment' | 'CreditCard' | 'Prepaid';
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    buyingParty?: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    sellingParty?: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    shipToParty?: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    billToParty?: PartyIdentification;
    /**
     * Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).
     * @type {string}
     * @memberof OrderDetails
     */
    shipWindow?: string;
    /**
     * Defines a date time interval according to ISO8601. Interval is separated by double hyphen (--).
     * @type {string}
     * @memberof OrderDetails
     */
    deliveryWindow?: string;
    /**
     * A list of items in this purchase order.
     * @type {Array<OrderItem>}
     * @memberof OrderDetails
     */
    items: Array<OrderItem>;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderDetailsPurchaseOrderTypeEnum {
    RegularOrder = 'RegularOrder',
    ConsignedOrder = 'ConsignedOrder',
    NewProductIntroduction = 'NewProductIntroduction',
    RushOrder = 'RushOrder'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderDetailsPaymentMethodEnum {
    Invoice = 'Invoice',
    Consignment = 'Consignment',
    CreditCard = 'CreditCard',
    Prepaid = 'Prepaid'
}

/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
     * @type {string}
     * @memberof OrderItem
     */
    itemSequenceNumber: string;
    /**
     * Amazon Standard Identification Number (ASIN) of an item.
     * @type {string}
     * @memberof OrderItem
     */
    amazonProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item.
     * @type {string}
     * @memberof OrderItem
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItem
     */
    orderedQuantity: ItemQuantity;
    /**
     * When true, we will accept backorder confirmations for this item.
     * @type {boolean}
     * @memberof OrderItem
     */
    isBackOrderAllowed: boolean;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    netCost?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    listPrice?: Money;
}
/**
 * 
 * @export
 * @interface OrderItemAcknowledgement
 */
export interface OrderItemAcknowledgement {
    /**
     * This indicates the acknowledgement code.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    acknowledgementCode: OrderItemAcknowledgementAcknowledgementCodeEnum | 'Accepted' | 'Backordered' | 'Rejected';
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItemAcknowledgement
     */
    acknowledgedQuantity: ItemQuantity;
    /**
     * Estimated ship date per line item. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    scheduledShipDate?: string;
    /**
     * Estimated delivery date per line item. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    scheduledDeliveryDate?: string;
    /**
     * Indicates the reason for rejection.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    rejectionReason?: OrderItemAcknowledgementRejectionReasonEnum | 'TemporarilyUnavailable' | 'InvalidProductIdentifier' | 'ObsoleteProduct';
}

/**
    * @export
    * @enum {string}
    */
export enum OrderItemAcknowledgementAcknowledgementCodeEnum {
    Accepted = 'Accepted',
    Backordered = 'Backordered',
    Rejected = 'Rejected'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderItemAcknowledgementRejectionReasonEnum {
    TemporarilyUnavailable = 'TemporarilyUnavailable',
    InvalidProductIdentifier = 'InvalidProductIdentifier',
    ObsoleteProduct = 'ObsoleteProduct'
}

/**
 * 
 * @export
 * @interface OrderItemStatus
 */
export interface OrderItemStatus {
    /**
     * Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
     * @type {string}
     * @memberof OrderItemStatus
     */
    itemSequenceNumber: string;
    /**
     * Buyer\'s Standard Identification Number (ASIN) of an item.
     * @type {string}
     * @memberof OrderItemStatus
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item.
     * @type {string}
     * @memberof OrderItemStatus
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemStatus
     */
    netCost?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemStatus
     */
    listPrice?: Money;
    /**
     * 
     * @type {OrderItemStatusOrderedQuantity}
     * @memberof OrderItemStatus
     */
    orderedQuantity?: OrderItemStatusOrderedQuantity;
    /**
     * 
     * @type {OrderItemStatusAcknowledgementStatus}
     * @memberof OrderItemStatus
     */
    acknowledgementStatus?: OrderItemStatusAcknowledgementStatus;
}
/**
 * Acknowledgement status information.
 * @export
 * @interface OrderItemStatusAcknowledgementStatus
 */
export interface OrderItemStatusAcknowledgementStatus {
    /**
     * Confirmation status of line item.
     * @type {string}
     * @memberof OrderItemStatusAcknowledgementStatus
     */
    confirmationStatus?: OrderItemStatusAcknowledgementStatusConfirmationStatusEnum | 'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED';
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItemStatusAcknowledgementStatus
     */
    acceptedQuantity?: ItemQuantity;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItemStatusAcknowledgementStatus
     */
    rejectedQuantity?: ItemQuantity;
    /**
     * Details of item quantity confirmed.
     * @type {Array<AcknowledgementStatusDetails>}
     * @memberof OrderItemStatusAcknowledgementStatus
     */
    acknowledgementStatusDetails?: Array<AcknowledgementStatusDetails>;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderItemStatusAcknowledgementStatusConfirmationStatusEnum {
    Accepted = 'ACCEPTED',
    PartiallyAccepted = 'PARTIALLY_ACCEPTED',
    Rejected = 'REJECTED',
    Unconfirmed = 'UNCONFIRMED'
}

/**
 * Ordered quantity information.
 * @export
 * @interface OrderItemStatusOrderedQuantity
 */
export interface OrderItemStatusOrderedQuantity {
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItemStatusOrderedQuantity
     */
    orderedQuantity?: ItemQuantity;
    /**
     * Details of item quantity ordered.
     * @type {Array<OrderedQuantityDetails>}
     * @memberof OrderItemStatusOrderedQuantity
     */
    orderedQuantityDetails?: Array<OrderedQuantityDetails>;
}
/**
 * 
 * @export
 * @interface OrderList
 */
export interface OrderList {
    /**
     * 
     * @type {Pagination}
     * @memberof OrderList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrderList
     */
    orders?: Array<Order>;
}
/**
 * 
 * @export
 * @interface OrderListStatus
 */
export interface OrderListStatus {
    /**
     * 
     * @type {Pagination}
     * @memberof OrderListStatus
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<OrderStatus>}
     * @memberof OrderListStatus
     */
    ordersStatus?: Array<OrderStatus>;
}
/**
 * Current status of a purchase order.
 * @export
 * @interface OrderStatus
 */
export interface OrderStatus {
    /**
     * The buyer\'s purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof OrderStatus
     */
    purchaseOrderNumber: string;
    /**
     * The status of the buyer\'s purchase order for this order.
     * @type {string}
     * @memberof OrderStatus
     */
    purchaseOrderStatus: OrderStatusPurchaseOrderStatusEnum | 'OPEN' | 'CLOSED';
    /**
     * The date the purchase order was placed. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderStatus
     */
    purchaseOrderDate: string;
    /**
     * The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderStatus
     */
    lastUpdatedDate?: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderStatus
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderStatus
     */
    shipToParty: PartyIdentification;
    /**
     * Detailed description of items order status.
     * @type {Array<OrderItemStatus>}
     * @memberof OrderStatus
     */
    itemStatus: Array<OrderItemStatus>;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderStatusPurchaseOrderStatusEnum {
    Open = 'OPEN',
    Closed = 'CLOSED'
}

/**
 * Details of item quantity ordered
 * @export
 * @interface OrderedQuantityDetails
 */
export interface OrderedQuantityDetails {
    /**
     * The date when the line item quantity was updated by buyer. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof OrderedQuantityDetails
     */
    updatedDate?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderedQuantityDetails
     */
    orderedQuantity?: ItemQuantity;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderedQuantityDetails
     */
    cancelledQuantity?: ItemQuantity;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more purchase order items to return.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
    /**
     * 
     * @type {Address}
     * @memberof PartyIdentification
     */
    address?: Address;
    /**
     * 
     * @type {TaxRegistrationDetails}
     * @memberof PartyIdentification
     */
    taxInfo?: TaxRegistrationDetails;
}
/**
 * The request schema for the submitAcknowledgment operation.
 * @export
 * @interface SubmitAcknowledgementRequest
 */
export interface SubmitAcknowledgementRequest {
    /**
     * 
     * @type {Array<OrderAcknowledgement>}
     * @memberof SubmitAcknowledgementRequest
     */
    acknowledgements?: Array<OrderAcknowledgement>;
}
/**
 * The response schema for the submitAcknowledgement operation
 * @export
 * @interface SubmitAcknowledgementResponse
 */
export interface SubmitAcknowledgementResponse {
    /**
     * 
     * @type {TransactionId}
     * @memberof SubmitAcknowledgementResponse
     */
    payload?: TransactionId;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitAcknowledgementResponse
     */
    errors?: Array<Error>;
}
/**
 * Tax registration details of the entity.
 * @export
 * @interface TaxRegistrationDetails
 */
export interface TaxRegistrationDetails {
    /**
     * Tax registration type for the entity.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationType: TaxRegistrationDetailsTaxRegistrationTypeEnum | 'VAT' | 'GST';
    /**
     * Tax registration number for the entity. For example, VAT ID.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationNumber: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxRegistrationDetailsTaxRegistrationTypeEnum {
    Vat = 'VAT',
    Gst = 'GST'
}

/**
 * 
 * @export
 * @interface TransactionId
 */
export interface TransactionId {
    /**
     * GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionId
     */
    transactionId?: string;
}

/**
 * VendorOrdersApi - axios parameter creator
 * @export
 */
export const VendorOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a purchase order based on the purchaseOrderNumber value that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrder: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getPurchaseOrder', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/orders/v1/purchaseOrders/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {string} [createdAfter] Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
         * @param {boolean} [includeDetails] When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
         * @param {string} [changedAfter] Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [changedBefore] Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'Cancelled'} [poItemState] Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
         * @param {boolean} [isPOChanged] When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
         * @param {'New' | 'Acknowledged' | 'Closed'} [purchaseOrderState] Filters purchase orders based on the purchase order state.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrders: async (limit?: number, createdAfter?: string, createdBefore?: string, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, changedAfter?: string, changedBefore?: string, poItemState?: 'Cancelled', isPOChanged?: boolean, purchaseOrderState?: 'New' | 'Acknowledged' | 'Closed', orderingVendorCode?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/orders/v1/purchaseOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }

            if (changedAfter !== undefined) {
                localVarQueryParameter['changedAfter'] = (changedAfter as any instanceof Date) ?
                    (changedAfter as any).toISOString() :
                    changedAfter;
            }

            if (changedBefore !== undefined) {
                localVarQueryParameter['changedBefore'] = (changedBefore as any instanceof Date) ?
                    (changedBefore as any).toISOString() :
                    changedBefore;
            }

            if (poItemState !== undefined) {
                localVarQueryParameter['poItemState'] = poItemState;
            }

            if (isPOChanged !== undefined) {
                localVarQueryParameter['isPOChanged'] = isPOChanged;
            }

            if (purchaseOrderState !== undefined) {
                localVarQueryParameter['purchaseOrderState'] = purchaseOrderState;
            }

            if (orderingVendorCode !== undefined) {
                localVarQueryParameter['orderingVendorCode'] = orderingVendorCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more purchase orders than the specified result size limit.
         * @param {string} [createdAfter] Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedAfter] Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedBefore] Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [purchaseOrderNumber] Provides purchase order status for the specified purchase order number.
         * @param {'OPEN' | 'CLOSED'} [purchaseOrderStatus] Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
         * @param {'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'} [itemConfirmationStatus] Filters purchase orders based on the specified purchase order item status. If not included in filter, purchase orders for all statuses are included.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
         * @param {string} [shipToPartyId] Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrdersStatus: async (limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, createdAfter?: string, createdBefore?: string, updatedAfter?: string, updatedBefore?: string, purchaseOrderNumber?: string, purchaseOrderStatus?: 'OPEN' | 'CLOSED', itemConfirmationStatus?: 'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED', orderingVendorCode?: string, shipToPartyId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/vendor/orders/v1/purchaseOrdersStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (updatedAfter !== undefined) {
                localVarQueryParameter['updatedAfter'] = (updatedAfter as any instanceof Date) ?
                    (updatedAfter as any).toISOString() :
                    updatedAfter;
            }

            if (updatedBefore !== undefined) {
                localVarQueryParameter['updatedBefore'] = (updatedBefore as any instanceof Date) ?
                    (updatedBefore as any).toISOString() :
                    updatedBefore;
            }

            if (purchaseOrderNumber !== undefined) {
                localVarQueryParameter['purchaseOrderNumber'] = purchaseOrderNumber;
            }

            if (purchaseOrderStatus !== undefined) {
                localVarQueryParameter['purchaseOrderStatus'] = purchaseOrderStatus;
            }

            if (itemConfirmationStatus !== undefined) {
                localVarQueryParameter['itemConfirmationStatus'] = itemConfirmationStatus;
            }

            if (orderingVendorCode !== undefined) {
                localVarQueryParameter['orderingVendorCode'] = orderingVendorCode;
            }

            if (shipToPartyId !== undefined) {
                localVarQueryParameter['shipToPartyId'] = shipToPartyId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement: async (body: SubmitAcknowledgementRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitAcknowledgement', 'body', body)
            const localVarPath = `/vendor/orders/v1/acknowledgements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorOrdersApi - functional programming interface
 * @export
 */
export const VendorOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a purchase order based on the purchaseOrderNumber value that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrder(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrder(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {string} [createdAfter] Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
         * @param {boolean} [includeDetails] When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
         * @param {string} [changedAfter] Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [changedBefore] Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'Cancelled'} [poItemState] Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
         * @param {boolean} [isPOChanged] When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
         * @param {'New' | 'Acknowledged' | 'Closed'} [purchaseOrderState] Filters purchase orders based on the purchase order state.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrders(limit?: number, createdAfter?: string, createdBefore?: string, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, changedAfter?: string, changedBefore?: string, poItemState?: 'Cancelled', isPOChanged?: boolean, purchaseOrderState?: 'New' | 'Acknowledged' | 'Closed', orderingVendorCode?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrders(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more purchase orders than the specified result size limit.
         * @param {string} [createdAfter] Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedAfter] Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedBefore] Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [purchaseOrderNumber] Provides purchase order status for the specified purchase order number.
         * @param {'OPEN' | 'CLOSED'} [purchaseOrderStatus] Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
         * @param {'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'} [itemConfirmationStatus] Filters purchase orders based on the specified purchase order item status. If not included in filter, purchase orders for all statuses are included.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
         * @param {string} [shipToPartyId] Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPurchaseOrdersStatus(limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, createdAfter?: string, createdBefore?: string, updatedAfter?: string, updatedBefore?: string, purchaseOrderNumber?: string, purchaseOrderStatus?: 'OPEN' | 'CLOSED', itemConfirmationStatus?: 'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED', orderingVendorCode?: string, shipToPartyId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetPurchaseOrdersStatusResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPurchaseOrdersStatus(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, orderingVendorCode, shipToPartyId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAcknowledgement(body: SubmitAcknowledgementRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitAcknowledgementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitAcknowledgement(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorOrdersApi - factory interface
 * @export
 */
export const VendorOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorOrdersApiFp(configuration)
    return {
        /**
         * Returns a purchase order based on the purchaseOrderNumber value that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrder(purchaseOrderNumber: string, options?: any): AxiosPromise<GetPurchaseOrderResponse> {
            return localVarFp.getPurchaseOrder(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {string} [createdAfter] Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
         * @param {boolean} [includeDetails] When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
         * @param {string} [changedAfter] Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [changedBefore] Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {'Cancelled'} [poItemState] Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
         * @param {boolean} [isPOChanged] When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
         * @param {'New' | 'Acknowledged' | 'Closed'} [purchaseOrderState] Filters purchase orders based on the purchase order state.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrders(limit?: number, createdAfter?: string, createdBefore?: string, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, changedAfter?: string, changedBefore?: string, poItemState?: 'Cancelled', isPOChanged?: boolean, purchaseOrderState?: 'New' | 'Acknowledged' | 'Closed', orderingVendorCode?: string, options?: any): AxiosPromise<GetPurchaseOrdersResponse> {
            return localVarFp.getPurchaseOrders(limit, createdAfter, createdBefore, sortOrder, nextToken, includeDetails, changedAfter, changedBefore, poItemState, isPOChanged, purchaseOrderState, orderingVendorCode, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {number} [limit] The limit to the number of records returned. Default value is 100 records.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort in ascending or descending order by purchase order creation date.
         * @param {string} [nextToken] Used for pagination when there are more purchase orders than the specified result size limit.
         * @param {string} [createdAfter] Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [createdBefore] Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedAfter] Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [updatedBefore] Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [purchaseOrderNumber] Provides purchase order status for the specified purchase order number.
         * @param {'OPEN' | 'CLOSED'} [purchaseOrderStatus] Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
         * @param {'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'} [itemConfirmationStatus] Filters purchase orders based on the specified purchase order item status. If not included in filter, purchase orders for all statuses are included.
         * @param {string} [orderingVendorCode] Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
         * @param {string} [shipToPartyId] Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPurchaseOrdersStatus(limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, createdAfter?: string, createdBefore?: string, updatedAfter?: string, updatedBefore?: string, purchaseOrderNumber?: string, purchaseOrderStatus?: 'OPEN' | 'CLOSED', itemConfirmationStatus?: 'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED', orderingVendorCode?: string, shipToPartyId?: string, options?: any): AxiosPromise<GetPurchaseOrdersStatusResponse> {
            return localVarFp.getPurchaseOrdersStatus(limit, sortOrder, nextToken, createdAfter, createdBefore, updatedAfter, updatedBefore, purchaseOrderNumber, purchaseOrderStatus, itemConfirmationStatus, orderingVendorCode, shipToPartyId, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement(body: SubmitAcknowledgementRequest, options?: any): AxiosPromise<SubmitAcknowledgementResponse> {
            return localVarFp.submitAcknowledgement(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getPurchaseOrder operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrderRequest
 */
export interface VendorOrdersApiGetPurchaseOrderRequest {
    /**
     * The purchase order identifier for the order that you want. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrder
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getPurchaseOrders operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrdersRequest
 */
export interface VendorOrdersApiGetPurchaseOrdersRequest {
    /**
     * The limit to the number of records returned. Default value is 100 records.
     * @type {number}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly limit?: number

    /**
     * Purchase orders that became available after this time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly createdAfter?: string

    /**
     * Purchase orders that became available before this time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly createdBefore?: string

    /**
     * Sort in ascending or descending order by purchase order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there is more purchase orders than the specified result size limit. The token value is returned in the previous API call
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly nextToken?: string

    /**
     * When true, returns purchase orders with complete details. Otherwise, only purchase order numbers are returned. Default value is true.
     * @type {boolean}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly includeDetails?: boolean

    /**
     * Purchase orders that changed after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly changedAfter?: string

    /**
     * Purchase orders that changed before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly changedBefore?: string

    /**
     * Current state of the purchase order item. If this value is Cancelled, this API will return purchase orders which have one or more items cancelled by Amazon with updated item quantity as zero.
     * @type {'Cancelled'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly poItemState?: 'Cancelled'

    /**
     * When true, returns purchase orders which were modified after the order was placed. Vendors are required to pull the changed purchase order and fulfill the updated purchase order and not the original one. Default value is false.
     * @type {boolean}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly isPOChanged?: boolean

    /**
     * Filters purchase orders based on the purchase order state.
     * @type {'New' | 'Acknowledged' | 'Closed'}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly purchaseOrderState?: 'New' | 'Acknowledged' | 'Closed'

    /**
     * Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in the filter, all purchase orders for all of the vendor codes that exist in the vendor group used to authorize the API client application are returned.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrders
     */
    readonly orderingVendorCode?: string
}

/**
 * Request parameters for getPurchaseOrdersStatus operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetPurchaseOrdersStatusRequest
 */
export interface VendorOrdersApiGetPurchaseOrdersStatusRequest {
    /**
     * The limit to the number of records returned. Default value is 100 records.
     * @type {number}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly limit?: number

    /**
     * Sort in ascending or descending order by purchase order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more purchase orders than the specified result size limit.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly nextToken?: string

    /**
     * Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly createdAfter?: string

    /**
     * Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly createdBefore?: string

    /**
     * Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly updatedAfter?: string

    /**
     * Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly updatedBefore?: string

    /**
     * Provides purchase order status for the specified purchase order number.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly purchaseOrderNumber?: string

    /**
     * Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
     * @type {'OPEN' | 'CLOSED'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly purchaseOrderStatus?: 'OPEN' | 'CLOSED'

    /**
     * Filters purchase orders based on the specified purchase order item status. If not included in filter, purchase orders for all statuses are included.
     * @type {'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly itemConfirmationStatus?: 'ACCEPTED' | 'PARTIALLY_ACCEPTED' | 'REJECTED' | 'UNCONFIRMED'

    /**
     * Filters purchase orders based on the specified ordering vendor code. This value should be same as \&#39;sellingParty.partyId\&#39; in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly orderingVendorCode?: string

    /**
     * Filters purchase orders for a specific buyer\&#39;s Fulfillment Center/warehouse by providing ship to location id here. This value should be same as \&#39;shipToParty.partyId\&#39; in the purchase order. If not included in filter, this will return purchase orders for all the buyer\&#39;s warehouses used for vendor group purchase orders.
     * @type {string}
     * @memberof VendorOrdersApiGetPurchaseOrdersStatus
     */
    readonly shipToPartyId?: string
}

/**
 * Request parameters for submitAcknowledgement operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiSubmitAcknowledgementRequest
 */
export interface VendorOrdersApiSubmitAcknowledgementRequest {
    /**
     * 
     * @type {SubmitAcknowledgementRequest}
     * @memberof VendorOrdersApiSubmitAcknowledgement
     */
    readonly body: SubmitAcknowledgementRequest
}

/**
 * VendorOrdersApi - object-oriented interface
 * @export
 * @class VendorOrdersApi
 * @extends {BaseAPI}
 */
export class VendorOrdersApi extends BaseAPI {
    /**
     * Returns a purchase order based on the purchaseOrderNumber value that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiGetPurchaseOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrder(requestParameters: VendorOrdersApiGetPurchaseOrderRequest, options?: any) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrder(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of purchase orders created or changed during the time frame that you specify. You define the time frame using the createdAfter, createdBefore, changedAfter and changedBefore parameters. The date range to search must not be more than 7 days. You can choose to get only the purchase order numbers by setting includeDetails to false. You can then use the getPurchaseOrder operation to receive details for a specific purchase order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiGetPurchaseOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrders(requestParameters: VendorOrdersApiGetPurchaseOrdersRequest = {}, options?: any) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrders(requestParameters.limit, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.includeDetails, requestParameters.changedAfter, requestParameters.changedBefore, requestParameters.poItemState, requestParameters.isPOChanged, requestParameters.purchaseOrderState, requestParameters.orderingVendorCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns purchase order statuses based on the filters that you specify. Date range to search must not be more than 7 days. You can return a list of purchase order statuses using the available filters, or a single purchase order status by providing the purchase order number.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiGetPurchaseOrdersStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getPurchaseOrdersStatus(requestParameters: VendorOrdersApiGetPurchaseOrdersStatusRequest = {}, options?: any) {
        return VendorOrdersApiFp(this.configuration).getPurchaseOrdersStatus(requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.updatedAfter, requestParameters.updatedBefore, requestParameters.purchaseOrderNumber, requestParameters.purchaseOrderStatus, requestParameters.itemConfirmationStatus, requestParameters.orderingVendorCode, requestParameters.shipToPartyId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiSubmitAcknowledgementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public submitAcknowledgement(requestParameters: VendorOrdersApiSubmitAcknowledgementRequest, options?: any) {
        return VendorOrdersApiFp(this.configuration).submitAcknowledgement(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


