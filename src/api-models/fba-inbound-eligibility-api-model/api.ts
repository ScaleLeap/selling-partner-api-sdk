/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for FBA Inbound Eligibilty
 * With the FBA Inbound Eligibility API, you can build applications that let sellers get eligibility previews for items before shipping them to Amazon\'s fulfillment centers. With this API you can find out if an item is eligible for inbound shipment to Amazon\'s fulfillment centers in a specific marketplace. You can also find out if an item is eligible for using the manufacturer barcode for FBA inventory tracking. Sellers can use this information to inform their decisions about which items to ship Amazon\'s fulfillment centers.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The response schema for the getItemEligibilityPreview operation.
 * @export
 * @interface GetItemEligibilityPreviewResponse
 */
export interface GetItemEligibilityPreviewResponse {
    /**
     * 
     * @type {ItemEligibilityPreview}
     * @memberof GetItemEligibilityPreviewResponse
     */
    payload?: ItemEligibilityPreview;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetItemEligibilityPreviewResponse
     */
    errors?: Array<Error>;
}
/**
 * The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.
 * @export
 * @interface ItemEligibilityPreview
 */
export interface ItemEligibilityPreview {
    /**
     * The ASIN for which eligibility was determined.
     * @type {string}
     * @memberof ItemEligibilityPreview
     */
    asin: string;
    /**
     * The marketplace for which eligibility was determined.
     * @type {string}
     * @memberof ItemEligibilityPreview
     */
    marketplaceId?: string;
    /**
     * The program for which eligibility was determined.
     * @type {string}
     * @memberof ItemEligibilityPreview
     */
    program: ItemEligibilityPreviewProgramEnum;
    /**
     * Indicates if the item is eligible for the program.
     * @type {boolean}
     * @memberof ItemEligibilityPreview
     */
    isEligibleForProgram: boolean;
    /**
     * Potential Ineligibility Reason Codes.
     * @type {Array<string>}
     * @memberof ItemEligibilityPreview
     */
    ineligibilityReasonList?: Array<ItemEligibilityPreviewIneligibilityReasonListEnum>;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemEligibilityPreviewProgramEnum {
    Inbound = 'INBOUND',
    Commingling = 'COMMINGLING'
}
/**
    * @export
    * @enum {string}
    */
export enum ItemEligibilityPreviewIneligibilityReasonListEnum {
    FbaInb0004 = 'FBA_INB_0004',
    FbaInb0006 = 'FBA_INB_0006',
    FbaInb0007 = 'FBA_INB_0007',
    FbaInb0008 = 'FBA_INB_0008',
    FbaInb0009 = 'FBA_INB_0009',
    FbaInb0010 = 'FBA_INB_0010',
    FbaInb0011 = 'FBA_INB_0011',
    FbaInb0012 = 'FBA_INB_0012',
    FbaInb0013 = 'FBA_INB_0013',
    FbaInb0014 = 'FBA_INB_0014',
    FbaInb0015 = 'FBA_INB_0015',
    FbaInb0016 = 'FBA_INB_0016',
    FbaInb0017 = 'FBA_INB_0017',
    FbaInb0018 = 'FBA_INB_0018',
    FbaInb0019 = 'FBA_INB_0019',
    FbaInb0034 = 'FBA_INB_0034',
    FbaInb0035 = 'FBA_INB_0035',
    FbaInb0036 = 'FBA_INB_0036',
    FbaInb0037 = 'FBA_INB_0037',
    FbaInb0038 = 'FBA_INB_0038',
    FbaInb0050 = 'FBA_INB_0050',
    FbaInb0051 = 'FBA_INB_0051',
    FbaInb0053 = 'FBA_INB_0053',
    FbaInb0055 = 'FBA_INB_0055',
    FbaInb0056 = 'FBA_INB_0056',
    FbaInb0059 = 'FBA_INB_0059',
    FbaInb0065 = 'FBA_INB_0065',
    FbaInb0066 = 'FBA_INB_0066',
    FbaInb0067 = 'FBA_INB_0067',
    FbaInb0068 = 'FBA_INB_0068',
    FbaInb0095 = 'FBA_INB_0095',
    FbaInb0097 = 'FBA_INB_0097',
    FbaInb0098 = 'FBA_INB_0098',
    FbaInb0099 = 'FBA_INB_0099',
    FbaInb0100 = 'FBA_INB_0100',
    FbaInb0103 = 'FBA_INB_0103',
    FbaInb0104 = 'FBA_INB_0104',
    UnknownInbErrorCode = 'UNKNOWN_INB_ERROR_CODE'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message?: string;
    /**
     * Additional information that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}

/**
 * FbaInboundApi - axios parameter creator
 * @export
 */
export const FbaInboundApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This operation gets an eligibility preview for an item that you specify. You can specify the type of eligibility preview that you want (INBOUND or COMMINGLING). For INBOUND previews, you can specify the marketplace in which you want to determine the item\'s eligibility.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The ASIN of the item for which you want an eligibility preview.
         * @param {'INBOUND' | 'COMMINGLING'} program The program that you want to check eligibility against.
         * @param {Array<string>} [marketplaceIds] The identifier for the marketplace in which you want to determine eligibility. Required only when program&#x3D;INBOUND.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemEligibilityPreview: async (asin: string, program: 'INBOUND' | 'COMMINGLING', marketplaceIds?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getItemEligibilityPreview', 'asin', asin)
            // verify required parameter 'program' is not null or undefined
            assertParamExists('getItemEligibilityPreview', 'program', program)
            const localVarPath = `/fba/inbound/v1/eligibility/itemPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }

            if (program !== undefined) {
                localVarQueryParameter['program'] = program;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FbaInboundApi - functional programming interface
 * @export
 */
export const FbaInboundApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FbaInboundApiAxiosParamCreator(configuration)
    return {
        /**
         * This operation gets an eligibility preview for an item that you specify. You can specify the type of eligibility preview that you want (INBOUND or COMMINGLING). For INBOUND previews, you can specify the marketplace in which you want to determine the item\'s eligibility.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The ASIN of the item for which you want an eligibility preview.
         * @param {'INBOUND' | 'COMMINGLING'} program The program that you want to check eligibility against.
         * @param {Array<string>} [marketplaceIds] The identifier for the marketplace in which you want to determine eligibility. Required only when program&#x3D;INBOUND.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getItemEligibilityPreview(asin: string, program: 'INBOUND' | 'COMMINGLING', marketplaceIds?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetItemEligibilityPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getItemEligibilityPreview(asin, program, marketplaceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FbaInboundApi - factory interface
 * @export
 */
export const FbaInboundApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FbaInboundApiFp(configuration)
    return {
        /**
         * This operation gets an eligibility preview for an item that you specify. You can specify the type of eligibility preview that you want (INBOUND or COMMINGLING). For INBOUND previews, you can specify the marketplace in which you want to determine the item\'s eligibility.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} asin The ASIN of the item for which you want an eligibility preview.
         * @param {'INBOUND' | 'COMMINGLING'} program The program that you want to check eligibility against.
         * @param {Array<string>} [marketplaceIds] The identifier for the marketplace in which you want to determine eligibility. Required only when program&#x3D;INBOUND.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getItemEligibilityPreview(asin: string, program: 'INBOUND' | 'COMMINGLING', marketplaceIds?: Array<string>, options?: any): AxiosPromise<GetItemEligibilityPreviewResponse> {
            return localVarFp.getItemEligibilityPreview(asin, program, marketplaceIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FbaInboundApi - object-oriented interface
 * @export
 * @class FbaInboundApi
 * @extends {BaseAPI}
 */
export class FbaInboundApi extends BaseAPI {
    /**
     * This operation gets an eligibility preview for an item that you specify. You can specify the type of eligibility preview that you want (INBOUND or COMMINGLING). For INBOUND previews, you can specify the marketplace in which you want to determine the item\'s eligibility.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} asin The ASIN of the item for which you want an eligibility preview.
     * @param {'INBOUND' | 'COMMINGLING'} program The program that you want to check eligibility against.
     * @param {Array<string>} [marketplaceIds] The identifier for the marketplace in which you want to determine eligibility. Required only when program&#x3D;INBOUND.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FbaInboundApi
     */
    public getItemEligibilityPreview(asin: string, program: 'INBOUND' | 'COMMINGLING', marketplaceIds?: Array<string>, options?: any) {
        return FbaInboundApiFp(this.configuration).getItemEligibilityPreview(asin, program, marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }
}


