/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Retail Procurement Shipments
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Address of the party.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * Details of the carton/package being shipped.
 * @export
 * @interface Carton
 */
export interface Carton {
    /**
     * A list of carton identifiers.
     * @type {Array<ContainerIdentification>}
     * @memberof Carton
     */
    cartonIdentifiers?: Array<ContainerIdentification>;
    /**
     * Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.
     * @type {string}
     * @memberof Carton
     */
    cartonSequenceNumber: string;
    /**
     * 
     * @type {Dimensions}
     * @memberof Carton
     */
    dimensions?: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Carton
     */
    weight?: Weight;
    /**
     * This is required to be provided for every carton in the small parcel shipments.
     * @type {string}
     * @memberof Carton
     */
    trackingNumber?: string;
    /**
     * A list of container item details.
     * @type {Array<ContainerItem>}
     * @memberof Carton
     */
    items: Array<ContainerItem>;
}
/**
 * 
 * @export
 * @interface CartonReferenceDetails
 */
export interface CartonReferenceDetails {
    /**
     * Pallet level carton count is mandatory for single item pallet and optional for mixed item pallet.
     * @type {number}
     * @memberof CartonReferenceDetails
     */
    cartonCount?: number;
    /**
     * Array of reference numbers for the carton that are part of this pallet/shipment. Please provide the cartonSequenceNumber from the \'cartons\' segment to refer to that carton\'s details here.
     * @type {Array<string>}
     * @memberof CartonReferenceDetails
     */
    cartonReferenceNumbers: Array<string>;
}
/**
 * 
 * @export
 * @interface ContainerIdentification
 */
export interface ContainerIdentification {
    /**
     * The container identification type.
     * @type {string}
     * @memberof ContainerIdentification
     */
    containerIdentificationType: ContainerIdentificationContainerIdentificationTypeEnum;
    /**
     * Container identification number that adheres to the definition of the container identification type.
     * @type {string}
     * @memberof ContainerIdentification
     */
    containerIdentificationNumber: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ContainerIdentificationContainerIdentificationTypeEnum {
    Sscc = 'SSCC',
    Amzncc = 'AMZNCC',
    Gtin = 'GTIN',
    Bps = 'BPS',
    Cid = 'CID'
}

/**
 * Carton/Pallet level details for the item.
 * @export
 * @interface ContainerItem
 */
export interface ContainerItem {
    /**
     * The reference number for the item. Please provide the itemSequenceNumber from the \'items\' segment to refer to that item\'s details here.
     * @type {string}
     * @memberof ContainerItem
     */
    itemReference: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof ContainerItem
     */
    shippedQuantity: ItemQuantity;
    /**
     * 
     * @type {ItemDetails}
     * @memberof ContainerItem
     */
    itemDetails?: ItemDetails;
}
/**
 * Physical dimensional measurements of a container.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    length: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    width: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    height: string;
    /**
     * The unit of measure for dimensions.
     * @type {string}
     * @memberof Dimensions
     */
    unitOfMeasure: DimensionsUnitOfMeasureEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum DimensionsUnitOfMeasureEnum {
    In = 'In',
    Ft = 'Ft',
    Meter = 'Meter',
    Yard = 'Yard'
}

/**
 * 
 * @export
 * @interface Duration
 */
export interface Duration {
    /**
     * Unit for duration.
     * @type {string}
     * @memberof Duration
     */
    durationUnit: DurationDurationUnitEnum;
    /**
     * Value for the duration in terms of the durationUnit.
     * @type {number}
     * @memberof Duration
     */
    durationValue: number;
}

/**
    * @export
    * @enum {string}
    */
export enum DurationDurationUnitEnum {
    Days = 'Days',
    Months = 'Months'
}

/**
 * 
 * @export
 * @interface Expiry
 */
export interface Expiry {
    /**
     * Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.
     * @type {string}
     * @memberof Expiry
     */
    manufacturerDate?: string;
    /**
     * The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.
     * @type {string}
     * @memberof Expiry
     */
    expiryDate?: string;
    /**
     * 
     * @type {Duration}
     * @memberof Expiry
     */
    expiryAfterDuration?: Duration;
}
/**
 * 
 * @export
 * @interface ImportDetails
 */
export interface ImportDetails {
    /**
     * This is used for import purchase orders only. If the recipient requests, this field will contain the shipment method of payment.
     * @type {string}
     * @memberof ImportDetails
     */
    methodOfPayment?: ImportDetailsMethodOfPaymentEnum;
    /**
     * The container\'s seal number.
     * @type {string}
     * @memberof ImportDetails
     */
    sealNumber?: string;
    /**
     * 
     * @type {Route}
     * @memberof ImportDetails
     */
    route?: Route;
    /**
     * Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if shipment has multiple containers.
     * @type {string}
     * @memberof ImportDetails
     */
    importContainers?: string;
    /**
     * 
     * @type {Weight}
     * @memberof ImportDetails
     */
    billableWeight?: Weight;
    /**
     * Date on which the shipment is expected to be shipped. This value should not be in the past and not more than 60 days out in the future.
     * @type {string}
     * @memberof ImportDetails
     */
    estimatedShipByDate?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ImportDetailsMethodOfPaymentEnum {
    PaidByBuyer = 'PaidByBuyer',
    CollectOnDelivery = 'CollectOnDelivery',
    DefinedByBuyerAndSeller = 'DefinedByBuyerAndSeller',
    FobPortOfCall = 'FOBPortOfCall',
    PrepaidBySeller = 'PrepaidBySeller',
    PaidBySeller = 'PaidBySeller'
}

/**
 * Details of the item being shipped.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Item sequence number for the item. The first item will be 001, the second 002, and so on. This number is used as a reference to refer to this item from the carton or pallet level.
     * @type {string}
     * @memberof Item
     */
    itemSequenceNumber: string;
    /**
     * Amazon Standard Identification Number (ASIN) of an item.
     * @type {string}
     * @memberof Item
     */
    amazonProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the purchase order.
     * @type {string}
     * @memberof Item
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof Item
     */
    shippedQuantity: ItemQuantity;
    /**
     * 
     * @type {ItemDetails}
     * @memberof Item
     */
    itemDetails?: ItemDetails;
}
/**
 * Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
 * @export
 * @interface ItemDetails
 */
export interface ItemDetails {
    /**
     * The Amazon purchase order number for the shipment being confirmed. If the items in this shipment belong to multiple purchase order numbers that are in particular carton or pallet within the shipment, then provide the purchaseOrderNumber at the appropriate carton or pallet level. Formatting Notes: 8-character alpha-numeric code.
     * @type {string}
     * @memberof ItemDetails
     */
    purchaseOrderNumber?: string;
    /**
     * The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the Element String is applied. The data may refer to the trade item itself or to items contained. This field is mandatory for all perishable items.
     * @type {string}
     * @memberof ItemDetails
     */
    lotNumber?: string;
    /**
     * 
     * @type {Expiry}
     * @memberof ItemDetails
     */
    expiry?: Expiry;
    /**
     * 
     * @type {Money}
     * @memberof ItemDetails
     */
    maximumRetailPrice?: Money;
    /**
     * Identification of the instructions on how specified item/carton/pallet should be handled.
     * @type {string}
     * @memberof ItemDetails
     */
    handlingCode?: ItemDetailsHandlingCodeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemDetailsHandlingCodeEnum {
    Oversized = 'Oversized',
    Fragile = 'Fragile',
    Food = 'Food',
    HandleWithCare = 'HandleWithCare'
}

/**
 * Details of item quantity.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Amount of units shipped for a specific item at a shipment level. If the item is present only in certain cartons or pallets within the shipment, please provide this at the appropriate carton or pallet level.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount: number;
    /**
     * Unit of measure for the shipped quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure: ItemQuantityUnitOfMeasureEnum;
    /**
     * The case size, in the event that we ordered using cases. Otherwise, 1.
     * @type {number}
     * @memberof ItemQuantity
     */
    unitSize?: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemQuantityUnitOfMeasureEnum {
    Cases = 'Cases',
    Eaches = 'Eaches'
}

/**
 * Location identifier.
 * @export
 * @interface Location
 */
export interface Location {
    /**
     * Type of location identification.
     * @type {string}
     * @memberof Location
     */
    type?: string;
    /**
     * Location code.
     * @type {string}
     * @memberof Location
     */
    locationCode?: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Location
     */
    countryCode?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * An amount of money, including units in the form of currency.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Three digit currency code in ISO 4217 format.
     * @type {string}
     * @memberof Money
     */
    currencyCode: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Money
     */
    amount: string;
}
/**
 * Details of the Pallet/Tare being shipped.
 * @export
 * @interface Pallet
 */
export interface Pallet {
    /**
     * A list of pallet identifiers.
     * @type {Array<ContainerIdentification>}
     * @memberof Pallet
     */
    palletIdentifiers: Array<ContainerIdentification>;
    /**
     * Number of layers per pallet.
     * @type {number}
     * @memberof Pallet
     */
    tier?: number;
    /**
     * Number of cartons per layer on the pallet.
     * @type {number}
     * @memberof Pallet
     */
    block?: number;
    /**
     * 
     * @type {Dimensions}
     * @memberof Pallet
     */
    dimensions?: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Pallet
     */
    weight?: Weight;
    /**
     * 
     * @type {CartonReferenceDetails}
     * @memberof Pallet
     */
    cartonReferenceDetails?: CartonReferenceDetails;
    /**
     * A list of container item details.
     * @type {Array<ContainerItem>}
     * @memberof Pallet
     */
    items?: Array<ContainerItem>;
}
/**
 * 
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * 
     * @type {Address}
     * @memberof PartyIdentification
     */
    address?: Address;
    /**
     * Assigned identification for the party.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
    /**
     * Tax registration details of the entity.
     * @type {Array<TaxRegistrationDetails>}
     * @memberof PartyIdentification
     */
    taxRegistrationDetails?: Array<TaxRegistrationDetails>;
}
/**
 * This is used only for direct import shipment confirmations.
 * @export
 * @interface Route
 */
export interface Route {
    /**
     * 
     * @type {Array<Stop>}
     * @memberof Route
     */
    stops: Array<Stop>;
}
/**
 * 
 * @export
 * @interface ShipmentConfirmation
 */
export interface ShipmentConfirmation {
    /**
     * Unique shipment ID (not used over the last 365 days).
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shipmentIdentifier: string;
    /**
     * Indicates if this shipment confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and sellingParty information as in the previous confirmation.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shipmentConfirmationType: ShipmentConfirmationShipmentConfirmationTypeEnum;
    /**
     * The type of shipment.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shipmentType?: ShipmentConfirmationShipmentTypeEnum;
    /**
     * Shipment hierarchical structure.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shipmentStructure?: ShipmentConfirmationShipmentStructureEnum;
    /**
     * 
     * @type {TransportationDetails}
     * @memberof ShipmentConfirmation
     */
    transportationDetails?: TransportationDetails;
    /**
     * The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    amazonReferenceNumber?: string;
    /**
     * Date on which the shipment confirmation was submitted.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shipmentConfirmationDate: string;
    /**
     * The date and time of the departure of the shipment from the vendor\'s location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    shippedDate?: string;
    /**
     * The date and time on which the shipment is expected to reach buyer\'s warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by the buyer and is potentially not known when creating the shipment confirmation.
     * @type {string}
     * @memberof ShipmentConfirmation
     */
    estimatedDeliveryDate?: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentConfirmation
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentConfirmation
     */
    shipFromParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShipmentConfirmation
     */
    shipToParty: PartyIdentification;
    /**
     * 
     * @type {ShipmentMeasurements}
     * @memberof ShipmentConfirmation
     */
    shipmentMeasurements?: ShipmentMeasurements;
    /**
     * 
     * @type {ImportDetails}
     * @memberof ShipmentConfirmation
     */
    importDetails?: ImportDetails;
    /**
     * A list of the items in this shipment and their associated details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
     * @type {Array<Item>}
     * @memberof ShipmentConfirmation
     */
    shippedItems: Array<Item>;
    /**
     * A list of the cartons in this shipment.
     * @type {Array<Carton>}
     * @memberof ShipmentConfirmation
     */
    cartons?: Array<Carton>;
    /**
     * A list of the pallets in this shipment.
     * @type {Array<Pallet>}
     * @memberof ShipmentConfirmation
     */
    pallets?: Array<Pallet>;
}

/**
    * @export
    * @enum {string}
    */
export enum ShipmentConfirmationShipmentConfirmationTypeEnum {
    Original = 'Original',
    Replace = 'Replace'
}
/**
    * @export
    * @enum {string}
    */
export enum ShipmentConfirmationShipmentTypeEnum {
    TruckLoad = 'TruckLoad',
    LessThanTruckLoad = 'LessThanTruckLoad',
    SmallParcel = 'SmallParcel'
}
/**
    * @export
    * @enum {string}
    */
export enum ShipmentConfirmationShipmentStructureEnum {
    PalletizedAssortmentCase = 'PalletizedAssortmentCase',
    LooseAssortmentCase = 'LooseAssortmentCase',
    PalletOfItems = 'PalletOfItems',
    PalletizedStandardCase = 'PalletizedStandardCase',
    LooseStandardCase = 'LooseStandardCase',
    MasterPallet = 'MasterPallet',
    MasterCase = 'MasterCase'
}

/**
 * Shipment measurement details.
 * @export
 * @interface ShipmentMeasurements
 */
export interface ShipmentMeasurements {
    /**
     * 
     * @type {Weight}
     * @memberof ShipmentMeasurements
     */
    grossShipmentWeight?: Weight;
    /**
     * 
     * @type {Volume}
     * @memberof ShipmentMeasurements
     */
    shipmentVolume?: Volume;
    /**
     * Number of cartons present in the shipment. Provide the cartonCount only for unpalletized shipments.
     * @type {number}
     * @memberof ShipmentMeasurements
     */
    cartonCount?: number;
    /**
     * Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.
     * @type {number}
     * @memberof ShipmentMeasurements
     */
    palletCount?: number;
}
/**
 * Contractual or operational port or point relevant to the movement of the cargo.
 * @export
 * @interface Stop
 */
export interface Stop {
    /**
     * Provide the function code.
     * @type {string}
     * @memberof Stop
     */
    functionCode: StopFunctionCodeEnum;
    /**
     * 
     * @type {Location}
     * @memberof Stop
     */
    locationIdentification?: Location;
    /**
     * Date and time of the arrival of the cargo.
     * @type {string}
     * @memberof Stop
     */
    arrivalTime?: string;
    /**
     * Date and time of the departure of the cargo.
     * @type {string}
     * @memberof Stop
     */
    departureTime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum StopFunctionCodeEnum {
    PortOfDischarge = 'PortOfDischarge',
    FreightPayableAt = 'FreightPayableAt',
    PortOfLoading = 'PortOfLoading'
}

/**
 * The request schema for the SubmitShipmentConfirmations operation.
 * @export
 * @interface SubmitShipmentConfirmationsRequest
 */
export interface SubmitShipmentConfirmationsRequest {
    /**
     * 
     * @type {Array<ShipmentConfirmation>}
     * @memberof SubmitShipmentConfirmationsRequest
     */
    shipmentConfirmations?: Array<ShipmentConfirmation>;
}
/**
 * The response schema for the SubmitShipmentConfirmations operation.
 * @export
 * @interface SubmitShipmentConfirmationsResponse
 */
export interface SubmitShipmentConfirmationsResponse {
    /**
     * 
     * @type {TransactionReference}
     * @memberof SubmitShipmentConfirmationsResponse
     */
    payload?: TransactionReference;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitShipmentConfirmationsResponse
     */
    errors?: Array<Error>;
}
/**
 * Tax registration details of the entity.
 * @export
 * @interface TaxRegistrationDetails
 */
export interface TaxRegistrationDetails {
    /**
     * Tax registration type for the entity.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationType: TaxRegistrationDetailsTaxRegistrationTypeEnum;
    /**
     * Tax registration number for the entity. For example, VAT ID.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationNumber: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxRegistrationDetailsTaxRegistrationTypeEnum {
    Vat = 'VAT',
    Gst = 'GST'
}

/**
 * 
 * @export
 * @interface TransactionReference
 */
export interface TransactionReference {
    /**
     * GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionReference
     */
    transactionId?: string;
}
/**
 * 
 * @export
 * @interface TransportationDetails
 */
export interface TransportationDetails {
    /**
     * Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.
     * @type {string}
     * @memberof TransportationDetails
     */
    carrierScac?: string;
    /**
     * The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.
     * @type {string}
     * @memberof TransportationDetails
     */
    carrierShipmentReferenceNumber?: string;
    /**
     * The mode of transportation for this shipment.
     * @type {string}
     * @memberof TransportationDetails
     */
    transportationMode?: TransportationDetailsTransportationModeEnum;
    /**
     * Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
     * @type {string}
     * @memberof TransportationDetails
     */
    billOfLadingNumber?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TransportationDetailsTransportationModeEnum {
    Road = 'Road',
    Air = 'Air',
    Ocean = 'Ocean'
}

/**
 * The volume of the container.
 * @export
 * @interface Volume
 */
export interface Volume {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Volume
     */
    unitOfMeasure: VolumeUnitOfMeasureEnum;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Volume
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum VolumeUnitOfMeasureEnum {
    CuFt = 'CuFt',
    CuIn = 'CuIn',
    CuM = 'CuM',
    CuY = 'CuY'
}

/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Weight
     */
    unitOfMeasure: WeightUnitOfMeasureEnum;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation. <br>**Pattern** : `^-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?$`.
     * @type {string}
     * @memberof Weight
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitOfMeasureEnum {
    G = 'G',
    Kg = 'Kg',
    Oz = 'Oz',
    Lb = 'Lb'
}


/**
 * VendorShippingApi - axios parameter creator
 * @export
 */
export const VendorShippingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations: async (body: SubmitShipmentConfirmationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShipmentConfirmations', 'body', body)
            const localVarPath = `/vendor/shipping/v1/shipmentConfirmations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorShippingApi - functional programming interface
 * @export
 */
export const VendorShippingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorShippingApiAxiosParamCreator(configuration)
    return {
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShipmentConfirmations(body: SubmitShipmentConfirmationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitShipmentConfirmationsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShipmentConfirmations(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorShippingApi - factory interface
 * @export
 */
export const VendorShippingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorShippingApiFp(configuration)
    return {
        /**
         * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitShipmentConfirmationsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShipmentConfirmations(body: SubmitShipmentConfirmationsRequest, options?: any): AxiosPromise<SubmitShipmentConfirmationsResponse> {
            return localVarFp.submitShipmentConfirmations(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for submitShipmentConfirmations operation in VendorShippingApi.
 * @export
 * @interface VendorShippingApiSubmitShipmentConfirmationsRequest
 */
export interface VendorShippingApiSubmitShipmentConfirmationsRequest {
    /**
     * 
     * @type {SubmitShipmentConfirmationsRequest}
     * @memberof VendorShippingApiSubmitShipmentConfirmations
     */
    readonly body: SubmitShipmentConfirmationsRequest
}

/**
 * VendorShippingApi - object-oriented interface
 * @export
 * @class VendorShippingApi
 * @extends {BaseAPI}
 */
export class VendorShippingApi extends BaseAPI {
    /**
     * Submits one or more shipment confirmations for vendor orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorShippingApiSubmitShipmentConfirmationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingApi
     */
    public submitShipmentConfirmations(requestParameters: VendorShippingApiSubmitShipmentConfirmationsRequest, options?: any) {
        return VendorShippingApiFp(this.configuration).submitShipmentConfirmations(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


