/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Easy Ship
 * The Selling Partner API for Easy Ship helps you build applications that help sellers manage and ship Amazon Easy Ship orders.  Your Easy Ship applications can:  * Get available time slots for packages to be scheduled for delivery.  * Schedule, reschedule, and cancel Easy Ship orders.  * Print labels, invoices, and warranties.  See the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) for the differences in Easy Ship operations by marketplace.
 *
 * The version of the OpenAPI document: 2022-03-23
 * Contact: marketplaceapitest@amazon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * An error code that identifies the type of error that occurred. The error codes listed below are specific to the Easy Ship section.
 * @export
 * @enum {string}
 */
export enum Code {
    InvalidInput = 'InvalidInput',
    InvalidTimeSlotId = 'InvalidTimeSlotId',
    ScheduledPackageAlreadyExists = 'ScheduledPackageAlreadyExists',
    ScheduleWindowExpired = 'ScheduleWindowExpired',
    RetryableAfterGettingNewSlots = 'RetryableAfterGettingNewSlots',
    TimeSlotNotAvailable = 'TimeSlotNotAvailable',
    ResourceNotFound = 'ResourceNotFound',
    InvalidOrderState = 'InvalidOrderState',
    RegionNotSupported = 'RegionNotSupported',
    OrderNotEligibleForRescheduling = 'OrderNotEligibleForRescheduling',
    InternalServerError = 'InternalServerError'
}

/**
 * The request schema for the `createScheduledPackage` operation.
 * @export
 * @interface CreateScheduledPackageRequest
 */
export interface CreateScheduledPackageRequest {
    /**
     * An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
     * @type {string}
     * @memberof CreateScheduledPackageRequest
     */
    amazonOrderId: string;
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof CreateScheduledPackageRequest
     */
    marketplaceId: string;
    /**
     * 
     * @type {PackageDetails}
     * @memberof CreateScheduledPackageRequest
     */
    packageDetails: PackageDetails;
}
/**
 * The dimensions of the scheduled package.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * The numerical value of the specified dimension.
     * @type {number}
     * @memberof Dimensions
     */
    length?: number;
    /**
     * The numerical value of the specified dimension.
     * @type {number}
     * @memberof Dimensions
     */
    width?: number;
    /**
     * The numerical value of the specified dimension.
     * @type {number}
     * @memberof Dimensions
     */
    height?: number;
    /**
     * 
     * @type {UnitOfLength}
     * @memberof Dimensions
     */
    unit?: UnitOfLength | 'Cm';
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof Dimensions
     */
    identifier?: string;
}
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * Identifies the method by which a seller will hand a package over to Amazon Logistics.
 * @export
 * @enum {string}
 */
export enum HandoverMethod {
    Pickup = 'Pickup',
    Dropoff = 'Dropoff'
}

/**
 * Invoice number and date.
 * @export
 * @interface InvoiceData
 */
export interface InvoiceData {
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof InvoiceData
     */
    invoiceNumber: string;
    /**
     * A datetime value in ISO 8601 format.
     * @type {string}
     * @memberof InvoiceData
     */
    invoiceDate?: string;
}
/**
 * Item identifier and serial number information.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * The Amazon-defined order item identifier.
     * @type {string}
     * @memberof Item
     */
    orderItemId?: string;
    /**
     * A list of serial numbers for the items associated with the `OrderItemId` value.
     * @type {Array<string>}
     * @memberof Item
     */
    orderItemSerialNumbers?: Array<string>;
}
/**
 * The request schema for the `listHandoverSlots` operation.
 * @export
 * @interface ListHandoverSlotsRequest
 */
export interface ListHandoverSlotsRequest {
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof ListHandoverSlotsRequest
     */
    marketplaceId: string;
    /**
     * An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
     * @type {string}
     * @memberof ListHandoverSlotsRequest
     */
    amazonOrderId: string;
    /**
     * 
     * @type {Dimensions}
     * @memberof ListHandoverSlotsRequest
     */
    packageDimensions: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof ListHandoverSlotsRequest
     */
    packageWeight: Weight;
}
/**
 * The response schema for the `listHandoverSlots` operation.
 * @export
 * @interface ListHandoverSlotsResponse
 */
export interface ListHandoverSlotsResponse {
    /**
     * An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
     * @type {string}
     * @memberof ListHandoverSlotsResponse
     */
    amazonOrderId: string;
    /**
     * A list of time slots.
     * @type {Array<TimeSlot>}
     * @memberof ListHandoverSlotsResponse
     */
    timeSlots: Array<TimeSlot>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * A package. This object contains all the details of the scheduled Easy Ship package including the package identifier, physical attributes such as dimensions and weight, selected time slot to handover the package to carrier, status of the package, and tracking/invoice details.
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * 
     * @type {ScheduledPackageId}
     * @memberof Package
     */
    scheduledPackageId: ScheduledPackageId;
    /**
     * 
     * @type {Dimensions}
     * @memberof Package
     */
    packageDimensions: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Package
     */
    packageWeight: Weight;
    /**
     * A list of items contained in the package.
     * @type {Array<Item>}
     * @memberof Package
     */
    packageItems?: Array<Item>;
    /**
     * 
     * @type {TimeSlot}
     * @memberof Package
     */
    packageTimeSlot: TimeSlot;
    /**
     * Optional seller-created identifier that is printed on the shipping label to help the seller identify the package.
     * @type {string}
     * @memberof Package
     */
    packageIdentifier?: string;
    /**
     * 
     * @type {InvoiceData}
     * @memberof Package
     */
    invoice?: InvoiceData;
    /**
     * 
     * @type {PackageStatus}
     * @memberof Package
     */
    packageStatus?: PackageStatus | 'ReadyForPickup' | 'PickedUp' | 'AtOriginFC' | 'AtDestinationFC' | 'Delivered' | 'Rejected' | 'Undeliverable' | 'ReturnedToSeller' | 'LostInTransit' | 'LabelCanceled' | 'DamagedInTransit' | 'OutForDelivery';
    /**
     * 
     * @type {TrackingDetails}
     * @memberof Package
     */
    trackingDetails?: TrackingDetails;
}
/**
 * Package details. Includes `packageItems`, `packageTimeSlot`, and `packageIdentifier`.
 * @export
 * @interface PackageDetails
 */
export interface PackageDetails {
    /**
     * A list of items contained in the package.
     * @type {Array<Item>}
     * @memberof PackageDetails
     */
    packageItems?: Array<Item>;
    /**
     * 
     * @type {TimeSlot}
     * @memberof PackageDetails
     */
    packageTimeSlot: TimeSlot;
    /**
     * Optional seller-created identifier that is printed on the shipping label to help the seller identify the package.
     * @type {string}
     * @memberof PackageDetails
     */
    packageIdentifier?: string;
}
/**
 * The status of the package.
 * @export
 * @enum {string}
 */
export enum PackageStatus {
    ReadyForPickup = 'ReadyForPickup',
    PickedUp = 'PickedUp',
    AtOriginFc = 'AtOriginFC',
    AtDestinationFc = 'AtDestinationFC',
    Delivered = 'Delivered',
    Rejected = 'Rejected',
    Undeliverable = 'Undeliverable',
    ReturnedToSeller = 'ReturnedToSeller',
    LostInTransit = 'LostInTransit',
    LabelCanceled = 'LabelCanceled',
    DamagedInTransit = 'DamagedInTransit',
    OutForDelivery = 'OutForDelivery'
}

/**
 * A list of packages.
 * @export
 * @interface Packages
 */
export interface Packages {
    /**
     * 
     * @type {Array<Package>}
     * @memberof Packages
     */
    packages: Array<Package>;
}
/**
 * Identifies the scheduled package to be updated.
 * @export
 * @interface ScheduledPackageId
 */
export interface ScheduledPackageId {
    /**
     * An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
     * @type {string}
     * @memberof ScheduledPackageId
     */
    amazonOrderId: string;
    /**
     * An Amazon-defined identifier for the scheduled package.
     * @type {string}
     * @memberof ScheduledPackageId
     */
    packageId?: string;
}
/**
 * A time window to hand over an Easy Ship package to Amazon Logistics.
 * @export
 * @interface TimeSlot
 */
export interface TimeSlot {
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof TimeSlot
     */
    slotId: string;
    /**
     * A datetime value in ISO 8601 format.
     * @type {string}
     * @memberof TimeSlot
     */
    startTime?: string;
    /**
     * A datetime value in ISO 8601 format.
     * @type {string}
     * @memberof TimeSlot
     */
    endTime?: string;
    /**
     * 
     * @type {HandoverMethod}
     * @memberof TimeSlot
     */
    handoverMethod?: HandoverMethod | 'Pickup' | 'Dropoff';
}
/**
 * Representation of tracking metadata.
 * @export
 * @interface TrackingDetails
 */
export interface TrackingDetails {
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof TrackingDetails
     */
    trackingId?: string;
}
/**
 * The unit of measurement used to measure the length.
 * @export
 * @enum {string}
 */
export enum UnitOfLength {
    Cm = 'Cm'
}

/**
 * The unit of measurement used to measure the weight.
 * @export
 * @enum {string}
 */
export enum UnitOfWeight {
    Grams = 'Grams',
    G = 'G'
}

/**
 * Request to update the time slot of a package.
 * @export
 * @interface UpdatePackageDetails
 */
export interface UpdatePackageDetails {
    /**
     * 
     * @type {ScheduledPackageId}
     * @memberof UpdatePackageDetails
     */
    scheduledPackageId: ScheduledPackageId;
    /**
     * 
     * @type {TimeSlot}
     * @memberof UpdatePackageDetails
     */
    packageTimeSlot: TimeSlot;
}
/**
 * The request schema for the `updateScheduledPackages` operation.
 * @export
 * @interface UpdateScheduledPackagesRequest
 */
export interface UpdateScheduledPackagesRequest {
    /**
     * A string of up to 255 characters.
     * @type {string}
     * @memberof UpdateScheduledPackagesRequest
     */
    marketplaceId: string;
    /**
     * A list of package update details.
     * @type {Array<UpdatePackageDetails>}
     * @memberof UpdateScheduledPackagesRequest
     */
    updatePackageDetailsList: Array<UpdatePackageDetails>;
}
/**
 * The weight of the scheduled package
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The weight of the package.
     * @type {number}
     * @memberof Weight
     */
    value?: number;
    /**
     * 
     * @type {UnitOfWeight}
     * @memberof Weight
     */
    unit?: UnitOfWeight | 'Grams' | 'G';
}

/**
 * EasyShipApi - axios parameter creator
 * @export
 */
export const EasyShipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Schedules an Easy Ship order and returns the scheduled package information.  This operation does the following:  *  Specifies the time slot and handover method for the order to be scheduled for delivery.  * Updates the Easy Ship order status.  * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easy-ship-api-v2022-03-23-use-case-guide).  * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.  See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which documents are supported in each marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateScheduledPackageRequest} createScheduledPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduledPackage: async (createScheduledPackageRequest: CreateScheduledPackageRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createScheduledPackageRequest' is not null or undefined
            assertParamExists('createScheduledPackage', 'createScheduledPackageRequest', createScheduledPackageRequest)
            const localVarPath = `/easyShip/2022-03-23/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createScheduledPackageRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} amazonOrderId An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
         * @param {string} marketplaceId An identifier for the marketplace in which the seller is selling.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledPackage: async (amazonOrderId: string, marketplaceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('getScheduledPackage', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceId' is not null or undefined
            assertParamExists('getScheduledPackage', 'marketplaceId', marketplaceId)
            const localVarPath = `/easyShip/2022-03-23/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (amazonOrderId !== undefined) {
                localVarQueryParameter['amazonOrderId'] = amazonOrderId;
            }

            if (marketplaceId !== undefined) {
                localVarQueryParameter['marketplaceId'] = marketplaceId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.  This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListHandoverSlotsRequest} [listHandoverSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHandoverSlots: async (listHandoverSlotsRequest?: ListHandoverSlotsRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/easyShip/2022-03-23/timeSlot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(listHandoverSlotsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.  See the **Update Package** column in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which marketplaces this operation is supported in.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {UpdateScheduledPackagesRequest} [updateScheduledPackagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledPackages: async (updateScheduledPackagesRequest?: UpdateScheduledPackagesRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/easyShip/2022-03-23/package`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateScheduledPackagesRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EasyShipApi - functional programming interface
 * @export
 */
export const EasyShipApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EasyShipApiAxiosParamCreator(configuration)
    return {
        /**
         * Schedules an Easy Ship order and returns the scheduled package information.  This operation does the following:  *  Specifies the time slot and handover method for the order to be scheduled for delivery.  * Updates the Easy Ship order status.  * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easy-ship-api-v2022-03-23-use-case-guide).  * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.  See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which documents are supported in each marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateScheduledPackageRequest} createScheduledPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createScheduledPackage(createScheduledPackageRequest: CreateScheduledPackageRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Package>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createScheduledPackage(createScheduledPackageRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} amazonOrderId An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
         * @param {string} marketplaceId An identifier for the marketplace in which the seller is selling.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getScheduledPackage(amazonOrderId: string, marketplaceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Package>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getScheduledPackage(amazonOrderId, marketplaceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.  This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListHandoverSlotsRequest} [listHandoverSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listHandoverSlots(listHandoverSlotsRequest?: ListHandoverSlotsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListHandoverSlotsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listHandoverSlots(listHandoverSlotsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.  See the **Update Package** column in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which marketplaces this operation is supported in.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {UpdateScheduledPackagesRequest} [updateScheduledPackagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateScheduledPackages(updateScheduledPackagesRequest?: UpdateScheduledPackagesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Packages>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateScheduledPackages(updateScheduledPackagesRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EasyShipApi - factory interface
 * @export
 */
export const EasyShipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EasyShipApiFp(configuration)
    return {
        /**
         * Schedules an Easy Ship order and returns the scheduled package information.  This operation does the following:  *  Specifies the time slot and handover method for the order to be scheduled for delivery.  * Updates the Easy Ship order status.  * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easy-ship-api-v2022-03-23-use-case-guide).  * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.  See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which documents are supported in each marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateScheduledPackageRequest} createScheduledPackageRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createScheduledPackage(createScheduledPackageRequest: CreateScheduledPackageRequest, options?: any): AxiosPromise<Package> {
            return localVarFp.createScheduledPackage(createScheduledPackageRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} amazonOrderId An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
         * @param {string} marketplaceId An identifier for the marketplace in which the seller is selling.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getScheduledPackage(amazonOrderId: string, marketplaceId: string, options?: any): AxiosPromise<Package> {
            return localVarFp.getScheduledPackage(amazonOrderId, marketplaceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.  This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {ListHandoverSlotsRequest} [listHandoverSlotsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listHandoverSlots(listHandoverSlotsRequest?: ListHandoverSlotsRequest, options?: any): AxiosPromise<ListHandoverSlotsResponse> {
            return localVarFp.listHandoverSlots(listHandoverSlotsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.  See the **Update Package** column in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which marketplaces this operation is supported in.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {UpdateScheduledPackagesRequest} [updateScheduledPackagesRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateScheduledPackages(updateScheduledPackagesRequest?: UpdateScheduledPackagesRequest, options?: any): AxiosPromise<Packages> {
            return localVarFp.updateScheduledPackages(updateScheduledPackagesRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createScheduledPackage operation in EasyShipApi.
 * @export
 * @interface EasyShipApiCreateScheduledPackageRequest
 */
export interface EasyShipApiCreateScheduledPackageRequest {
    /**
     * 
     * @type {CreateScheduledPackageRequest}
     * @memberof EasyShipApiCreateScheduledPackage
     */
    readonly createScheduledPackageRequest: CreateScheduledPackageRequest
}

/**
 * Request parameters for getScheduledPackage operation in EasyShipApi.
 * @export
 * @interface EasyShipApiGetScheduledPackageRequest
 */
export interface EasyShipApiGetScheduledPackageRequest {
    /**
     * An Amazon-defined order identifier. Identifies the order that the seller wants to deliver using Amazon Easy Ship.
     * @type {string}
     * @memberof EasyShipApiGetScheduledPackage
     */
    readonly amazonOrderId: string

    /**
     * An identifier for the marketplace in which the seller is selling.
     * @type {string}
     * @memberof EasyShipApiGetScheduledPackage
     */
    readonly marketplaceId: string
}

/**
 * Request parameters for listHandoverSlots operation in EasyShipApi.
 * @export
 * @interface EasyShipApiListHandoverSlotsRequest
 */
export interface EasyShipApiListHandoverSlotsRequest {
    /**
     * 
     * @type {ListHandoverSlotsRequest}
     * @memberof EasyShipApiListHandoverSlots
     */
    readonly listHandoverSlotsRequest?: ListHandoverSlotsRequest
}

/**
 * Request parameters for updateScheduledPackages operation in EasyShipApi.
 * @export
 * @interface EasyShipApiUpdateScheduledPackagesRequest
 */
export interface EasyShipApiUpdateScheduledPackagesRequest {
    /**
     * 
     * @type {UpdateScheduledPackagesRequest}
     * @memberof EasyShipApiUpdateScheduledPackages
     */
    readonly updateScheduledPackagesRequest?: UpdateScheduledPackagesRequest
}

/**
 * EasyShipApi - object-oriented interface
 * @export
 * @class EasyShipApi
 * @extends {BaseAPI}
 */
export class EasyShipApi extends BaseAPI {
    /**
     * Schedules an Easy Ship order and returns the scheduled package information.  This operation does the following:  *  Specifies the time slot and handover method for the order to be scheduled for delivery.  * Updates the Easy Ship order status.  * Generates a shipping label and an invoice. Calling `createScheduledPackage` also generates a warranty document if you specify a `SerialNumber` value. To get these documents, see [How to get invoice, shipping label, and warranty documents](doc:easy-ship-api-v2022-03-23-use-case-guide).  * Shows the status of Easy Ship orders when you call the `getOrders` operation of the Selling Partner API for Orders and examine the `EasyShipShipmentStatus` property in the response body.  See the **Shipping Label**, **Invoice**, and **Warranty** columns in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which documents are supported in each marketplace.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {EasyShipApiCreateScheduledPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasyShipApi
     */
    public createScheduledPackage(requestParameters: EasyShipApiCreateScheduledPackageRequest, options?: any) {
        return EasyShipApiFp(this.configuration).createScheduledPackage(requestParameters.createScheduledPackageRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns information about a package, including dimensions, weight, time slot information for handover, invoice and item information, and status.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {EasyShipApiGetScheduledPackageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasyShipApi
     */
    public getScheduledPackage(requestParameters: EasyShipApiGetScheduledPackageRequest, options?: any) {
        return EasyShipApiFp(this.configuration).getScheduledPackage(requestParameters.amazonOrderId, requestParameters.marketplaceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns time slots available for Easy Ship orders to be scheduled based on the package weight and dimensions that the seller specifies.  This operation is available for scheduled and unscheduled orders based on marketplace support. See **Get Time Slots** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  This operation can return time slots that have either pickup or drop-off handover methods - see **Supported Handover Methods** in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide).  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {EasyShipApiListHandoverSlotsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasyShipApi
     */
    public listHandoverSlots(requestParameters: EasyShipApiListHandoverSlotsRequest = {}, options?: any) {
        return EasyShipApiFp(this.configuration).listHandoverSlots(requestParameters.listHandoverSlotsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the time slot for handing over the package indicated by the specified `scheduledPackageId`. You can get the new `slotId` value for the time slot by calling the `listHandoverSlots` operation before making another `patch` call.  See the **Update Package** column in the [Marketplace Support Table](doc:easy-ship-api-v2022-03-23-use-case-guide) to see which marketplaces this operation is supported in.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {EasyShipApiUpdateScheduledPackagesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EasyShipApi
     */
    public updateScheduledPackages(requestParameters: EasyShipApiUpdateScheduledPackagesRequest = {}, options?: any) {
        return EasyShipApiFp(this.configuration).updateScheduledPackages(requestParameters.updateScheduledPackagesRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


