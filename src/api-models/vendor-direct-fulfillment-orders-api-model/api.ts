/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Direct Fulfillment Orders
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor\'s order data.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Status of acknowledgement.
 * @export
 * @interface AcknowledgementStatus
 */
export interface AcknowledgementStatus {
    /**
     * Acknowledgement code is a unique two digit value which indicates the status of the acknowledgement. For a list of acknowledgement codes that Amazon supports, see the Vendor Direct Fulfillment APIs Use Case Guide.
     * @type {string}
     * @memberof AcknowledgementStatus
     */
    code?: string;
    /**
     * Reason for the acknowledgement code.
     * @type {string}
     * @memberof AcknowledgementStatus
     */
    description?: string;
}
/**
 * Address of the party.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The attention name of the person at that address.
     * @type {string}
     * @memberof Address
     */
    attention?: string;
    /**
     * First line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion: string;
    /**
     * The postal code of that address. It conatins a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code. In ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * The response schema for the getOrder operation.
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * 
     * @type {Order}
     * @memberof GetOrderResponse
     */
    payload?: Order;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrders operation.
 * @export
 * @interface GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * 
     * @type {OrderList}
     * @memberof GetOrdersResponse
     */
    payload?: OrderList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * Gift details for the item.
 * @export
 * @interface GiftDetails
 */
export interface GiftDetails {
    /**
     * Gift message to be printed in shipment.
     * @type {string}
     * @memberof GiftDetails
     */
    giftMessage?: string;
    /**
     * Gift wrap identifier for the gift wrapping, if any.
     * @type {string}
     * @memberof GiftDetails
     */
    giftWrapId?: string;
}
/**
 * Details of quantity ordered.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Acknowledged quantity. This value should not be zero.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount?: number;
    /**
     * Unit of measure for the acknowledged quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure?: ItemQuantityUnitOfMeasureEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemQuantityUnitOfMeasureEnum {
    Each = 'Each'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * An amount of money, including units in the form of currency.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * Three digit currency code in ISO 4217 format. String of length 3.
     * @type {string}
     * @memberof Money
     */
    currencyCode?: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
     * @type {string}
     * @memberof Money
     */
    amount?: string;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * The purchase order number for this order. Formatting Notes: alpha-numeric code.
     * @type {string}
     * @memberof Order
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {OrderDetails}
     * @memberof Order
     */
    orderDetails?: OrderDetails;
}
/**
 * Details of an individual order being acknowledged.
 * @export
 * @interface OrderAcknowledgementItem
 */
export interface OrderAcknowledgementItem {
    /**
     * The purchase order number for this order. Formatting Notes: alpha-numeric code.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    purchaseOrderNumber: string;
    /**
     * The vendor\'s order number for this order.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    vendorOrderNumber: string;
    /**
     * The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00.
     * @type {string}
     * @memberof OrderAcknowledgementItem
     */
    acknowledgementDate: string;
    /**
     * 
     * @type {AcknowledgementStatus}
     * @memberof OrderAcknowledgementItem
     */
    acknowledgementStatus: AcknowledgementStatus;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderAcknowledgementItem
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderAcknowledgementItem
     */
    shipFromParty: PartyIdentification;
    /**
     * Item details including acknowledged quantity.
     * @type {Array<OrderItemAcknowledgement>}
     * @memberof OrderAcknowledgementItem
     */
    itemAcknowledgements: Array<OrderItemAcknowledgement>;
}
/**
 * Details of an order.
 * @export
 * @interface OrderDetails
 */
export interface OrderDetails {
    /**
     * The customer order number.
     * @type {string}
     * @memberof OrderDetails
     */
    customerOrderNumber: string;
    /**
     * The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
     * @type {string}
     * @memberof OrderDetails
     */
    orderDate: string;
    /**
     * Current status of the order.
     * @type {string}
     * @memberof OrderDetails
     */
    orderStatus?: OrderDetailsOrderStatusEnum;
    /**
     * 
     * @type {ShipmentDetails}
     * @memberof OrderDetails
     */
    shipmentDetails: ShipmentDetails;
    /**
     * 
     * @type {OrderDetailsTaxTotal}
     * @memberof OrderDetails
     */
    taxTotal?: OrderDetailsTaxTotal;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    shipFromParty: PartyIdentification;
    /**
     * 
     * @type {Address}
     * @memberof OrderDetails
     */
    shipToParty: Address;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof OrderDetails
     */
    billToParty: PartyIdentification;
    /**
     * A list of items in this purchase order.
     * @type {Array<OrderItem>}
     * @memberof OrderDetails
     */
    items: Array<OrderItem>;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderDetailsOrderStatusEnum {
    New = 'NEW',
    Shipped = 'SHIPPED',
    Accepted = 'ACCEPTED',
    Cancelled = 'CANCELLED'
}

/**
 * 
 * @export
 * @interface OrderDetailsTaxTotal
 */
export interface OrderDetailsTaxTotal {
    /**
     * A list of tax line items.
     * @type {Array<TaxDetails>}
     * @memberof OrderDetailsTaxTotal
     */
    taxLineItem?: Array<TaxDetails>;
}
/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
     * @type {string}
     * @memberof OrderItem
     */
    itemSequenceNumber: string;
    /**
     * Buyer\'s standard identification number (ASIN) of an item.
     * @type {string}
     * @memberof OrderItem
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item.
     * @type {string}
     * @memberof OrderItem
     */
    vendorProductIdentifier?: string;
    /**
     * Title for the item.
     * @type {string}
     * @memberof OrderItem
     */
    title?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItem
     */
    orderedQuantity: ItemQuantity;
    /**
     * 
     * @type {ScheduledDeliveryShipment}
     * @memberof OrderItem
     */
    scheduledDeliveryShipment?: ScheduledDeliveryShipment;
    /**
     * 
     * @type {GiftDetails}
     * @memberof OrderItem
     */
    giftDetails?: GiftDetails;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    netPrice: Money;
    /**
     * 
     * @type {OrderItemTaxDetails}
     * @memberof OrderItem
     */
    taxDetails?: OrderItemTaxDetails;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    totalPrice?: Money;
}
/**
 * 
 * @export
 * @interface OrderItemAcknowledgement
 */
export interface OrderItemAcknowledgement {
    /**
     * Line item sequence number for the item.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    itemSequenceNumber: string;
    /**
     * Buyer\'s standard identification number (ASIN) of an item.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was provided in the purchase order.
     * @type {string}
     * @memberof OrderItemAcknowledgement
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof OrderItemAcknowledgement
     */
    acknowledgedQuantity: ItemQuantity;
}
/**
 * Total tax details for the line item.
 * @export
 * @interface OrderItemTaxDetails
 */
export interface OrderItemTaxDetails {
    /**
     * A list of tax line items.
     * @type {Array<TaxDetails>}
     * @memberof OrderItemTaxDetails
     */
    taxLineItem?: Array<TaxDetails>;
}
/**
 * 
 * @export
 * @interface OrderList
 */
export interface OrderList {
    /**
     * 
     * @type {Pagination}
     * @memberof OrderList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrderList
     */
    orders?: Array<Order>;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
    /**
     * 
     * @type {Address}
     * @memberof PartyIdentification
     */
    address?: Address;
    /**
     * 
     * @type {TaxRegistrationDetails}
     * @memberof PartyIdentification
     */
    taxInfo?: TaxRegistrationDetails;
}
/**
 * Dates for the scheduled delivery shipments.
 * @export
 * @interface ScheduledDeliveryShipment
 */
export interface ScheduledDeliveryShipment {
    /**
     * Scheduled delivery service type.
     * @type {string}
     * @memberof ScheduledDeliveryShipment
     */
    scheduledDeliveryServiceType?: string;
    /**
     * Earliest nominated delivery date for the scheduled delivery.
     * @type {string}
     * @memberof ScheduledDeliveryShipment
     */
    earliestNominatedDeliveryDate?: string;
    /**
     * Latest nominated delivery date for the scheduled delivery.
     * @type {string}
     * @memberof ScheduledDeliveryShipment
     */
    latestNominatedDeliveryDate?: string;
}
/**
 * Shipment dates.
 * @export
 * @interface ShipmentDates
 */
export interface ShipmentDates {
    /**
     * Time by which the vendor is required to ship the order.
     * @type {string}
     * @memberof ShipmentDates
     */
    requiredShipDate: string;
    /**
     * Delivery date promised to the Amazon customer.
     * @type {string}
     * @memberof ShipmentDates
     */
    promisedDeliveryDate?: string;
}
/**
 * Shipment details required for the shipment.
 * @export
 * @interface ShipmentDetails
 */
export interface ShipmentDetails {
    /**
     * When true, this is a priority shipment.
     * @type {boolean}
     * @memberof ShipmentDetails
     */
    isPriorityShipment: boolean;
    /**
     * When true, this order is part of a scheduled delivery program.
     * @type {boolean}
     * @memberof ShipmentDetails
     */
    isScheduledDeliveryShipment?: boolean;
    /**
     * When true, a packing slip is required to be sent to the customer.
     * @type {boolean}
     * @memberof ShipmentDetails
     */
    isPslipRequired: boolean;
    /**
     * When true, the order contain a gift. Include the gift message and gift wrap information.
     * @type {boolean}
     * @memberof ShipmentDetails
     */
    isGift?: boolean;
    /**
     * Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the \'Help\' section on Vendor Central for \'ship methods\'.
     * @type {string}
     * @memberof ShipmentDetails
     */
    shipMethod: string;
    /**
     * 
     * @type {ShipmentDates}
     * @memberof ShipmentDetails
     */
    shipmentDates: ShipmentDates;
    /**
     * Message to customer for order status.
     * @type {string}
     * @memberof ShipmentDetails
     */
    messageToCustomer: string;
}
/**
 * The request schema for the submitAcknowledgement operation.
 * @export
 * @interface SubmitAcknowledgementRequest
 */
export interface SubmitAcknowledgementRequest {
    /**
     * A list of one or more purchase orders.
     * @type {Array<OrderAcknowledgementItem>}
     * @memberof SubmitAcknowledgementRequest
     */
    orderAcknowledgements?: Array<OrderAcknowledgementItem>;
}
/**
 * The response schema for the submitAcknowledgement operation.
 * @export
 * @interface SubmitAcknowledgementResponse
 */
export interface SubmitAcknowledgementResponse {
    /**
     * 
     * @type {TransactionId}
     * @memberof SubmitAcknowledgementResponse
     */
    payload?: TransactionId;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof SubmitAcknowledgementResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface TaxDetails
 */
export interface TaxDetails {
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.
     * @type {string}
     * @memberof TaxDetails
     */
    taxRate?: string;
    /**
     * 
     * @type {Money}
     * @memberof TaxDetails
     */
    taxAmount: Money;
    /**
     * 
     * @type {Money}
     * @memberof TaxDetails
     */
    taxableAmount?: Money;
    /**
     * Tax type.
     * @type {string}
     * @memberof TaxDetails
     */
    type?: TaxDetailsTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxDetailsTypeEnum {
    Consumption = 'CONSUMPTION',
    Gst = 'GST',
    MwSt = 'MwSt.',
    Pst = 'PST',
    Total = 'TOTAL',
    Tva = 'TVA',
    Vat = 'VAT'
}

/**
 * Tax registration details of the entity.
 * @export
 * @interface TaxRegistrationDetails
 */
export interface TaxRegistrationDetails {
    /**
     * Tax registration type for the entity.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationType?: TaxRegistrationDetailsTaxRegistrationTypeEnum;
    /**
     * Tax registration number for the party. For example, VAT ID.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationNumber: string;
    /**
     * 
     * @type {Address}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationAddress?: Address;
    /**
     * Tax registration message that can be used for additional tax related details.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationMessages?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxRegistrationDetailsTaxRegistrationTypeEnum {
    Vat = 'VAT',
    Gst = 'GST'
}

/**
 * 
 * @export
 * @interface TransactionId
 */
export interface TransactionId {
    /**
     * GUID assigned by Amazon to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionId
     */
    transactionId?: string;
}

/**
 * VendorOrdersApi - axios parameter creator
 * @export
 */
export const VendorOrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getOrder', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/directFulfillment/orders/v1/purchaseOrders/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
         * @param {'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED'} [status] Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
         * @param {number} [limit] The limit to the number of purchase orders returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort the list in ascending or descending order by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {boolean} [includeDetails] When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (createdAfter: string, createdBefore: string, shipFromPartyId?: string, status?: 'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED', limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAfter' is not null or undefined
            assertParamExists('getOrders', 'createdAfter', createdAfter)
            // verify required parameter 'createdBefore' is not null or undefined
            assertParamExists('getOrders', 'createdBefore', createdBefore)
            const localVarPath = `/vendor/directFulfillment/orders/v1/purchaseOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipFromPartyId !== undefined) {
                localVarQueryParameter['shipFromPartyId'] = shipFromPartyId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }

            if (includeDetails !== undefined) {
                localVarQueryParameter['includeDetails'] = includeDetails;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement: async (body: SubmitAcknowledgementRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitAcknowledgement', 'body', body)
            const localVarPath = `/vendor/directFulfillment/orders/v1/acknowledgements`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorOrdersApi - functional programming interface
 * @export
 */
export const VendorOrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorOrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
         * @param {'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED'} [status] Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
         * @param {number} [limit] The limit to the number of purchase orders returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort the list in ascending or descending order by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {boolean} [includeDetails] When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(createdAfter: string, createdBefore: string, shipFromPartyId?: string, status?: 'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED', limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitAcknowledgement(body: SubmitAcknowledgementRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubmitAcknowledgementResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitAcknowledgement(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorOrdersApi - factory interface
 * @export
 */
export const VendorOrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorOrdersApiFp(configuration)
    return {
        /**
         * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} purchaseOrderNumber The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(purchaseOrderNumber: string, options?: any): AxiosPromise<GetOrderResponse> {
            return localVarFp.getOrder(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} createdAfter Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
         * @param {'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED'} [status] Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
         * @param {number} [limit] The limit to the number of purchase orders returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort the list in ascending or descending order by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
         * @param {boolean} [includeDetails] When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(createdAfter: string, createdBefore: string, shipFromPartyId?: string, status?: 'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED', limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, includeDetails?: boolean, options?: any): AxiosPromise<GetOrdersResponse> {
            return localVarFp.getOrders(createdAfter, createdBefore, shipFromPartyId, status, limit, sortOrder, nextToken, includeDetails, options).then((request) => request(axios, basePath));
        },
        /**
         * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {SubmitAcknowledgementRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitAcknowledgement(body: SubmitAcknowledgementRequest, options?: any): AxiosPromise<SubmitAcknowledgementResponse> {
            return localVarFp.submitAcknowledgement(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getOrder operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetOrderRequest
 */
export interface VendorOrdersApiGetOrderRequest {
    /**
     * The order identifier for the purchase order that you want. Formatting Notes: alpha-numeric code.
     * @type {string}
     * @memberof VendorOrdersApiGetOrder
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getOrders operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiGetOrdersRequest
 */
export interface VendorOrdersApiGetOrdersRequest {
    /**
     * Purchase orders that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly createdAfter: string

    /**
     * Purchase orders that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly createdBefore: string

    /**
     * The vendor warehouse identifier for the fulfillment warehouse. If not specified, the result will contain orders for all warehouses.
     * @type {string}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly shipFromPartyId?: string

    /**
     * Returns only the purchase orders that match the specified status. If not specified, the result will contain orders that match any status.
     * @type {'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED'}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly status?: 'NEW' | 'SHIPPED' | 'ACCEPTED' | 'CANCELLED'

    /**
     * The limit to the number of purchase orders returned.
     * @type {number}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly limit?: number

    /**
     * Sort the list in ascending or descending order by order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more orders than the specified result size limit. The token value is returned in the previous API call.
     * @type {string}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly nextToken?: string

    /**
     * When true, returns the complete purchase order details. Otherwise, only purchase order numbers are returned.
     * @type {boolean}
     * @memberof VendorOrdersApiGetOrders
     */
    readonly includeDetails?: boolean
}

/**
 * Request parameters for submitAcknowledgement operation in VendorOrdersApi.
 * @export
 * @interface VendorOrdersApiSubmitAcknowledgementRequest
 */
export interface VendorOrdersApiSubmitAcknowledgementRequest {
    /**
     * 
     * @type {SubmitAcknowledgementRequest}
     * @memberof VendorOrdersApiSubmitAcknowledgement
     */
    readonly body: SubmitAcknowledgementRequest
}

/**
 * VendorOrdersApi - object-oriented interface
 * @export
 * @class VendorOrdersApi
 * @extends {BaseAPI}
 */
export class VendorOrdersApi extends BaseAPI {
    /**
     * Returns purchase order information for the purchaseOrderNumber that you specify.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getOrder(requestParameters: VendorOrdersApiGetOrderRequest, options?: any) {
        return VendorOrdersApiFp(this.configuration).getOrder(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of purchase orders created during the time frame that you specify. You define the time frame using the createdAfter and createdBefore parameters. You must use both parameters. You can choose to get only the purchase order numbers by setting the includeDetails parameter to false. In that case, the operation returns a list of purchase order numbers. You can then call the getOrder operation to return the details of a specific order.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public getOrders(requestParameters: VendorOrdersApiGetOrdersRequest, options?: any) {
        return VendorOrdersApiFp(this.configuration).getOrders(requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipFromPartyId, requestParameters.status, requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, requestParameters.includeDetails, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Submits acknowledgements for one or more purchase orders.  **Usage Plans:**  | Plan type | Rate (requests per second) | Burst | | ---- | ---- | ---- | |Default| 10 | 10 | |Selling partner specific| Variable | Variable |  The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {VendorOrdersApiSubmitAcknowledgementRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorOrdersApi
     */
    public submitAcknowledgement(requestParameters: VendorOrdersApiSubmitAcknowledgementRequest, options?: any) {
        return VendorOrdersApiFp(this.configuration).submitAcknowledgement(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


