/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Direct Fulfillment Shipping
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor\'s shipping data.
 *
 * The version of the OpenAPI document: 2021-12-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Address of the party.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name of the person, business or institution at that address.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * First line of the address.
     * @type {string}
     * @memberof Address
     */
    addressLine1: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city where the person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region where person, business or institution is located.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The two digit country code in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode: string;
    /**
     * The phone number of the person, business or institution located at that address.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
}
/**
 * 
 * @export
 * @interface Container
 */
export interface Container {
    /**
     * The type of container.
     * @type {string}
     * @memberof Container
     */
    containerType: ContainerContainerTypeEnum | 'Carton' | 'Pallet';
    /**
     * The container identifier.
     * @type {string}
     * @memberof Container
     */
    containerIdentifier: string;
    /**
     * The tracking number.
     * @type {string}
     * @memberof Container
     */
    trackingNumber?: string;
    /**
     * The manifest identifier.
     * @type {string}
     * @memberof Container
     */
    manifestId?: string;
    /**
     * The date of the manifest.
     * @type {string}
     * @memberof Container
     */
    manifestDate?: string;
    /**
     * The shipment method.
     * @type {string}
     * @memberof Container
     */
    shipMethod?: string;
    /**
     * SCAC code required for NA VOC vendors only.
     * @type {string}
     * @memberof Container
     */
    scacCode?: string;
    /**
     * Carrier required for EU VOC vendors only.
     * @type {string}
     * @memberof Container
     */
    carrier?: string;
    /**
     * An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
     * @type {number}
     * @memberof Container
     */
    containerSequenceNumber?: number;
    /**
     * 
     * @type {Dimensions}
     * @memberof Container
     */
    dimensions?: Dimensions;
    /**
     * 
     * @type {Weight}
     * @memberof Container
     */
    weight?: Weight;
    /**
     * A list of packed items.
     * @type {Array<PackedItem>}
     * @memberof Container
     */
    packedItems: Array<PackedItem>;
}

/**
    * @export
    * @enum {string}
    */
export enum ContainerContainerTypeEnum {
    Carton = 'Carton',
    Pallet = 'Pallet'
}

/**
 * 
 * @export
 * @interface CustomerInvoice
 */
export interface CustomerInvoice {
    /**
     * The purchase order number for this order.
     * @type {string}
     * @memberof CustomerInvoice
     */
    purchaseOrderNumber: string;
    /**
     * The Base64encoded customer invoice.
     * @type {string}
     * @memberof CustomerInvoice
     */
    content: string;
}
/**
 * 
 * @export
 * @interface CustomerInvoiceList
 */
export interface CustomerInvoiceList {
    /**
     * 
     * @type {Pagination}
     * @memberof CustomerInvoiceList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<CustomerInvoice>}
     * @memberof CustomerInvoiceList
     */
    customerInvoices?: Array<CustomerInvoice>;
}
/**
 * Physical dimensional measurements of a container.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    length: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    width: string;
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Dimensions
     */
    height: string;
    /**
     * The unit of measure for dimensions.
     * @type {string}
     * @memberof Dimensions
     */
    unitOfMeasure: DimensionsUnitOfMeasureEnum | 'IN' | 'CM';
}

/**
    * @export
    * @enum {string}
    */
export enum DimensionsUnitOfMeasureEnum {
    In = 'IN',
    Cm = 'CM'
}

/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * The response schema for the getCustomerInvoice operation.
 * @export
 * @interface GetCustomerInvoiceResponse
 */
export interface GetCustomerInvoiceResponse {
    /**
     * 
     * @type {CustomerInvoice}
     * @memberof GetCustomerInvoiceResponse
     */
    payload?: CustomerInvoice;
    /**
     * 
     * @type {ErrorList}
     * @memberof GetCustomerInvoiceResponse
     */
    errors?: ErrorList;
}
/**
 * The response schema for the getCustomerInvoices operation.
 * @export
 * @interface GetCustomerInvoicesResponse
 */
export interface GetCustomerInvoicesResponse {
    /**
     * 
     * @type {CustomerInvoiceList}
     * @memberof GetCustomerInvoicesResponse
     */
    payload?: CustomerInvoiceList;
    /**
     * 
     * @type {ErrorList}
     * @memberof GetCustomerInvoicesResponse
     */
    errors?: ErrorList;
}
/**
 * The response schema for the getShippingLabels operation.
 * @export
 * @interface GetShippingLabelListResponse
 */
export interface GetShippingLabelListResponse {
    /**
     * 
     * @type {ShippingLabelList}
     * @memberof GetShippingLabelListResponse
     */
    payload?: ShippingLabelList;
    /**
     * 
     * @type {ErrorList}
     * @memberof GetShippingLabelListResponse
     */
    errors?: ErrorList;
}
/**
 * The response schema for the getShippingLabel operation.
 * @export
 * @interface GetShippingLabelResponse
 */
export interface GetShippingLabelResponse {
    /**
     * 
     * @type {ShippingLabel}
     * @memberof GetShippingLabelResponse
     */
    payload?: ShippingLabel;
    /**
     * 
     * @type {ErrorList}
     * @memberof GetShippingLabelResponse
     */
    errors?: ErrorList;
}
/**
 * Details of the item being shipped.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Item Sequence Number for the item. This must be the same value as sent in order for a given item.
     * @type {number}
     * @memberof Item
     */
    itemSequenceNumber: number;
    /**
     * Buyer\'s Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
     * @type {string}
     * @memberof Item
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the purchase order, like SKU Number.
     * @type {string}
     * @memberof Item
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof Item
     */
    shippedQuantity: ItemQuantity;
}
/**
 * Details of item quantity.
 * @export
 * @interface ItemQuantity
 */
export interface ItemQuantity {
    /**
     * Quantity of units shipped for a specific item at a shipment level. If the item is present only in certain packages or pallets within the shipment, please provide this at the appropriate package or pallet level.
     * @type {number}
     * @memberof ItemQuantity
     */
    amount: number;
    /**
     * Unit of measure for the shipped quantity.
     * @type {string}
     * @memberof ItemQuantity
     */
    unitOfMeasure: string;
}
/**
 * Details of the shipment label.
 * @export
 * @interface LabelData
 */
export interface LabelData {
    /**
     * Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
     * @type {string}
     * @memberof LabelData
     */
    packageIdentifier?: string;
    /**
     * Package tracking identifier from the shipping carrier.
     * @type {string}
     * @memberof LabelData
     */
    trackingNumber?: string;
    /**
     * Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.
     * @type {string}
     * @memberof LabelData
     */
    shipMethod?: string;
    /**
     * Shipping method name for internal reference.
     * @type {string}
     * @memberof LabelData
     */
    shipMethodName?: string;
    /**
     * This field will contain the Base64encoded string of the shipment label content.
     * @type {string}
     * @memberof LabelData
     */
    content: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface PackedItem
 */
export interface PackedItem {
    /**
     * Item Sequence Number for the item. This must be the same value as sent in the order for a given item.
     * @type {number}
     * @memberof PackedItem
     */
    itemSequenceNumber: number;
    /**
     * Buyer\'s Standard Identification Number (ASIN) of an item. Either buyerProductIdentifier or vendorProductIdentifier is required.
     * @type {string}
     * @memberof PackedItem
     */
    buyerProductIdentifier?: string;
    /**
     * The vendor selected product identification of the item. Should be the same as was sent in the Purchase Order, like SKU Number.
     * @type {string}
     * @memberof PackedItem
     */
    vendorProductIdentifier?: string;
    /**
     * 
     * @type {ItemQuantity}
     * @memberof PackedItem
     */
    packedQuantity: ItemQuantity;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * A generated string used to pass information to your next request. If NextToken is returned, pass the value of NextToken to the next request. If NextToken is not returned, there are no more order items to return.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
}
/**
 * 
 * @export
 * @interface PartyIdentification
 */
export interface PartyIdentification {
    /**
     * Assigned Identification for the party.
     * @type {string}
     * @memberof PartyIdentification
     */
    partyId: string;
    /**
     * 
     * @type {Address}
     * @memberof PartyIdentification
     */
    address?: Address;
    /**
     * Tax registration details of the entity.
     * @type {Array<TaxRegistrationDetails>}
     * @memberof PartyIdentification
     */
    taxRegistrationDetails?: Array<TaxRegistrationDetails>;
}
/**
 * 
 * @export
 * @interface ShippingLabel
 */
export interface ShippingLabel {
    /**
     * This field will contain the Purchase Order Number for this order.
     * @type {string}
     * @memberof ShippingLabel
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabel
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabel
     */
    shipFromParty: PartyIdentification;
    /**
     * Format of the label.
     * @type {string}
     * @memberof ShippingLabel
     */
    labelFormat: ShippingLabelLabelFormatEnum | 'PNG' | 'ZPL';
    /**
     * Provides the details of the packages in this shipment.
     * @type {Array<LabelData>}
     * @memberof ShippingLabel
     */
    labelData: Array<LabelData>;
}

/**
    * @export
    * @enum {string}
    */
export enum ShippingLabelLabelFormatEnum {
    Png = 'PNG',
    Zpl = 'ZPL'
}

/**
 * 
 * @export
 * @interface ShippingLabelList
 */
export interface ShippingLabelList {
    /**
     * 
     * @type {Pagination}
     * @memberof ShippingLabelList
     */
    pagination?: Pagination;
    /**
     * 
     * @type {Array<ShippingLabel>}
     * @memberof ShippingLabelList
     */
    shippingLabels?: Array<ShippingLabel>;
}
/**
 * 
 * @export
 * @interface ShippingLabelRequest
 */
export interface ShippingLabelRequest {
    /**
     * Purchase order number of the order for which to create a shipping label.
     * @type {string}
     * @memberof ShippingLabelRequest
     */
    purchaseOrderNumber: string;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabelRequest
     */
    sellingParty: PartyIdentification;
    /**
     * 
     * @type {PartyIdentification}
     * @memberof ShippingLabelRequest
     */
    shipFromParty: PartyIdentification;
    /**
     * A list of the packages in this shipment.
     * @type {Array<Container>}
     * @memberof ShippingLabelRequest
     */
    containers?: Array<Container>;
}
/**
 * 
 * @export
 * @interface SubmitShippingLabelsRequest
 */
export interface SubmitShippingLabelsRequest {
    /**
     * 
     * @type {Array<ShippingLabelRequest>}
     * @memberof SubmitShippingLabelsRequest
     */
    shippingLabelRequests?: Array<ShippingLabelRequest>;
}
/**
 * The response schema for the submitShippingLabelRequest operation.
 * @export
 * @interface SubmitShippingLabelsResponse
 */
export interface SubmitShippingLabelsResponse {
    /**
     * 
     * @type {TransactionReference}
     * @memberof SubmitShippingLabelsResponse
     */
    payload?: TransactionReference;
    /**
     * 
     * @type {ErrorList}
     * @memberof SubmitShippingLabelsResponse
     */
    errors?: ErrorList;
}
/**
 * Tax registration details of the entity.
 * @export
 * @interface TaxRegistrationDetails
 */
export interface TaxRegistrationDetails {
    /**
     * Tax registration type for the entity.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationType?: TaxRegistrationDetailsTaxRegistrationTypeEnum | 'VAT' | 'GST';
    /**
     * Tax registration number for the party. For example, VAT ID.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationNumber: string;
    /**
     * 
     * @type {Address}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationAddress?: Address;
    /**
     * Tax registration message that can be used for additional tax related details.
     * @type {string}
     * @memberof TaxRegistrationDetails
     */
    taxRegistrationMessages?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxRegistrationDetailsTaxRegistrationTypeEnum {
    Vat = 'VAT',
    Gst = 'GST'
}

/**
 * 
 * @export
 * @interface TransactionReference
 */
export interface TransactionReference {
    /**
     * GUID to identify this transaction. This value can be used with the Transaction Status API to return the status of this transaction.
     * @type {string}
     * @memberof TransactionReference
     */
    transactionId?: string;
}
/**
 * The weight.
 * @export
 * @interface Weight
 */
export interface Weight {
    /**
     * The unit of measurement.
     * @type {string}
     * @memberof Weight
     */
    unitOfMeasure: WeightUnitOfMeasureEnum | 'KG' | 'LB';
    /**
     * A decimal number with no loss of precision. Useful when precision loss is unacceptable, as with currencies. Follows RFC7159 for number representation.  <br>**Pattern** : `^-?(0|([1-9]\\\\d*))(\\\\.\\\\d+)?([eE][+-]?\\\\d+)?$`.
     * @type {string}
     * @memberof Weight
     */
    value: string;
}

/**
    * @export
    * @enum {string}
    */
export enum WeightUnitOfMeasureEnum {
    Kg = 'KG',
    Lb = 'LB'
}


/**
 * VendorShippingLabelsApi - axios parameter creator
 * @export
 */
export const VendorShippingLabelsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabel: async (purchaseOrderNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'purchaseOrderNumber' is not null or undefined
            assertParamExists('getShippingLabel', 'purchaseOrderNumber', purchaseOrderNumber)
            const localVarPath = `/vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}`
                .replace(`{${"purchaseOrderNumber"}}`, encodeURIComponent(String(purchaseOrderNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabels: async (createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createdAfter' is not null or undefined
            assertParamExists('getShippingLabels', 'createdAfter', createdAfter)
            // verify required parameter 'createdBefore' is not null or undefined
            assertParamExists('getShippingLabels', 'createdBefore', createdBefore)
            const localVarPath = `/vendor/directFulfillment/shipping/2021-12-28/shippingLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (shipFromPartyId !== undefined) {
                localVarQueryParameter['shipFromPartyId'] = shipFromPartyId;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (createdAfter !== undefined) {
                localVarQueryParameter['createdAfter'] = (createdAfter as any instanceof Date) ?
                    (createdAfter as any).toISOString() :
                    createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['createdBefore'] = (createdBefore as any instanceof Date) ?
                    (createdBefore as any).toISOString() :
                    createdBefore;
            }

            if (sortOrder !== undefined) {
                localVarQueryParameter['sortOrder'] = sortOrder;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShippingLabelRequest: async (body: SubmitShippingLabelsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('submitShippingLabelRequest', 'body', body)
            const localVarPath = `/vendor/directFulfillment/shipping/2021-12-28/shippingLabels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VendorShippingLabelsApi - functional programming interface
 * @export
 */
export const VendorShippingLabelsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = VendorShippingLabelsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingLabel(purchaseOrderNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingLabel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingLabel(purchaseOrderNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingLabels(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ShippingLabelList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingLabels(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async submitShippingLabelRequest(body: SubmitShippingLabelsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionReference>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.submitShippingLabelRequest(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * VendorShippingLabelsApi - factory interface
 * @export
 */
export const VendorShippingLabelsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = VendorShippingLabelsApiFp(configuration)
    return {
        /**
         * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} purchaseOrderNumber The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabel(purchaseOrderNumber: string, options?: any): AxiosPromise<ShippingLabel> {
            return localVarFp.getShippingLabel(purchaseOrderNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} createdAfter Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} createdBefore Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
         * @param {string} [shipFromPartyId] The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
         * @param {number} [limit] The limit to the number of records returned.
         * @param {'ASC' | 'DESC'} [sortOrder] Sort ASC or DESC by order creation date.
         * @param {string} [nextToken] Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingLabels(createdAfter: string, createdBefore: string, shipFromPartyId?: string, limit?: number, sortOrder?: 'ASC' | 'DESC', nextToken?: string, options?: any): AxiosPromise<ShippingLabelList> {
            return localVarFp.getShippingLabels(createdAfter, createdBefore, shipFromPartyId, limit, sortOrder, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {SubmitShippingLabelsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        submitShippingLabelRequest(body: SubmitShippingLabelsRequest, options?: any): AxiosPromise<TransactionReference> {
            return localVarFp.submitShippingLabelRequest(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getShippingLabel operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiGetShippingLabelRequest
 */
export interface VendorShippingLabelsApiGetShippingLabelRequest {
    /**
     * The purchase order number for which you want to return the shipping label. It should be the same purchaseOrderNumber as received in the order.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabel
     */
    readonly purchaseOrderNumber: string
}

/**
 * Request parameters for getShippingLabels operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiGetShippingLabelsRequest
 */
export interface VendorShippingLabelsApiGetShippingLabelsRequest {
    /**
     * Shipping labels that became available after this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly createdAfter: string

    /**
     * Shipping labels that became available before this date and time will be included in the result. Must be in ISO-8601 date/time format.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly createdBefore: string

    /**
     * The vendor warehouseId for order fulfillment. If not specified, the result will contain orders for all warehouses.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly shipFromPartyId?: string

    /**
     * The limit to the number of records returned.
     * @type {number}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly limit?: number

    /**
     * Sort ASC or DESC by order creation date.
     * @type {'ASC' | 'DESC'}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly sortOrder?: 'ASC' | 'DESC'

    /**
     * Used for pagination when there are more ship labels than the specified result size limit. The token value is returned in the previous API call.
     * @type {string}
     * @memberof VendorShippingLabelsApiGetShippingLabels
     */
    readonly nextToken?: string
}

/**
 * Request parameters for submitShippingLabelRequest operation in VendorShippingLabelsApi.
 * @export
 * @interface VendorShippingLabelsApiSubmitShippingLabelRequestRequest
 */
export interface VendorShippingLabelsApiSubmitShippingLabelRequestRequest {
    /**
     * 
     * @type {SubmitShippingLabelsRequest}
     * @memberof VendorShippingLabelsApiSubmitShippingLabelRequest
     */
    readonly body: SubmitShippingLabelsRequest
}

/**
 * VendorShippingLabelsApi - object-oriented interface
 * @export
 * @class VendorShippingLabelsApi
 * @extends {BaseAPI}
 */
export class VendorShippingLabelsApi extends BaseAPI {
    /**
     * Returns a shipping label for the purchaseOrderNumber that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingLabelsApiGetShippingLabelRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public getShippingLabel(requestParameters: VendorShippingLabelsApiGetShippingLabelRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).getShippingLabel(requestParameters.purchaseOrderNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of shipping labels created during the time frame that you specify. You define that time frame using the createdAfter and createdBefore parameters. You must use both of these parameters. The date range to search must not be more than 7 days.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingLabelsApiGetShippingLabelsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public getShippingLabels(requestParameters: VendorShippingLabelsApiGetShippingLabelsRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).getShippingLabels(requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.shipFromPartyId, requestParameters.limit, requestParameters.sortOrder, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a shipping label for a purchase order and returns a transactionId for reference.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 10 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {VendorShippingLabelsApiSubmitShippingLabelRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VendorShippingLabelsApi
     */
    public submitShippingLabelRequest(requestParameters: VendorShippingLabelsApiSubmitShippingLabelRequestRequest, options?: any) {
        return VendorShippingLabelsApiFp(this.configuration).submitShippingLabelRequest(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


