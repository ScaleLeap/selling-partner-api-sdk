/* tslint:disable */
/* eslint-disable */
/**
 * Orders v0
 * Use the Orders Selling Partner API to programmatically retrieve order information. With this API, you can develop fast, flexible, and custom applications to manage order synchronization, perform order research, and create demand-based decision support tools.   _Note:_ For the JP, AU, and SG marketplaces, the Orders API supports orders from 2016 onward. For all other marketplaces, the Orders API supports orders for the last two years (orders older than this don\'t show up in the response).
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The shipping address for the order.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name.
     * @type {string}
     * @memberof Address
     */
    Name: string;
    /**
     * The company name of the recipient.  **Note**: This attribute is only available for shipping address.
     * @type {string}
     * @memberof Address
     */
    CompanyName?: string;
    /**
     * The street address.
     * @type {string}
     * @memberof Address
     */
    AddressLine1?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    AddressLine2?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    AddressLine3?: string;
    /**
     * The city.
     * @type {string}
     * @memberof Address
     */
    City?: string;
    /**
     * The county.
     * @type {string}
     * @memberof Address
     */
    County?: string;
    /**
     * The district.
     * @type {string}
     * @memberof Address
     */
    District?: string;
    /**
     * The state or region.
     * @type {string}
     * @memberof Address
     */
    StateOrRegion?: string;
    /**
     * The municipality.
     * @type {string}
     * @memberof Address
     */
    Municipality?: string;
    /**
     * The postal code.
     * @type {string}
     * @memberof Address
     */
    PostalCode?: string;
    /**
     * The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    CountryCode?: string;
    /**
     * The phone number of the buyer.  **Note**:  1. This attribute is only available for shipping address. 2. In some cases, the buyer phone number is suppressed:  a. Phone is suppressed for all `AFN` (fulfilled by Amazon) orders. b. Phone is suppressed for the shipped `MFN` (fulfilled by seller) order when the current date is past the Latest Delivery Date.
     * @type {string}
     * @memberof Address
     */
    Phone?: string;
    /**
     * 
     * @type {AddressExtendedFields}
     * @memberof Address
     */
    ExtendedFields?: AddressExtendedFields;
    /**
     * The address type of the shipping address.
     * @type {string}
     * @memberof Address
     */
    AddressType?: AddressAddressTypeEnum | 'Residential' | 'Commercial';
}

/**
    * @export
    * @enum {string}
    */
export enum AddressAddressTypeEnum {
    Residential = 'Residential',
    Commercial = 'Commercial'
}

/**
 * The container for address extended fields (such as `street name` and `street number`). Currently only available with Brazil shipping addresses.
 * @export
 * @interface AddressExtendedFields
 */
export interface AddressExtendedFields {
    /**
     * The street name.
     * @type {string}
     * @memberof AddressExtendedFields
     */
    StreetName?: string;
    /**
     * The house, building, or property number associated with the location\'s street address.
     * @type {string}
     * @memberof AddressExtendedFields
     */
    StreetNumber?: string;
    /**
     * The floor number/unit number in the building/private house number.
     * @type {string}
     * @memberof AddressExtendedFields
     */
    Complement?: string;
    /**
     * The neighborhood. This value is only used in some countries (such as Brazil).
     * @type {string}
     * @memberof AddressExtendedFields
     */
    Neighborhood?: string;
}
/**
 * Contains the list of programs that are associated with an item.  Possible programs are:  - **Subscribe and Save**: Offers recurring, scheduled deliveries to Amazon customers and Amazon Business customers for their frequently ordered products.
 * @export
 * @interface AmazonPrograms
 */
export interface AmazonPrograms {
    /**
     * A list of the programs that are associated with the specified order item.  **Possible values**: `SUBSCRIBE_AND_SAVE`
     * @type {Array<string>}
     * @memberof AmazonPrograms
     */
    Programs: Array<string>;
}
/**
 * An item that is associated with an order item. For example, a tire installation service that is purchased with tires.
 * @export
 * @interface AssociatedItem
 */
export interface AssociatedItem {
    /**
     * The order item\'s order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof AssociatedItem
     */
    OrderId?: string;
    /**
     * An Amazon-defined item identifier for the associated item.
     * @type {string}
     * @memberof AssociatedItem
     */
    OrderItemId?: string;
    /**
     * 
     * @type {AssociationType}
     * @memberof AssociatedItem
     */
    AssociationType?: AssociationType | 'VALUE_ADD_SERVICE';
}
/**
 * The type of association an item has with an order item.
 * @export
 * @enum {string}
 */
export enum AssociationType {
    ValueAddService = 'VALUE_ADD_SERVICE'
}

/**
 * Contains information regarding the Shipping Settings Automation program, such as whether the order\'s shipping settings were generated automatically, and what those settings are.
 * @export
 * @interface AutomatedShippingSettings
 */
export interface AutomatedShippingSettings {
    /**
     * When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order.
     * @type {boolean}
     * @memberof AutomatedShippingSettings
     */
    HasAutomatedShippingSettings?: boolean;
    /**
     * Auto-generated carrier for SSA orders.
     * @type {string}
     * @memberof AutomatedShippingSettings
     */
    AutomatedCarrier?: string;
    /**
     * Auto-generated ship method for SSA orders.
     * @type {string}
     * @memberof AutomatedShippingSettings
     */
    AutomatedShipMethod?: string;
}
/**
 * Business days and hours when the destination is open for deliveries.
 * @export
 * @interface BusinessHours
 */
export interface BusinessHours {
    /**
     * Day of the week.
     * @type {string}
     * @memberof BusinessHours
     */
    DayOfWeek?: BusinessHoursDayOfWeekEnum | 'SUN' | 'MON' | 'TUE' | 'WED' | 'THU' | 'FRI' | 'SAT';
    /**
     * Time window during the day when the business is open.
     * @type {Array<OpenInterval>}
     * @memberof BusinessHours
     */
    OpenIntervals?: Array<OpenInterval>;
}

/**
    * @export
    * @enum {string}
    */
export enum BusinessHoursDayOfWeekEnum {
    Sun = 'SUN',
    Mon = 'MON',
    Tue = 'TUE',
    Wed = 'WED',
    Thu = 'THU',
    Fri = 'FRI',
    Sat = 'SAT'
}

/**
 * Buyer information for custom orders from the Amazon Custom program.
 * @export
 * @interface BuyerCustomizedInfoDetail
 */
export interface BuyerCustomizedInfoDetail {
    /**
     * The location of a ZIP file containing Amazon Custom data.
     * @type {string}
     * @memberof BuyerCustomizedInfoDetail
     */
    CustomizedURL?: string;
}
/**
 * Buyer information.
 * @export
 * @interface BuyerInfo
 */
export interface BuyerInfo {
    /**
     * The anonymized email address of the buyer.
     * @type {string}
     * @memberof BuyerInfo
     */
    BuyerEmail?: string;
    /**
     * The buyer name or the recipient name.
     * @type {string}
     * @memberof BuyerInfo
     */
    BuyerName?: string;
    /**
     * The county of the buyer.  **Note**: This attribute is only available in the Brazil marketplace.
     * @type {string}
     * @memberof BuyerInfo
     */
    BuyerCounty?: string;
    /**
     * 
     * @type {BuyerTaxInfo}
     * @memberof BuyerInfo
     */
    BuyerTaxInfo?: BuyerTaxInfo;
    /**
     * The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout.
     * @type {string}
     * @memberof BuyerInfo
     */
    PurchaseOrderNumber?: string;
}
/**
 * Information about whether or not a buyer requested cancellation.
 * @export
 * @interface BuyerRequestedCancel
 */
export interface BuyerRequestedCancel {
    /**
     * Indicate whether the buyer has requested cancellation.  **Possible Values**: `true`, `false`.
     * @type {string}
     * @memberof BuyerRequestedCancel
     */
    IsBuyerRequestedCancel?: string;
    /**
     * The reason that the buyer requested cancellation.
     * @type {string}
     * @memberof BuyerRequestedCancel
     */
    BuyerCancelReason?: string;
}
/**
 * Tax information about the buyer.
 * @export
 * @interface BuyerTaxInfo
 */
export interface BuyerTaxInfo {
    /**
     * The legal name of the company.
     * @type {string}
     * @memberof BuyerTaxInfo
     */
    CompanyLegalName?: string;
    /**
     * The country or region imposing the tax.
     * @type {string}
     * @memberof BuyerTaxInfo
     */
    TaxingRegion?: string;
    /**
     * A list of tax classifications that apply to the order.
     * @type {Array<TaxClassification>}
     * @memberof BuyerTaxInfo
     */
    TaxClassifications?: Array<TaxClassification>;
}
/**
 * Contains the business invoice tax information. Available only in the TR marketplace.
 * @export
 * @interface BuyerTaxInformation
 */
export interface BuyerTaxInformation {
    /**
     * Business buyer\'s company legal name.
     * @type {string}
     * @memberof BuyerTaxInformation
     */
    BuyerLegalCompanyName?: string;
    /**
     * Business buyer\'s address.
     * @type {string}
     * @memberof BuyerTaxInformation
     */
    BuyerBusinessAddress?: string;
    /**
     * Business buyer\'s tax registration ID.
     * @type {string}
     * @memberof BuyerTaxInformation
     */
    BuyerTaxRegistrationId?: string;
    /**
     * Business buyer\'s tax office.
     * @type {string}
     * @memberof BuyerTaxInformation
     */
    BuyerTaxOffice?: string;
}
/**
 * The error response schema for the `confirmShipment` operation.
 * @export
 * @interface ConfirmShipmentErrorResponse
 */
export interface ConfirmShipmentErrorResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ConfirmShipmentErrorResponse
     */
    errors?: Array<Error>;
}
/**
 * A single order item.
 * @export
 * @interface ConfirmShipmentOrderItem
 */
export interface ConfirmShipmentOrderItem {
    /**
     * The order item\'s unique identifier.
     * @type {string}
     * @memberof ConfirmShipmentOrderItem
     */
    orderItemId: string;
    /**
     * The item\'s quantity.
     * @type {number}
     * @memberof ConfirmShipmentOrderItem
     */
    quantity: number;
    /**
     * A list of order items.
     * @type {Array<string>}
     * @memberof ConfirmShipmentOrderItem
     */
    transparencyCodes?: Array<string>;
}
/**
 * The request schema for an shipment confirmation.
 * @export
 * @interface ConfirmShipmentRequest
 */
export interface ConfirmShipmentRequest {
    /**
     * 
     * @type {PackageDetail}
     * @memberof ConfirmShipmentRequest
     */
    packageDetail: PackageDetail;
    /**
     * The COD collection method (only supported in the JP marketplace).
     * @type {string}
     * @memberof ConfirmShipmentRequest
     */
    codCollectionMethod?: ConfirmShipmentRequestCodCollectionMethodEnum | 'DirectPayment';
    /**
     * The unobfuscated marketplace identifier.
     * @type {string}
     * @memberof ConfirmShipmentRequest
     */
    marketplaceId: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ConfirmShipmentRequestCodCollectionMethodEnum {
    DirectPayment = 'DirectPayment'
}

/**
 * Details the importance of the constraint present on the item
 * @export
 * @enum {string}
 */
export enum ConstraintType {
    Mandatory = 'MANDATORY'
}

/**
 * Contains all of the delivery instructions provided by the customer for the shipping address.
 * @export
 * @interface DeliveryPreferences
 */
export interface DeliveryPreferences {
    /**
     * Drop-off location selected by the customer.
     * @type {string}
     * @memberof DeliveryPreferences
     */
    DropOffLocation?: string;
    /**
     * 
     * @type {PreferredDeliveryTime}
     * @memberof DeliveryPreferences
     */
    PreferredDeliveryTime?: PreferredDeliveryTime;
    /**
     * Enumerated list of miscellaneous delivery attributes associated with the shipping address.
     * @type {Array<OtherDeliveryAttributes>}
     * @memberof DeliveryPreferences
     */
    OtherAttributes?: Array<(OtherDeliveryAttributes | 'HAS_ACCESS_POINT' | 'PALLET_ENABLED' | 'PALLET_DISABLED')>;
    /**
     * Building instructions, nearby landmark or navigation instructions.
     * @type {string}
     * @memberof DeliveryPreferences
     */
    AddressInstructions?: string;
}
/**
 * The status of the Amazon Easy Ship order. This property is only included for Amazon Easy Ship orders.
 * @export
 * @enum {string}
 */
export enum EasyShipShipmentStatus {
    PendingSchedule = 'PendingSchedule',
    PendingPickUp = 'PendingPickUp',
    PendingDropOff = 'PendingDropOff',
    LabelCanceled = 'LabelCanceled',
    PickedUp = 'PickedUp',
    DroppedOff = 'DroppedOff',
    AtOriginFc = 'AtOriginFC',
    AtDestinationFc = 'AtDestinationFC',
    Delivered = 'Delivered',
    RejectedByBuyer = 'RejectedByBuyer',
    Undeliverable = 'Undeliverable',
    ReturningToSeller = 'ReturningToSeller',
    ReturnedToSeller = 'ReturnedToSeller',
    Lost = 'Lost',
    OutForDelivery = 'OutForDelivery',
    Damaged = 'Damaged'
}

/**
 * The status of the electronic invoice. Only available for Easy Ship orders and orders in the BR marketplace.
 * @export
 * @enum {string}
 */
export enum ElectronicInvoiceStatus {
    NotRequired = 'NotRequired',
    NotFound = 'NotFound',
    Processing = 'Processing',
    Errored = 'Errored',
    Accepted = 'Accepted'
}

/**
 * Dates when the business is closed or open with a different time window.
 * @export
 * @interface ExceptionDates
 */
export interface ExceptionDates {
    /**
     * Date when the business is closed, in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date format.
     * @type {string}
     * @memberof ExceptionDates
     */
    ExceptionDate?: string;
    /**
     * Boolean indicating if the business is closed or open on that date.
     * @type {boolean}
     * @memberof ExceptionDates
     */
    IsOpen?: boolean;
    /**
     * Time window during the day when the business is open.
     * @type {Array<OpenInterval>}
     * @memberof ExceptionDates
     */
    OpenIntervals?: Array<OpenInterval>;
}
/**
 * Contains the instructions about the fulfillment, such as the location from where you want the order filled.
 * @export
 * @interface FulfillmentInstruction
 */
export interface FulfillmentInstruction {
    /**
     * The `sourceId` of the location from where you want the order fulfilled.
     * @type {string}
     * @memberof FulfillmentInstruction
     */
    FulfillmentSupplySourceId?: string;
}
/**
 * The response schema for the `getOrderAddress` operation.
 * @export
 * @interface GetOrderAddressResponse
 */
export interface GetOrderAddressResponse {
    /**
     * 
     * @type {OrderAddress}
     * @memberof GetOrderAddressResponse
     */
    payload?: OrderAddress;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderAddressResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrderBuyerInfo` operation.
 * @export
 * @interface GetOrderBuyerInfoResponse
 */
export interface GetOrderBuyerInfoResponse {
    /**
     * 
     * @type {OrderBuyerInfo}
     * @memberof GetOrderBuyerInfoResponse
     */
    payload?: OrderBuyerInfo;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderBuyerInfoResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrderItemsBuyerInfo` operation.
 * @export
 * @interface GetOrderItemsBuyerInfoResponse
 */
export interface GetOrderItemsBuyerInfoResponse {
    /**
     * 
     * @type {OrderItemsBuyerInfoList}
     * @memberof GetOrderItemsBuyerInfoResponse
     */
    payload?: OrderItemsBuyerInfoList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderItemsBuyerInfoResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrderItems` operation.
 * @export
 * @interface GetOrderItemsResponse
 */
export interface GetOrderItemsResponse {
    /**
     * 
     * @type {OrderItemsList}
     * @memberof GetOrderItemsResponse
     */
    payload?: OrderItemsList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderItemsResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrderRegulatedInfo` operation.
 * @export
 * @interface GetOrderRegulatedInfoResponse
 */
export interface GetOrderRegulatedInfoResponse {
    /**
     * 
     * @type {OrderRegulatedInfo}
     * @memberof GetOrderRegulatedInfoResponse
     */
    payload?: OrderRegulatedInfo;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderRegulatedInfoResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrder` operation.
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * 
     * @type {Order}
     * @memberof GetOrderResponse
     */
    payload?: Order;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the `getOrders` operation.
 * @export
 * @interface GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * 
     * @type {OrdersList}
     * @memberof GetOrdersResponse
     */
    payload?: OrdersList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * A single item\'s buyer information.
 * @export
 * @interface ItemBuyerInfo
 */
export interface ItemBuyerInfo {
    /**
     * 
     * @type {BuyerCustomizedInfoDetail}
     * @memberof ItemBuyerInfo
     */
    BuyerCustomizedInfo?: BuyerCustomizedInfoDetail;
    /**
     * 
     * @type {Money}
     * @memberof ItemBuyerInfo
     */
    GiftWrapPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof ItemBuyerInfo
     */
    GiftWrapTax?: Money;
    /**
     * A gift message provided by the buyer.  **Note**: This attribute is only available for MFN (fulfilled by seller) orders.
     * @type {string}
     * @memberof ItemBuyerInfo
     */
    GiftMessageText?: string;
    /**
     * The gift wrap level specified by the buyer.
     * @type {string}
     * @memberof ItemBuyerInfo
     */
    GiftWrapLevel?: string;
}
/**
 * Tax information about the marketplace.
 * @export
 * @interface MarketplaceTaxInfo
 */
export interface MarketplaceTaxInfo {
    /**
     * A list of tax classifications that apply to the order.
     * @type {Array<TaxClassification>}
     * @memberof MarketplaceTaxInfo
     */
    TaxClassifications?: Array<TaxClassification>;
}
/**
 * Measurement information for an order item.
 * @export
 * @interface Measurement
 */
export interface Measurement {
    /**
     * The unit of measure.
     * @type {string}
     * @memberof Measurement
     */
    Unit: MeasurementUnitEnum | 'OUNCES' | 'POUNDS' | 'KILOGRAMS' | 'GRAMS' | 'MILLIGRAMS' | 'INCHES' | 'FEET' | 'METERS' | 'CENTIMETERS' | 'MILLIMETERS' | 'SQUARE_METERS' | 'SQUARE_CENTIMETERS' | 'SQUARE_FEET' | 'SQUARE_INCHES' | 'GALLONS' | 'PINTS' | 'QUARTS' | 'FLUID_OUNCES' | 'LITERS' | 'CUBIC_METERS' | 'CUBIC_FEET' | 'CUBIC_INCHES' | 'CUBIC_CENTIMETERS' | 'COUNT';
    /**
     * The measurement value.
     * @type {number}
     * @memberof Measurement
     */
    Value: number;
}

/**
    * @export
    * @enum {string}
    */
export enum MeasurementUnitEnum {
    Ounces = 'OUNCES',
    Pounds = 'POUNDS',
    Kilograms = 'KILOGRAMS',
    Grams = 'GRAMS',
    Milligrams = 'MILLIGRAMS',
    Inches = 'INCHES',
    Feet = 'FEET',
    Meters = 'METERS',
    Centimeters = 'CENTIMETERS',
    Millimeters = 'MILLIMETERS',
    SquareMeters = 'SQUARE_METERS',
    SquareCentimeters = 'SQUARE_CENTIMETERS',
    SquareFeet = 'SQUARE_FEET',
    SquareInches = 'SQUARE_INCHES',
    Gallons = 'GALLONS',
    Pints = 'PINTS',
    Quarts = 'QUARTS',
    FluidOunces = 'FLUID_OUNCES',
    Liters = 'LITERS',
    CubicMeters = 'CUBIC_METERS',
    CubicFeet = 'CUBIC_FEET',
    CubicInches = 'CUBIC_INCHES',
    CubicCentimeters = 'CUBIC_CENTIMETERS',
    Count = 'COUNT'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The monetary value of the order.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * The three-digit currency code. In ISO 4217 format.
     * @type {string}
     * @memberof Money
     */
    CurrencyCode?: string;
    /**
     * The currency amount.
     * @type {string}
     * @memberof Money
     */
    Amount?: string;
}
/**
 * The time interval for which the business is open.
 * @export
 * @interface OpenInterval
 */
export interface OpenInterval {
    /**
     * 
     * @type {OpenTimeInterval}
     * @memberof OpenInterval
     */
    StartTime?: OpenTimeInterval;
    /**
     * 
     * @type {OpenTimeInterval}
     * @memberof OpenInterval
     */
    EndTime?: OpenTimeInterval;
}
/**
 * The time when the business opens or closes.
 * @export
 * @interface OpenTimeInterval
 */
export interface OpenTimeInterval {
    /**
     * The hour when the business opens or closes.
     * @type {number}
     * @memberof OpenTimeInterval
     */
    Hour?: number;
    /**
     * The minute when the business opens or closes.
     * @type {number}
     * @memberof OpenTimeInterval
     */
    Minute?: number;
}
/**
 * Order information.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof Order
     */
    AmazonOrderId: string;
    /**
     * A seller-defined order identifier.
     * @type {string}
     * @memberof Order
     */
    SellerOrderId?: string;
    /**
     * The date when the order was created.
     * @type {string}
     * @memberof Order
     */
    PurchaseDate: string;
    /**
     * The date when the order was last updated.  __Note__: `LastUpdateDate` is returned with an incorrect date for orders that were last updated before 2009-04-01.
     * @type {string}
     * @memberof Order
     */
    LastUpdateDate: string;
    /**
     * The current order status.
     * @type {string}
     * @memberof Order
     */
    OrderStatus: OrderOrderStatusEnum | 'Pending' | 'Unshipped' | 'PartiallyShipped' | 'Shipped' | 'Canceled' | 'Unfulfillable' | 'InvoiceUnconfirmed' | 'PendingAvailability';
    /**
     * Whether the order was fulfilled by Amazon (`AFN`) or by the seller (`MFN`).
     * @type {string}
     * @memberof Order
     */
    FulfillmentChannel?: OrderFulfillmentChannelEnum | 'MFN' | 'AFN';
    /**
     * The sales channel for the first item in the order.
     * @type {string}
     * @memberof Order
     */
    SalesChannel?: string;
    /**
     * The order channel for the first item in the order.
     * @type {string}
     * @memberof Order
     */
    OrderChannel?: string;
    /**
     * The order\'s shipment service level.
     * @type {string}
     * @memberof Order
     */
    ShipServiceLevel?: string;
    /**
     * 
     * @type {Money}
     * @memberof Order
     */
    OrderTotal?: Money;
    /**
     * The number of items shipped.
     * @type {number}
     * @memberof Order
     */
    NumberOfItemsShipped?: number;
    /**
     * The number of items unshipped.
     * @type {number}
     * @memberof Order
     */
    NumberOfItemsUnshipped?: number;
    /**
     * A list of payment execution detail items.
     * @type {Array<PaymentExecutionDetailItem>}
     * @memberof Order
     */
    PaymentExecutionDetail?: Array<PaymentExecutionDetailItem>;
    /**
     * The payment method for the order. This property is limited to COD and CVS payment methods. Unless you need the specific COD payment information provided by the `PaymentExecutionDetailItem` object, we recommend using the `PaymentMethodDetails` property to get payment method information.
     * @type {string}
     * @memberof Order
     */
    PaymentMethod?: OrderPaymentMethodEnum | 'COD' | 'CVS' | 'Other';
    /**
     * A list of payment method detail items.
     * @type {Array<string>}
     * @memberof Order
     */
    PaymentMethodDetails?: Array<string>;
    /**
     * The identifier for the marketplace where the order was placed.
     * @type {string}
     * @memberof Order
     */
    MarketplaceId?: string;
    /**
     * The shipment service level category for the order.  **Possible values**: `Expedited`, `FreeEconomy`, `NextDay`, `Priority`, `SameDay`, `SecondDay`, `Scheduled`, and `Standard`.
     * @type {string}
     * @memberof Order
     */
    ShipmentServiceLevelCategory?: string;
    /**
     * 
     * @type {EasyShipShipmentStatus}
     * @memberof Order
     */
    EasyShipShipmentStatus?: EasyShipShipmentStatus | 'PendingSchedule' | 'PendingPickUp' | 'PendingDropOff' | 'LabelCanceled' | 'PickedUp' | 'DroppedOff' | 'AtOriginFC' | 'AtDestinationFC' | 'Delivered' | 'RejectedByBuyer' | 'Undeliverable' | 'ReturningToSeller' | 'ReturnedToSeller' | 'Lost' | 'OutForDelivery' | 'Damaged';
    /**
     * Custom ship label for Checkout by Amazon (CBA).
     * @type {string}
     * @memberof Order
     */
    CbaDisplayableShippingLabel?: string;
    /**
     * The order\'s type.
     * @type {string}
     * @memberof Order
     */
    OrderType?: OrderOrderTypeEnum | 'StandardOrder' | 'LongLeadTimeOrder' | 'Preorder' | 'BackOrder' | 'SourcingOnDemandOrder';
    /**
     * The start of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: `EarliestShipDate` might not be returned for orders placed before February 1, 2013.
     * @type {string}
     * @memberof Order
     */
    EarliestShipDate?: string;
    /**
     * The end of the time period within which you have committed to ship the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.  __Note__: `LatestShipDate` might not be returned for orders placed before February 1, 2013.
     * @type {string}
     * @memberof Order
     */
    LatestShipDate?: string;
    /**
     * The start of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders.
     * @type {string}
     * @memberof Order
     */
    EarliestDeliveryDate?: string;
    /**
     * The end of the time period within which you have committed to fulfill the order. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format. Only returned for seller-fulfilled orders that do not have a `PendingAvailability`, `Pending`, or `Canceled` status.
     * @type {string}
     * @memberof Order
     */
    LatestDeliveryDate?: string;
    /**
     * When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
     * @type {boolean}
     * @memberof Order
     */
    IsBusinessOrder?: boolean;
    /**
     * When true, the order is a seller-fulfilled Amazon Prime order.
     * @type {boolean}
     * @memberof Order
     */
    IsPrime?: boolean;
    /**
     * When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, refer to \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
     * @type {boolean}
     * @memberof Order
     */
    IsPremiumOrder?: boolean;
    /**
     * When true, the order is a `GlobalExpress` order.
     * @type {boolean}
     * @memberof Order
     */
    IsGlobalExpressEnabled?: boolean;
    /**
     * The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
     * @type {string}
     * @memberof Order
     */
    ReplacedOrderId?: string;
    /**
     * When true, this is a replacement order.
     * @type {boolean}
     * @memberof Order
     */
    IsReplacementOrder?: boolean;
    /**
     * Indicates the date by which the seller must respond to the buyer with an estimated ship date. Only returned for Sourcing on Demand orders.
     * @type {string}
     * @memberof Order
     */
    PromiseResponseDueDate?: string;
    /**
     * When true, the estimated ship date is set for the order. Only returned for Sourcing on Demand orders.
     * @type {boolean}
     * @memberof Order
     */
    IsEstimatedShipDateSet?: boolean;
    /**
     * When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     * @type {boolean}
     * @memberof Order
     */
    IsSoldByAB?: boolean;
    /**
     * When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     * @type {boolean}
     * @memberof Order
     */
    IsIBA?: boolean;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    DefaultShipFromLocationAddress?: Address;
    /**
     * The buyer\'s invoicing preference. Sellers can use this data to issue electronic invoices for orders in Turkey.  **Note**: This attribute is only available in the Turkey marketplace.
     * @type {string}
     * @memberof Order
     */
    BuyerInvoicePreference?: OrderBuyerInvoicePreferenceEnum | 'INDIVIDUAL' | 'BUSINESS';
    /**
     * 
     * @type {BuyerTaxInformation}
     * @memberof Order
     */
    BuyerTaxInformation?: BuyerTaxInformation;
    /**
     * 
     * @type {FulfillmentInstruction}
     * @memberof Order
     */
    FulfillmentInstruction?: FulfillmentInstruction;
    /**
     * When true, this order is marked to be picked up from a store rather than delivered.
     * @type {boolean}
     * @memberof Order
     */
    IsISPU?: boolean;
    /**
     * When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers.
     * @type {boolean}
     * @memberof Order
     */
    IsAccessPointOrder?: boolean;
    /**
     * 
     * @type {MarketplaceTaxInfo}
     * @memberof Order
     */
    MarketplaceTaxInfo?: MarketplaceTaxInfo;
    /**
     * The seller’s friendly name registered in the marketplace where the sale took place. Sellers can use this data to issue electronic invoices for orders in Brazil.  **Note**: This attribute is only available in the Brazil marketplace for the orders with `Pending` or `Unshipped` status.
     * @type {string}
     * @memberof Order
     */
    SellerDisplayName?: string;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    ShippingAddress?: Address;
    /**
     * 
     * @type {BuyerInfo}
     * @memberof Order
     */
    BuyerInfo?: BuyerInfo;
    /**
     * 
     * @type {AutomatedShippingSettings}
     * @memberof Order
     */
    AutomatedShippingSettings?: AutomatedShippingSettings;
    /**
     * Whether the order contains regulated items which may require additional approval steps before being fulfilled.
     * @type {boolean}
     * @memberof Order
     */
    HasRegulatedItems?: boolean;
    /**
     * 
     * @type {ElectronicInvoiceStatus}
     * @memberof Order
     */
    ElectronicInvoiceStatus?: ElectronicInvoiceStatus | 'NotRequired' | 'NotFound' | 'Processing' | 'Errored' | 'Accepted';
}

/**
    * @export
    * @enum {string}
    */
export enum OrderOrderStatusEnum {
    Pending = 'Pending',
    Unshipped = 'Unshipped',
    PartiallyShipped = 'PartiallyShipped',
    Shipped = 'Shipped',
    Canceled = 'Canceled',
    Unfulfillable = 'Unfulfillable',
    InvoiceUnconfirmed = 'InvoiceUnconfirmed',
    PendingAvailability = 'PendingAvailability'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderFulfillmentChannelEnum {
    Mfn = 'MFN',
    Afn = 'AFN'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderPaymentMethodEnum {
    Cod = 'COD',
    Cvs = 'CVS',
    Other = 'Other'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOrderTypeEnum {
    StandardOrder = 'StandardOrder',
    LongLeadTimeOrder = 'LongLeadTimeOrder',
    Preorder = 'Preorder',
    BackOrder = 'BackOrder',
    SourcingOnDemandOrder = 'SourcingOnDemandOrder'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderBuyerInvoicePreferenceEnum {
    Individual = 'INDIVIDUAL',
    Business = 'BUSINESS'
}

/**
 * The shipping address for the order.
 * @export
 * @interface OrderAddress
 */
export interface OrderAddress {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderAddress
     */
    AmazonOrderId: string;
    /**
     * The company name of the contact buyer. For IBA orders, the buyer company must be Amazon entities.
     * @type {string}
     * @memberof OrderAddress
     */
    BuyerCompanyName?: string;
    /**
     * 
     * @type {Address}
     * @memberof OrderAddress
     */
    ShippingAddress?: Address;
    /**
     * 
     * @type {DeliveryPreferences}
     * @memberof OrderAddress
     */
    DeliveryPreferences?: DeliveryPreferences;
}
/**
 * Buyer information for an order.
 * @export
 * @interface OrderBuyerInfo
 */
export interface OrderBuyerInfo {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    AmazonOrderId: string;
    /**
     * The anonymized email address of the buyer.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    BuyerEmail?: string;
    /**
     * The buyer name or the recipient name.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    BuyerName?: string;
    /**
     * The county of the buyer.  **Note**: This attribute is only available in the Brazil marketplace.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    BuyerCounty?: string;
    /**
     * 
     * @type {BuyerTaxInfo}
     * @memberof OrderBuyerInfo
     */
    BuyerTaxInfo?: BuyerTaxInfo;
    /**
     * The purchase order (PO) number entered by the buyer at checkout. Only returned for orders where the buyer entered a PO number at checkout.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    PurchaseOrderNumber?: string;
}
/**
 * A single order item.
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * The item\'s Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof OrderItem
     */
    ASIN: string;
    /**
     * The item\'s seller stock keeping unit (SKU).
     * @type {string}
     * @memberof OrderItem
     */
    SellerSKU?: string;
    /**
     * An Amazon-defined order item identifier.
     * @type {string}
     * @memberof OrderItem
     */
    OrderItemId: string;
    /**
     * A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires.
     * @type {Array<AssociatedItem>}
     * @memberof OrderItem
     */
    AssociatedItems?: Array<AssociatedItem>;
    /**
     * The item\'s name.
     * @type {string}
     * @memberof OrderItem
     */
    Title?: string;
    /**
     * The number of items in the order. 
     * @type {number}
     * @memberof OrderItem
     */
    QuantityOrdered: number;
    /**
     * The number of items shipped.
     * @type {number}
     * @memberof OrderItem
     */
    QuantityShipped?: number;
    /**
     * 
     * @type {ProductInfoDetail}
     * @memberof OrderItem
     */
    ProductInfo?: ProductInfoDetail;
    /**
     * 
     * @type {PointsGrantedDetail}
     * @memberof OrderItem
     */
    PointsGranted?: PointsGrantedDetail;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ItemPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ShippingPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ItemTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ShippingTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ShippingDiscount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    ShippingDiscountTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    PromotionDiscount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    PromotionDiscountTax?: Money;
    /**
     * A list of promotion identifiers provided by the seller when the promotions were created.
     * @type {Array<string>}
     * @memberof OrderItem
     */
    PromotionIds?: Array<string>;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    CODFee?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    CODFeeDiscount?: Money;
    /**
     * Indicates whether the item is a gift.  **Possible values**: `true` and `false`.
     * @type {string}
     * @memberof OrderItem
     */
    IsGift?: string;
    /**
     * The condition of the item, as described by the seller.
     * @type {string}
     * @memberof OrderItem
     */
    ConditionNote?: string;
    /**
     * The condition of the item.  **Possible values**: `New`, `Used`, `Collectible`, `Refurbished`, `Preorder`, and `Club`.
     * @type {string}
     * @memberof OrderItem
     */
    ConditionId?: string;
    /**
     * The subcondition of the item.  **Possible values**: `New`, `Mint`, `Very Good`, `Good`, `Acceptable`, `Poor`, `Club`, `OEM`, `Warranty`, `Refurbished Warranty`, `Refurbished`, `Open Box`, `Any`, and `Other`.
     * @type {string}
     * @memberof OrderItem
     */
    ConditionSubtypeId?: string;
    /**
     * The start date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
     * @type {string}
     * @memberof OrderItem
     */
    ScheduledDeliveryStartDate?: string;
    /**
     * The end date of the scheduled delivery window in the time zone for the order destination. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
     * @type {string}
     * @memberof OrderItem
     */
    ScheduledDeliveryEndDate?: string;
    /**
     * Indicates that the selling price is a special price that is only available for Amazon Business orders. For more information about the Amazon Business Seller Program, refer to the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   **Possible values**: `BusinessPrice`
     * @type {string}
     * @memberof OrderItem
     */
    PriceDesignation?: string;
    /**
     * 
     * @type {TaxCollection}
     * @memberof OrderItem
     */
    TaxCollection?: TaxCollection;
    /**
     * When true, the product type for this item has a serial number.   Only returned for Amazon Easy Ship orders.
     * @type {boolean}
     * @memberof OrderItem
     */
    SerialNumberRequired?: boolean;
    /**
     * When true, the ASIN is enrolled in Transparency. The Transparency serial number that you must submit is determined by:  **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN). **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number is applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode. **QR code SN:** Submit the URL that the QR code generates.
     * @type {boolean}
     * @memberof OrderItem
     */
    IsTransparency?: boolean;
    /**
     * The IOSS number of the marketplace. Sellers shipping to the EU from outside the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale.
     * @type {string}
     * @memberof OrderItem
     */
    IossNumber?: string;
    /**
     * The store chain store identifier. Linked to a specific store in a store chain.
     * @type {string}
     * @memberof OrderItem
     */
    StoreChainStoreId?: string;
    /**
     * The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
     * @type {string}
     * @memberof OrderItem
     */
    DeemedResellerCategory?: OrderItemDeemedResellerCategoryEnum | 'IOSS' | 'UOSS';
    /**
     * 
     * @type {ItemBuyerInfo}
     * @memberof OrderItem
     */
    BuyerInfo?: ItemBuyerInfo;
    /**
     * 
     * @type {BuyerRequestedCancel}
     * @memberof OrderItem
     */
    BuyerRequestedCancel?: BuyerRequestedCancel;
    /**
     * A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only.
     * @type {Array<string>}
     * @memberof OrderItem
     */
    SerialNumbers?: Array<string>;
    /**
     * 
     * @type {SubstitutionPreferences}
     * @memberof OrderItem
     */
    SubstitutionPreferences?: SubstitutionPreferences;
    /**
     * 
     * @type {Measurement}
     * @memberof OrderItem
     */
    Measurement?: Measurement;
    /**
     * 
     * @type {ShippingConstraints}
     * @memberof OrderItem
     */
    ShippingConstraints?: ShippingConstraints;
    /**
     * 
     * @type {AmazonPrograms}
     * @memberof OrderItem
     */
    AmazonPrograms?: AmazonPrograms;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderItemDeemedResellerCategoryEnum {
    Ioss = 'IOSS',
    Uoss = 'UOSS'
}

/**
 * A single order item\'s buyer information.
 * @export
 * @interface OrderItemBuyerInfo
 */
export interface OrderItemBuyerInfo {
    /**
     * An Amazon-defined order item identifier.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    OrderItemId: string;
    /**
     * 
     * @type {BuyerCustomizedInfoDetail}
     * @memberof OrderItemBuyerInfo
     */
    BuyerCustomizedInfo?: BuyerCustomizedInfoDetail;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemBuyerInfo
     */
    GiftWrapPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemBuyerInfo
     */
    GiftWrapTax?: Money;
    /**
     * A gift message provided by the buyer.  **Note**: This attribute is only available for MFN (fulfilled by seller) orders.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    GiftMessageText?: string;
    /**
     * The gift wrap level specified by the buyer.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    GiftWrapLevel?: string;
}
/**
 * A single order item\'s buyer information list with the order ID.
 * @export
 * @interface OrderItemsBuyerInfoList
 */
export interface OrderItemsBuyerInfoList {
    /**
     * A single order item\'s buyer information list.
     * @type {Array<OrderItemBuyerInfo>}
     * @memberof OrderItemsBuyerInfoList
     */
    OrderItems: Array<OrderItemBuyerInfo>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrderItemsBuyerInfoList
     */
    NextToken?: string;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderItemsBuyerInfoList
     */
    AmazonOrderId: string;
}
/**
 * The order items list along with the order ID.
 * @export
 * @interface OrderItemsList
 */
export interface OrderItemsList {
    /**
     * A list of order items.
     * @type {Array<OrderItem>}
     * @memberof OrderItemsList
     */
    OrderItems: Array<OrderItem>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrderItemsList
     */
    NextToken?: string;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderItemsList
     */
    AmazonOrderId: string;
}
/**
 * The order\'s regulated information along with its verification status.
 * @export
 * @interface OrderRegulatedInfo
 */
export interface OrderRegulatedInfo {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderRegulatedInfo
     */
    AmazonOrderId: string;
    /**
     * 
     * @type {RegulatedInformation}
     * @memberof OrderRegulatedInfo
     */
    RegulatedInformation: RegulatedInformation;
    /**
     * When true, the order requires attaching a dosage information label when shipped.
     * @type {boolean}
     * @memberof OrderRegulatedInfo
     */
    RequiresDosageLabel: boolean;
    /**
     * 
     * @type {RegulatedOrderVerificationStatus}
     * @memberof OrderRegulatedInfo
     */
    RegulatedOrderVerificationStatus: RegulatedOrderVerificationStatus;
}
/**
 * A list of orders along with additional information to make subsequent API calls.
 * @export
 * @interface OrdersList
 */
export interface OrdersList {
    /**
     * A list of orders.
     * @type {Array<Order>}
     * @memberof OrdersList
     */
    Orders: Array<Order>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrdersList
     */
    NextToken?: string;
    /**
     * Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersList
     */
    LastUpdatedBefore?: string;
    /**
     * Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersList
     */
    CreatedBefore?: string;
}
/**
 * Miscellaneous delivery attributes associated with the shipping address.
 * @export
 * @enum {string}
 */
export enum OtherDeliveryAttributes {
    HasAccessPoint = 'HAS_ACCESS_POINT',
    PalletEnabled = 'PALLET_ENABLED',
    PalletDisabled = 'PALLET_DISABLED'
}

/**
 * Properties of packages
 * @export
 * @interface PackageDetail
 */
export interface PackageDetail {
    /**
     * A seller-supplied identifier that uniquely identifies a package within the scope of an order. Only positive numeric values are supported.
     * @type {string}
     * @memberof PackageDetail
     */
    packageReferenceId: string;
    /**
     * Identifies the carrier that will deliver the package. This field is required for all marketplaces. For more information, refer to the [`CarrierCode` announcement](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces).
     * @type {string}
     * @memberof PackageDetail
     */
    carrierCode: string;
    /**
     * Carrier Name that will deliver the package. Required when `carrierCode` is \"Others\" 
     * @type {string}
     * @memberof PackageDetail
     */
    carrierName?: string;
    /**
     * Ship method to be used for shipping the order.
     * @type {string}
     * @memberof PackageDetail
     */
    shippingMethod?: string;
    /**
     * The tracking number used to obtain tracking and delivery information.
     * @type {string}
     * @memberof PackageDetail
     */
    trackingNumber: string;
    /**
     * The shipping date for the package. Must be in <a href=\'https://developer-docs.amazon.com/sp-api/docs/iso-8601\'>ISO 8601</a> date/time format.
     * @type {string}
     * @memberof PackageDetail
     */
    shipDate: string;
    /**
     * The unique identifier for the supply source.
     * @type {string}
     * @memberof PackageDetail
     */
    shipFromSupplySourceId?: string;
    /**
     * A list of order items.
     * @type {Array<ConfirmShipmentOrderItem>}
     * @memberof PackageDetail
     */
    orderItems: Array<ConfirmShipmentOrderItem>;
}
/**
 * Information about a sub-payment method used to pay for a COD order.
 * @export
 * @interface PaymentExecutionDetailItem
 */
export interface PaymentExecutionDetailItem {
    /**
     * 
     * @type {Money}
     * @memberof PaymentExecutionDetailItem
     */
    Payment: Money;
    /**
     * A sub-payment method for a COD order.  **Possible values**: * `COD`: Cash on delivery  * `GC`: Gift card  * `PointsAccount`: Amazon Points * `Invoice`: Invoice
     * @type {string}
     * @memberof PaymentExecutionDetailItem
     */
    PaymentMethod: string;
}
/**
 * The number of Amazon Points offered with the purchase of an item, and their monetary value.
 * @export
 * @interface PointsGrantedDetail
 */
export interface PointsGrantedDetail {
    /**
     * The number of Amazon Points granted with the purchase of an item.
     * @type {number}
     * @memberof PointsGrantedDetail
     */
    PointsNumber?: number;
    /**
     * 
     * @type {Money}
     * @memberof PointsGrantedDetail
     */
    PointsMonetaryValue?: Money;
}
/**
 * The time window when the delivery is preferred.
 * @export
 * @interface PreferredDeliveryTime
 */
export interface PreferredDeliveryTime {
    /**
     * Business hours when the business is open for deliveries.
     * @type {Array<BusinessHours>}
     * @memberof PreferredDeliveryTime
     */
    BusinessHours?: Array<BusinessHours>;
    /**
     * Dates when the business is closed during the next 30 days.
     * @type {Array<ExceptionDates>}
     * @memberof PreferredDeliveryTime
     */
    ExceptionDates?: Array<ExceptionDates>;
}
/**
 * Information about the prescription that is used to verify a regulated product. This must be provided once per order and reflect the seller’s own records. Only approved orders can have prescriptions.
 * @export
 * @interface PrescriptionDetail
 */
export interface PrescriptionDetail {
    /**
     * The identifier for the prescription used to verify the regulated product.
     * @type {string}
     * @memberof PrescriptionDetail
     */
    prescriptionId: string;
    /**
     * The expiration date of the prescription used to verify the regulated product, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
     * @type {string}
     * @memberof PrescriptionDetail
     */
    expirationDate: string;
    /**
     * The number of units in each fill as provided in the prescription.
     * @type {number}
     * @memberof PrescriptionDetail
     */
    writtenQuantity: number;
    /**
     * The total number of refills written in the original prescription used to verify the regulated product. If a prescription originally had no refills, this value must be 0.
     * @type {number}
     * @memberof PrescriptionDetail
     */
    totalRefillsAuthorized: number;
    /**
     * The number of refills remaining for the prescription used to verify the regulated product. If a prescription originally had 10 total refills, this value must be `10` for the first order, `9` for the second order, and `0` for the eleventh order. If a prescription originally had no refills, this value must be 0.
     * @type {number}
     * @memberof PrescriptionDetail
     */
    refillsRemaining: number;
    /**
     * The identifier for the clinic which provided the prescription used to verify the regulated product.
     * @type {string}
     * @memberof PrescriptionDetail
     */
    clinicId: string;
    /**
     * The instructions for the prescription as provided by the approver of the regulated product.
     * @type {string}
     * @memberof PrescriptionDetail
     */
    usageInstructions: string;
}
/**
 * Product information on the number of items.
 * @export
 * @interface ProductInfoDetail
 */
export interface ProductInfoDetail {
    /**
     * The total number of items that are included in the ASIN.
     * @type {string}
     * @memberof ProductInfoDetail
     */
    NumberOfItems?: string;
}
/**
 * The regulated information collected during purchase and used to verify the order.
 * @export
 * @interface RegulatedInformation
 */
export interface RegulatedInformation {
    /**
     * A list of regulated information fields as collected from the regulatory form.
     * @type {Array<RegulatedInformationField>}
     * @memberof RegulatedInformation
     */
    Fields: Array<RegulatedInformationField>;
}
/**
 * A field collected from the regulatory form.
 * @export
 * @interface RegulatedInformationField
 */
export interface RegulatedInformationField {
    /**
     * The unique identifier of the field.
     * @type {string}
     * @memberof RegulatedInformationField
     */
    FieldId: string;
    /**
     * The name of the field.
     * @type {string}
     * @memberof RegulatedInformationField
     */
    FieldLabel: string;
    /**
     * The type of field.
     * @type {string}
     * @memberof RegulatedInformationField
     */
    FieldType: RegulatedInformationFieldFieldTypeEnum | 'Text' | 'FileAttachment';
    /**
     * The content of the field as collected in regulatory form. Note that `FileAttachment` type fields contain a URL where you can download the attachment.
     * @type {string}
     * @memberof RegulatedInformationField
     */
    FieldValue: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RegulatedInformationFieldFieldTypeEnum {
    Text = 'Text',
    FileAttachment = 'FileAttachment'
}

/**
 * The verification status of the order, along with associated approval or rejection metadata.
 * @export
 * @interface RegulatedOrderVerificationStatus
 */
export interface RegulatedOrderVerificationStatus {
    /**
     * 
     * @type {VerificationStatus}
     * @memberof RegulatedOrderVerificationStatus
     */
    Status: VerificationStatus | 'Pending' | 'Approved' | 'Rejected' | 'Expired' | 'Cancelled';
    /**
     * When true, the regulated information provided in the order requires a review by the merchant.
     * @type {boolean}
     * @memberof RegulatedOrderVerificationStatus
     */
    RequiresMerchantAction: boolean;
    /**
     * A list of valid rejection reasons that may be used to reject the order\'s regulated information.
     * @type {Array<RejectionReason>}
     * @memberof RegulatedOrderVerificationStatus
     */
    ValidRejectionReasons: Array<RejectionReason>;
    /**
     * 
     * @type {RejectionReason}
     * @memberof RegulatedOrderVerificationStatus
     */
    RejectionReason?: RejectionReason;
    /**
     * The date the order was reviewed. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date time format.
     * @type {string}
     * @memberof RegulatedOrderVerificationStatus
     */
    ReviewDate?: string;
    /**
     * The identifier for the order\'s regulated information reviewer.
     * @type {string}
     * @memberof RegulatedOrderVerificationStatus
     */
    ExternalReviewerId?: string;
    /**
     * A list of valid verification details that may be provided and the criteria required for when the verification detail can be provided.
     * @type {Array<ValidVerificationDetail>}
     * @memberof RegulatedOrderVerificationStatus
     */
    ValidVerificationDetails?: Array<ValidVerificationDetail>;
}
/**
 * The reason for rejecting the order\'s regulated information. This is only present if the order is rejected.
 * @export
 * @interface RejectionReason
 */
export interface RejectionReason {
    /**
     * The unique identifier for the rejection reason.
     * @type {string}
     * @memberof RejectionReason
     */
    RejectionReasonId: string;
    /**
     * The description of this rejection reason.
     * @type {string}
     * @memberof RejectionReason
     */
    RejectionReasonDescription: string;
}
/**
 * The shipment status to apply.
 * @export
 * @enum {string}
 */
export enum ShipmentStatus {
    ReadyForPickup = 'ReadyForPickup',
    PickedUp = 'PickedUp',
    RefusedPickup = 'RefusedPickup'
}

/**
 * Delivery constraints applicable to this order.
 * @export
 * @interface ShippingConstraints
 */
export interface ShippingConstraints {
    /**
     * 
     * @type {ConstraintType}
     * @memberof ShippingConstraints
     */
    PalletDelivery?: ConstraintType | 'MANDATORY';
    /**
     * 
     * @type {ConstraintType}
     * @memberof ShippingConstraints
     */
    SignatureConfirmation?: ConstraintType | 'MANDATORY';
    /**
     * 
     * @type {ConstraintType}
     * @memberof ShippingConstraints
     */
    RecipientIdentityVerification?: ConstraintType | 'MANDATORY';
    /**
     * 
     * @type {ConstraintType}
     * @memberof ShippingConstraints
     */
    RecipientAgeVerification?: ConstraintType | 'MANDATORY';
}
/**
 * Substitution options for an order item.
 * @export
 * @interface SubstitutionOption
 */
export interface SubstitutionOption {
    /**
     * The item\'s Amazon Standard Identification Number (ASIN).
     * @type {string}
     * @memberof SubstitutionOption
     */
    ASIN?: string;
    /**
     * The number of items to be picked for this substitution option. 
     * @type {number}
     * @memberof SubstitutionOption
     */
    QuantityOrdered?: number;
    /**
     * The item\'s seller stock keeping unit (SKU).
     * @type {string}
     * @memberof SubstitutionOption
     */
    SellerSKU?: string;
    /**
     * The item\'s title.
     * @type {string}
     * @memberof SubstitutionOption
     */
    Title?: string;
    /**
     * 
     * @type {Measurement}
     * @memberof SubstitutionOption
     */
    Measurement?: Measurement;
}
/**
 * Substitution preferences for an order item.
 * @export
 * @interface SubstitutionPreferences
 */
export interface SubstitutionPreferences {
    /**
     * The type of substitution that these preferences represent.
     * @type {string}
     * @memberof SubstitutionPreferences
     */
    SubstitutionType: SubstitutionPreferencesSubstitutionTypeEnum | 'CUSTOMER_PREFERENCE' | 'AMAZON_RECOMMENDED' | 'DO_NOT_SUBSTITUTE';
    /**
     * A collection of substitution options.
     * @type {Array<SubstitutionOption>}
     * @memberof SubstitutionPreferences
     */
    SubstitutionOptions?: Array<SubstitutionOption>;
}

/**
    * @export
    * @enum {string}
    */
export enum SubstitutionPreferencesSubstitutionTypeEnum {
    CustomerPreference = 'CUSTOMER_PREFERENCE',
    AmazonRecommended = 'AMAZON_RECOMMENDED',
    DoNotSubstitute = 'DO_NOT_SUBSTITUTE'
}

/**
 * The tax classification of the order.
 * @export
 * @interface TaxClassification
 */
export interface TaxClassification {
    /**
     * The type of tax.
     * @type {string}
     * @memberof TaxClassification
     */
    Name?: string;
    /**
     * The buyer\'s tax identifier.
     * @type {string}
     * @memberof TaxClassification
     */
    Value?: string;
}
/**
 * Information about withheld taxes.
 * @export
 * @interface TaxCollection
 */
export interface TaxCollection {
    /**
     * The tax collection model applied to the item.
     * @type {string}
     * @memberof TaxCollection
     */
    Model?: TaxCollectionModelEnum | 'MarketplaceFacilitator';
    /**
     * The party responsible for withholding the taxes and remitting them to the taxing authority.
     * @type {string}
     * @memberof TaxCollection
     */
    ResponsibleParty?: TaxCollectionResponsiblePartyEnum | 'Amazon Services, Inc.';
}

/**
    * @export
    * @enum {string}
    */
export enum TaxCollectionModelEnum {
    MarketplaceFacilitator = 'MarketplaceFacilitator'
}
/**
    * @export
    * @enum {string}
    */
export enum TaxCollectionResponsiblePartyEnum {
    AmazonServicesInc = 'Amazon Services, Inc.'
}

/**
 * The error response schema for the `UpdateShipmentStatus` operation.
 * @export
 * @interface UpdateShipmentStatusErrorResponse
 */
export interface UpdateShipmentStatusErrorResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateShipmentStatusErrorResponse
     */
    errors?: Array<Error>;
}
/**
 * The request body for the `updateShipmentStatus` operation.
 * @export
 * @interface UpdateShipmentStatusRequest
 */
export interface UpdateShipmentStatusRequest {
    /**
     * The unobfuscated marketplace identifier.
     * @type {string}
     * @memberof UpdateShipmentStatusRequest
     */
    marketplaceId: string;
    /**
     * 
     * @type {ShipmentStatus}
     * @memberof UpdateShipmentStatusRequest
     */
    shipmentStatus: ShipmentStatus | 'ReadyForPickup' | 'PickedUp' | 'RefusedPickup';
    /**
     * For partial shipment status updates, the list of order items and quantities to be updated.
     * @type {Array<object>}
     * @memberof UpdateShipmentStatusRequest
     */
    orderItems?: Array<object>;
}
/**
 * The error response schema for the `UpdateVerificationStatus` operation.
 * @export
 * @interface UpdateVerificationStatusErrorResponse
 */
export interface UpdateVerificationStatusErrorResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof UpdateVerificationStatusErrorResponse
     */
    errors?: Array<Error>;
}
/**
 * The request body for the `updateVerificationStatus` operation.
 * @export
 * @interface UpdateVerificationStatusRequest
 */
export interface UpdateVerificationStatusRequest {
    /**
     * 
     * @type {UpdateVerificationStatusRequestBody}
     * @memberof UpdateVerificationStatusRequest
     */
    regulatedOrderVerificationStatus: UpdateVerificationStatusRequestBody;
}
/**
 * The updated values of the `VerificationStatus` field.
 * @export
 * @interface UpdateVerificationStatusRequestBody
 */
export interface UpdateVerificationStatusRequestBody {
    /**
     * 
     * @type {VerificationStatus}
     * @memberof UpdateVerificationStatusRequestBody
     */
    status?: VerificationStatus | 'Pending' | 'Approved' | 'Rejected' | 'Expired' | 'Cancelled';
    /**
     * The identifier of the order\'s regulated information reviewer.
     * @type {string}
     * @memberof UpdateVerificationStatusRequestBody
     */
    externalReviewerId: string;
    /**
     * The unique identifier of the rejection reason used for rejecting the order\'s regulated information. Only required if the new status is rejected.
     * @type {string}
     * @memberof UpdateVerificationStatusRequestBody
     */
    rejectionReasonId?: string;
    /**
     * 
     * @type {VerificationDetails}
     * @memberof UpdateVerificationStatusRequestBody
     */
    verificationDetails?: VerificationDetails;
}
/**
 * The types of verification details that may be provided for the order and the criteria required for when the type of verification detail can be provided. The types of verification details allowed depend on the type of regulated product and will not change order to order.
 * @export
 * @interface ValidVerificationDetail
 */
export interface ValidVerificationDetail {
    /**
     * A supported type of verification detail. The type indicates which verification detail could be shared while updating the regulated order. Valid value: `prescriptionDetail`.
     * @type {string}
     * @memberof ValidVerificationDetail
     */
    VerificationDetailType: string;
    /**
     * A list of valid verification statuses where the associated verification detail type may be provided. For example, if the value of this field is [\"Approved\"], calls to provide the associated verification detail will fail for orders with a `VerificationStatus` of `Pending`, `Rejected`, `Expired`, or `Cancelled`.
     * @type {Array<VerificationStatus>}
     * @memberof ValidVerificationDetail
     */
    ValidVerificationStatuses: Array<(VerificationStatus | 'Pending' | 'Approved' | 'Rejected' | 'Expired' | 'Cancelled')>;
}
/**
 * Additional information related to the verification of a regulated order.
 * @export
 * @interface VerificationDetails
 */
export interface VerificationDetails {
    /**
     * 
     * @type {PrescriptionDetail}
     * @memberof VerificationDetails
     */
    prescriptionDetail?: PrescriptionDetail;
}
/**
 * The verification status of the order.
 * @export
 * @enum {string}
 */
export enum VerificationStatus {
    Pending = 'Pending',
    Approved = 'Approved',
    Rejected = 'Rejected',
    Expired = 'Expired',
    Cancelled = 'Cancelled'
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipment
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload Request body of &#x60;confirmShipment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipment: async (orderId: string, payload: ConfirmShipmentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('confirmShipment', 'orderId', orderId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('confirmShipment', 'payload', payload)
            const localVarPath = `/orders/v0/orders/{orderId}/shipmentConfirmation`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrder
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrder', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderAddress
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress: async (orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderAddress', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderBuyerInfo
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo: async (orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderBuyerInfo', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItems
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems: async (orderId: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderItems', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItemsBuyerInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo: async (orderId: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderItemsBuyerInfo', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderRegulatedInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderRegulatedInfo: async (orderId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('getOrderRegulatedInfo', 'orderId', orderId)
            const localVarPath = `/orders/v0/orders/{orderId}/regulatedInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns orders that are created or updated during the specified time period. If you want to return specific types of orders, you can apply filters to your request. `NextToken` doesn\'t affect any filters that you include in your request; it only impacts the pagination for the filtered orders response.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
         * @summary getOrders
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;marketplaceId&#x60; values.
         * @param {string} [createdAfter] Use this date to select orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;LastUpdatedAfter&#x60; and &#x60;LastUpdatedBefore&#x60; cannot be set when &#x60;CreatedAfter&#x60; is set.
         * @param {string} [createdBefore] Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is set. If specified, &#x60;CreatedBefore&#x60; must be equal to or after the &#x60;CreatedAfter&#x60; date and at least two minutes before current time.
         * @param {string} [lastUpdatedAfter] Use this date to select orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;CreatedAfter&#x60; or &#x60;CreatedBefore&#x60; cannot be set when &#x60;LastUpdatedAfter&#x60; is set.
         * @param {string} [lastUpdatedBefore] Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is set. But if specified, &#x60;LastUpdatedBefore&#x60; must be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least two minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (fulfilled by Amazon), &#x60;MFN&#x60; (fulfilled by seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Use this field to select orders that were paid with the specified payment methods.  **Possible values**: &#x60;COD&#x60; (cash on delivery), &#x60;CVS&#x60; (convenience store), &#x60;Other&#x60; (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If &#x60;SellerOrderId&#x60; is specified, then &#x60;FulfillmentChannels&#x60;, &#x60;OrderStatuses&#x60;, &#x60;PaymentMethod&#x60;, &#x60;LastUpdatedAfter&#x60;, LastUpdatedBefore, and &#x60;BuyerEmail&#x60; cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of &#x60;AmazonOrderId&#x60; values. An &#x60;AmazonOrderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] Use this date to select orders with a earliest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [earliestDeliveryDateAfter] Use this date to select orders with a earliest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateBefore] Use this date to select orders with a latest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateAfter] Use this date to select orders with a latest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, electronicInvoiceStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, actualFulfillmentSupplySourceId?: string, isISPU?: boolean, storeChainStoreId?: string, earliestDeliveryDateBefore?: string, earliestDeliveryDateAfter?: string, latestDeliveryDateBefore?: string, latestDeliveryDateAfter?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getOrders', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/orders/v0/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createdAfter !== undefined) {
                localVarQueryParameter['CreatedAfter'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['CreatedBefore'] = createdBefore;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['LastUpdatedAfter'] = lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['LastUpdatedBefore'] = lastUpdatedBefore;
            }

            if (orderStatuses) {
                localVarQueryParameter['OrderStatuses'] = orderStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (marketplaceIds) {
                localVarQueryParameter['MarketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (fulfillmentChannels) {
                localVarQueryParameter['FulfillmentChannels'] = fulfillmentChannels.join(COLLECTION_FORMATS.csv);
            }

            if (paymentMethods) {
                localVarQueryParameter['PaymentMethods'] = paymentMethods.join(COLLECTION_FORMATS.csv);
            }

            if (buyerEmail !== undefined) {
                localVarQueryParameter['BuyerEmail'] = buyerEmail;
            }

            if (sellerOrderId !== undefined) {
                localVarQueryParameter['SellerOrderId'] = sellerOrderId;
            }

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (easyShipShipmentStatuses) {
                localVarQueryParameter['EasyShipShipmentStatuses'] = easyShipShipmentStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (electronicInvoiceStatuses) {
                localVarQueryParameter['ElectronicInvoiceStatuses'] = electronicInvoiceStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }

            if (amazonOrderIds) {
                localVarQueryParameter['AmazonOrderIds'] = amazonOrderIds.join(COLLECTION_FORMATS.csv);
            }

            if (actualFulfillmentSupplySourceId !== undefined) {
                localVarQueryParameter['ActualFulfillmentSupplySourceId'] = actualFulfillmentSupplySourceId;
            }

            if (isISPU !== undefined) {
                localVarQueryParameter['IsISPU'] = isISPU;
            }

            if (storeChainStoreId !== undefined) {
                localVarQueryParameter['StoreChainStoreId'] = storeChainStoreId;
            }

            if (earliestDeliveryDateBefore !== undefined) {
                localVarQueryParameter['EarliestDeliveryDateBefore'] = earliestDeliveryDateBefore;
            }

            if (earliestDeliveryDateAfter !== undefined) {
                localVarQueryParameter['EarliestDeliveryDateAfter'] = earliestDeliveryDateAfter;
            }

            if (latestDeliveryDateBefore !== undefined) {
                localVarQueryParameter['LatestDeliveryDateBefore'] = latestDeliveryDateBefore;
            }

            if (latestDeliveryDateAfter !== undefined) {
                localVarQueryParameter['LatestDeliveryDateAfter'] = latestDeliveryDateAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus: async (orderId: string, payload: UpdateShipmentStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateShipmentStatus', 'orderId', orderId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateShipmentStatus', 'payload', payload)
            const localVarPath = `/orders/v0/orders/{orderId}/shipment`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateVerificationStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationStatus: async (orderId: string, payload: UpdateVerificationStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            assertParamExists('updateVerificationStatus', 'orderId', orderId)
            // verify required parameter 'payload' is not null or undefined
            assertParamExists('updateVerificationStatus', 'payload', payload)
            const localVarPath = `/orders/v0/orders/{orderId}/regulatedInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(payload, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipment
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload Request body of &#x60;confirmShipment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmShipment(orderId: string, payload: ConfirmShipmentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmShipment(orderId, payload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrder
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderAddress
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderAddress(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderAddress(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderBuyerInfo
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderBuyerInfo(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderBuyerInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderBuyerInfo(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItems
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItems(orderId: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderItemsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItems(orderId, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItemsBuyerInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderItemsBuyerInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderItemsBuyerInfo(orderId, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderRegulatedInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrderRegulatedInfo(orderId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderRegulatedInfoResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrderRegulatedInfo(orderId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns orders that are created or updated during the specified time period. If you want to return specific types of orders, you can apply filters to your request. `NextToken` doesn\'t affect any filters that you include in your request; it only impacts the pagination for the filtered orders response.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
         * @summary getOrders
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;marketplaceId&#x60; values.
         * @param {string} [createdAfter] Use this date to select orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;LastUpdatedAfter&#x60; and &#x60;LastUpdatedBefore&#x60; cannot be set when &#x60;CreatedAfter&#x60; is set.
         * @param {string} [createdBefore] Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is set. If specified, &#x60;CreatedBefore&#x60; must be equal to or after the &#x60;CreatedAfter&#x60; date and at least two minutes before current time.
         * @param {string} [lastUpdatedAfter] Use this date to select orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;CreatedAfter&#x60; or &#x60;CreatedBefore&#x60; cannot be set when &#x60;LastUpdatedAfter&#x60; is set.
         * @param {string} [lastUpdatedBefore] Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is set. But if specified, &#x60;LastUpdatedBefore&#x60; must be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least two minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (fulfilled by Amazon), &#x60;MFN&#x60; (fulfilled by seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Use this field to select orders that were paid with the specified payment methods.  **Possible values**: &#x60;COD&#x60; (cash on delivery), &#x60;CVS&#x60; (convenience store), &#x60;Other&#x60; (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If &#x60;SellerOrderId&#x60; is specified, then &#x60;FulfillmentChannels&#x60;, &#x60;OrderStatuses&#x60;, &#x60;PaymentMethod&#x60;, &#x60;LastUpdatedAfter&#x60;, LastUpdatedBefore, and &#x60;BuyerEmail&#x60; cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of &#x60;AmazonOrderId&#x60; values. An &#x60;AmazonOrderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] Use this date to select orders with a earliest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [earliestDeliveryDateAfter] Use this date to select orders with a earliest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateBefore] Use this date to select orders with a latest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateAfter] Use this date to select orders with a latest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, electronicInvoiceStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, actualFulfillmentSupplySourceId?: string, isISPU?: boolean, storeChainStoreId?: string, earliestDeliveryDateBefore?: string, earliestDeliveryDateAfter?: string, latestDeliveryDateBefore?: string, latestDeliveryDateAfter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShipmentStatus(orderId: string, payload: UpdateShipmentStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShipmentStatus(orderId, payload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateVerificationStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateVerificationStatus(orderId: string, payload: UpdateVerificationStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateVerificationStatus(orderId, payload, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary confirmShipment
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {ConfirmShipmentRequest} payload Request body of &#x60;confirmShipment&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmShipment(orderId: string, payload: ConfirmShipmentRequest, options?: any): AxiosPromise<void> {
            return localVarFp.confirmShipment(orderId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrder
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options?: any): AxiosPromise<GetOrderResponse> {
            return localVarFp.getOrder(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderAddress
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress(orderId: string, options?: any): AxiosPromise<GetOrderAddressResponse> {
            return localVarFp.getOrderAddress(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderBuyerInfo
         * @param {string} orderId An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo(orderId: string, options?: any): AxiosPromise<GetOrderBuyerInfoResponse> {
            return localVarFp.getOrderBuyerInfo(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItems
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems(orderId: string, nextToken?: string, options?: any): AxiosPromise<GetOrderItemsResponse> {
            return localVarFp.getOrderItems(orderId, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderItemsBuyerInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options?: any): AxiosPromise<GetOrderItemsBuyerInfoResponse> {
            return localVarFp.getOrderItemsBuyerInfo(orderId, nextToken, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary getOrderRegulatedInfo
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderRegulatedInfo(orderId: string, options?: any): AxiosPromise<GetOrderRegulatedInfoResponse> {
            return localVarFp.getOrderRegulatedInfo(orderId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns orders that are created or updated during the specified time period. If you want to return specific types of orders, you can apply filters to your request. `NextToken` doesn\'t affect any filters that you include in your request; it only impacts the pagination for the filtered orders response.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
         * @summary getOrders
         * @param {Array<string>} marketplaceIds A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;marketplaceId&#x60; values.
         * @param {string} [createdAfter] Use this date to select orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;LastUpdatedAfter&#x60; and &#x60;LastUpdatedBefore&#x60; cannot be set when &#x60;CreatedAfter&#x60; is set.
         * @param {string} [createdBefore] Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is set. If specified, &#x60;CreatedBefore&#x60; must be equal to or after the &#x60;CreatedAfter&#x60; date and at least two minutes before current time.
         * @param {string} [lastUpdatedAfter] Use this date to select orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;CreatedAfter&#x60; or &#x60;CreatedBefore&#x60; cannot be set when &#x60;LastUpdatedAfter&#x60; is set.
         * @param {string} [lastUpdatedBefore] Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is set. But if specified, &#x60;LastUpdatedBefore&#x60; must be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least two minutes before current time.
         * @param {Array<string>} [orderStatuses] A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (fulfilled by Amazon), &#x60;MFN&#x60; (fulfilled by seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Use this field to select orders that were paid with the specified payment methods.  **Possible values**: &#x60;COD&#x60; (cash on delivery), &#x60;CVS&#x60; (convenience store), &#x60;Other&#x60; (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If &#x60;SellerOrderId&#x60; is specified, then &#x60;FulfillmentChannels&#x60;, &#x60;OrderStatuses&#x60;, &#x60;PaymentMethod&#x60;, &#x60;LastUpdatedAfter&#x60;, LastUpdatedBefore, and &#x60;BuyerEmail&#x60; cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
         * @param {Array<string>} [electronicInvoiceStatuses] A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of &#x60;AmazonOrderId&#x60; values. An &#x60;AmazonOrderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [actualFulfillmentSupplySourceId] The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.
         * @param {boolean} [isISPU] When true, this order is marked to be picked up from a store rather than delivered.
         * @param {string} [storeChainStoreId] The store chain store identifier. Linked to a specific store in a store chain.
         * @param {string} [earliestDeliveryDateBefore] Use this date to select orders with a earliest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [earliestDeliveryDateAfter] Use this date to select orders with a earliest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateBefore] Use this date to select orders with a latest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {string} [latestDeliveryDateAfter] Use this date to select orders with a latest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, electronicInvoiceStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, actualFulfillmentSupplySourceId?: string, isISPU?: boolean, storeChainStoreId?: string, earliestDeliveryDateBefore?: string, earliestDeliveryDateAfter?: string, latestDeliveryDateBefore?: string, latestDeliveryDateAfter?: string, options?: any): AxiosPromise<GetOrdersResponse> {
            return localVarFp.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateShipmentStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateShipmentStatusRequest} payload The request body for the &#x60;updateShipmentStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShipmentStatus(orderId: string, payload: UpdateShipmentStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateShipmentStatus(orderId, payload, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @summary updateVerificationStatus
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {UpdateVerificationStatusRequest} payload The request body for the &#x60;updateVerificationStatus&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateVerificationStatus(orderId: string, payload: UpdateVerificationStatusRequest, options?: any): AxiosPromise<void> {
            return localVarFp.updateVerificationStatus(orderId, payload, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmShipment operation in OrdersApi.
 * @export
 * @interface OrdersApiConfirmShipmentRequest
 */
export interface OrdersApiConfirmShipmentRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiConfirmShipment
     */
    readonly orderId: string

    /**
     * Request body of &#x60;confirmShipment&#x60;.
     * @type {ConfirmShipmentRequest}
     * @memberof OrdersApiConfirmShipment
     */
    readonly payload: ConfirmShipmentRequest
}

/**
 * Request parameters for getOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRequest
 */
export interface OrdersApiGetOrderRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrder
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrderAddress operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderAddressRequest
 */
export interface OrdersApiGetOrderAddressRequest {
    /**
     * An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrderAddress
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrderBuyerInfo operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderBuyerInfoRequest
 */
export interface OrdersApiGetOrderBuyerInfoRequest {
    /**
     * An &#x60;orderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrderBuyerInfo
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrderItems operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderItemsRequest
 */
export interface OrdersApiGetOrderItemsRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrderItems
     */
    readonly orderId: string

    /**
     * A string token returned in the response of your previous request.
     * @type {string}
     * @memberof OrdersApiGetOrderItems
     */
    readonly nextToken?: string
}

/**
 * Request parameters for getOrderItemsBuyerInfo operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderItemsBuyerInfoRequest
 */
export interface OrdersApiGetOrderItemsBuyerInfoRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrderItemsBuyerInfo
     */
    readonly orderId: string

    /**
     * A string token returned in the response of your previous request.
     * @type {string}
     * @memberof OrdersApiGetOrderItemsBuyerInfo
     */
    readonly nextToken?: string
}

/**
 * Request parameters for getOrderRegulatedInfo operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrderRegulatedInfoRequest
 */
export interface OrdersApiGetOrderRegulatedInfoRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiGetOrderRegulatedInfo
     */
    readonly orderId: string
}

/**
 * Request parameters for getOrders operation in OrdersApi.
 * @export
 * @interface OrdersApiGetOrdersRequest
 */
export interface OrdersApiGetOrdersRequest {
    /**
     * A list of &#x60;MarketplaceId&#x60; values. Used to select orders that were placed in the specified marketplaces.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of &#x60;marketplaceId&#x60; values.
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly marketplaceIds: Array<string>

    /**
     * Use this date to select orders created after (or at) a specified time. Only orders placed after the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;LastUpdatedAfter&#x60; and &#x60;LastUpdatedBefore&#x60; cannot be set when &#x60;CreatedAfter&#x60; is set.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly createdAfter?: string

    /**
     * Use this date to select orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;CreatedBefore&#x60; is optional when &#x60;CreatedAfter&#x60; is set. If specified, &#x60;CreatedBefore&#x60; must be equal to or after the &#x60;CreatedAfter&#x60; date and at least two minutes before current time.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly createdBefore?: string

    /**
     * Use this date to select orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: Either the &#x60;CreatedAfter&#x60; parameter or the &#x60;LastUpdatedAfter&#x60; parameter is required. Both cannot be empty. &#x60;CreatedAfter&#x60; or &#x60;CreatedBefore&#x60; cannot be set when &#x60;LastUpdatedAfter&#x60; is set.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly lastUpdatedAfter?: string

    /**
     * Use this date to select orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.  **Note**: &#x60;LastUpdatedBefore&#x60; is optional when &#x60;LastUpdatedAfter&#x60; is set. But if specified, &#x60;LastUpdatedBefore&#x60; must be equal to or after the &#x60;LastUpdatedAfter&#x60; date and at least two minutes before current time.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly lastUpdatedBefore?: string

    /**
     * A list of &#x60;OrderStatus&#x60; values used to filter the results.  **Possible values:** - &#x60;PendingAvailability&#x60; (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.) - &#x60;Pending&#x60; (The order has been placed but payment has not been authorized.) - &#x60;Unshipped&#x60; (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.) - &#x60;PartiallyShipped&#x60; (One or more, but not all, items in the order have been shipped.) - &#x60;Shipped&#x60; (All items in the order have been shipped.) - &#x60;InvoiceUnconfirmed&#x60; (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.) - &#x60;Canceled&#x60; (The order has been canceled.) - &#x60;Unfulfillable&#x60; (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly orderStatuses?: Array<string>

    /**
     * A list that indicates how an order was fulfilled. Filters the results by fulfillment channel.   **Possible values**: &#x60;AFN&#x60; (fulfilled by Amazon), &#x60;MFN&#x60; (fulfilled by seller).
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly fulfillmentChannels?: Array<string>

    /**
     * A list of payment method values. Use this field to select orders that were paid with the specified payment methods.  **Possible values**: &#x60;COD&#x60; (cash on delivery), &#x60;CVS&#x60; (convenience store), &#x60;Other&#x60; (Any payment method other than COD or CVS).
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly paymentMethods?: Array<string>

    /**
     * The email address of a buyer. Used to select orders that contain the specified email address.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly buyerEmail?: string

    /**
     * An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If &#x60;SellerOrderId&#x60; is specified, then &#x60;FulfillmentChannels&#x60;, &#x60;OrderStatuses&#x60;, &#x60;PaymentMethod&#x60;, &#x60;LastUpdatedAfter&#x60;, LastUpdatedBefore, and &#x60;BuyerEmail&#x60; cannot be specified.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly sellerOrderId?: string

    /**
     * A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
     * @type {number}
     * @memberof OrdersApiGetOrders
     */
    readonly maxResultsPerPage?: number

    /**
     * A list of &#x60;EasyShipShipmentStatus&#x60; values. Used to select Easy Ship orders with statuses that match the specified values. If &#x60;EasyShipShipmentStatus&#x60; is specified, only Amazon Easy Ship orders are returned.  **Possible values:** - &#x60;PendingSchedule&#x60; (The package is awaiting the schedule for pick-up.) - &#x60;PendingPickUp&#x60; (Amazon has not yet picked up the package from the seller.) - &#x60;PendingDropOff&#x60; (The seller will deliver the package to the carrier.) - &#x60;LabelCanceled&#x60; (The seller canceled the pickup.) - &#x60;PickedUp&#x60; (Amazon has picked up the package from the seller.) - &#x60;DroppedOff&#x60; (The package is delivered to the carrier by the seller.) - &#x60;AtOriginFC&#x60; (The packaged is at the origin fulfillment center.) - &#x60;AtDestinationFC&#x60; (The package is at the destination fulfillment center.) - &#x60;Delivered&#x60; (The package has been delivered.) - &#x60;RejectedByBuyer&#x60; (The package has been rejected by the buyer.) - &#x60;Undeliverable&#x60; (The package cannot be delivered.) - &#x60;ReturningToSeller&#x60; (The package was not delivered and is being returned to the seller.) - &#x60;ReturnedToSeller&#x60; (The package was not delivered and was returned to the seller.) - &#x60;Lost&#x60; (The package is lost.) - &#x60;OutForDelivery&#x60; (The package is out for delivery.) - &#x60;Damaged&#x60; (The package was damaged by the carrier.)
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly easyShipShipmentStatuses?: Array<string>

    /**
     * A list of &#x60;ElectronicInvoiceStatus&#x60; values. Used to select orders with electronic invoice statuses that match the specified values.  **Possible values:** - &#x60;NotRequired&#x60; (Electronic invoice submission is not required for this order.) - &#x60;NotFound&#x60; (The electronic invoice was not submitted for this order.) - &#x60;Processing&#x60; (The electronic invoice is being processed for this order.) - &#x60;Errored&#x60; (The last submitted electronic invoice was rejected for this order.) - &#x60;Accepted&#x60; (The last submitted electronic invoice was submitted and accepted.)
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly electronicInvoiceStatuses?: Array<string>

    /**
     * A string token returned in the response of your previous request.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly nextToken?: string

    /**
     * A list of &#x60;AmazonOrderId&#x60; values. An &#x60;AmazonOrderId&#x60; is an Amazon-defined order identifier, in 3-7-7 format.
     * @type {Array<string>}
     * @memberof OrdersApiGetOrders
     */
    readonly amazonOrderIds?: Array<string>

    /**
     * The &#x60;sourceId&#x60; of the location from where you want the order fulfilled.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly actualFulfillmentSupplySourceId?: string

    /**
     * When true, this order is marked to be picked up from a store rather than delivered.
     * @type {boolean}
     * @memberof OrdersApiGetOrders
     */
    readonly isISPU?: boolean

    /**
     * The store chain store identifier. Linked to a specific store in a store chain.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly storeChainStoreId?: string

    /**
     * Use this date to select orders with a earliest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly earliestDeliveryDateBefore?: string

    /**
     * Use this date to select orders with a earliest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly earliestDeliveryDateAfter?: string

    /**
     * Use this date to select orders with a latest delivery date before (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly latestDeliveryDateBefore?: string

    /**
     * Use this date to select orders with a latest delivery date after (or at) a specified time. The date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format.
     * @type {string}
     * @memberof OrdersApiGetOrders
     */
    readonly latestDeliveryDateAfter?: string
}

/**
 * Request parameters for updateShipmentStatus operation in OrdersApi.
 * @export
 * @interface OrdersApiUpdateShipmentStatusRequest
 */
export interface OrdersApiUpdateShipmentStatusRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiUpdateShipmentStatus
     */
    readonly orderId: string

    /**
     * The request body for the &#x60;updateShipmentStatus&#x60; operation.
     * @type {UpdateShipmentStatusRequest}
     * @memberof OrdersApiUpdateShipmentStatus
     */
    readonly payload: UpdateShipmentStatusRequest
}

/**
 * Request parameters for updateVerificationStatus operation in OrdersApi.
 * @export
 * @interface OrdersApiUpdateVerificationStatusRequest
 */
export interface OrdersApiUpdateVerificationStatusRequest {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrdersApiUpdateVerificationStatus
     */
    readonly orderId: string

    /**
     * The request body for the &#x60;updateVerificationStatus&#x60; operation.
     * @type {UpdateVerificationStatusRequest}
     * @memberof OrdersApiUpdateVerificationStatus
     */
    readonly payload: UpdateVerificationStatusRequest
}

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary confirmShipment
     * @param {OrdersApiConfirmShipmentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public confirmShipment(requestParameters: OrdersApiConfirmShipmentRequest, options?: any) {
        return OrdersApiFp(this.configuration).confirmShipment(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrder
     * @param {OrdersApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrder(requestParameters: OrdersApiGetOrderRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrder(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrderAddress
     * @param {OrdersApiGetOrderAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderAddress(requestParameters: OrdersApiGetOrderAddressRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrderAddress(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrderBuyerInfo
     * @param {OrdersApiGetOrderBuyerInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderBuyerInfo(requestParameters: OrdersApiGetOrderBuyerInfoRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrderBuyerInfo(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns detailed order item information for the order that you specify. If `NextToken` is provided, it\'s used to retrieve the next page of order items.  __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrderItems
     * @param {OrdersApiGetOrderItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderItems(requestParameters: OrdersApiGetOrderItemsRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrderItems(requestParameters.orderId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrderItemsBuyerInfo
     * @param {OrdersApiGetOrderItemsBuyerInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderItemsBuyerInfo(requestParameters: OrdersApiGetOrderItemsBuyerInfoRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrderItemsBuyerInfo(requestParameters.orderId, requestParameters.nextToken, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary getOrderRegulatedInfo
     * @param {OrdersApiGetOrderRegulatedInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrderRegulatedInfo(requestParameters: OrdersApiGetOrderRegulatedInfoRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrderRegulatedInfo(requestParameters.orderId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns orders that are created or updated during the specified time period. If you want to return specific types of orders, you can apply filters to your request. `NextToken` doesn\'t affect any filters that you include in your request; it only impacts the pagination for the filtered orders response.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that are applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api) in the Selling Partner API documentation.
     * @summary getOrders
     * @param {OrdersApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public getOrders(requestParameters: OrdersApiGetOrdersRequest, options?: any) {
        return OrdersApiFp(this.configuration).getOrders(requestParameters.marketplaceIds, requestParameters.createdAfter, requestParameters.createdBefore, requestParameters.lastUpdatedAfter, requestParameters.lastUpdatedBefore, requestParameters.orderStatuses, requestParameters.fulfillmentChannels, requestParameters.paymentMethods, requestParameters.buyerEmail, requestParameters.sellerOrderId, requestParameters.maxResultsPerPage, requestParameters.easyShipShipmentStatuses, requestParameters.electronicInvoiceStatuses, requestParameters.nextToken, requestParameters.amazonOrderIds, requestParameters.actualFulfillmentSupplySourceId, requestParameters.isISPU, requestParameters.storeChainStoreId, requestParameters.earliestDeliveryDateBefore, requestParameters.earliestDeliveryDateAfter, requestParameters.latestDeliveryDateBefore, requestParameters.latestDeliveryDateAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the shipment status for an order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 15 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateShipmentStatus
     * @param {OrdersApiUpdateShipmentStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public updateShipmentStatus(requestParameters: OrdersApiUpdateShipmentStatusRequest, options?: any) {
        return OrdersApiFp(this.configuration).updateShipmentStatus(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table contains the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may receive higher rate and burst values then those shown here. For more information, refer to [Usage Plans and Rate Limits](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @summary updateVerificationStatus
     * @param {OrdersApiUpdateVerificationStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public updateVerificationStatus(requestParameters: OrdersApiUpdateVerificationStatusRequest, options?: any) {
        return OrdersApiFp(this.configuration).updateVerificationStatus(requestParameters.orderId, requestParameters.payload, options).then((request) => request(this.axios, this.basePath));
    }
}


