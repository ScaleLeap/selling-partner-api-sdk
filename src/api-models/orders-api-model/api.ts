// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The shipping address for the order.
 * @export
 * @interface Address
 */
export interface Address {
    /**
     * The name.
     * @type {string}
     * @memberof Address
     */
    name: string;
    /**
     * The street address.
     * @type {string}
     * @memberof Address
     */
    addressLine1?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine2?: string;
    /**
     * Additional street address information, if required.
     * @type {string}
     * @memberof Address
     */
    addressLine3?: string;
    /**
     * The city 
     * @type {string}
     * @memberof Address
     */
    city?: string;
    /**
     * The county.
     * @type {string}
     * @memberof Address
     */
    county?: string;
    /**
     * The district.
     * @type {string}
     * @memberof Address
     */
    district?: string;
    /**
     * The state or region.
     * @type {string}
     * @memberof Address
     */
    stateOrRegion?: string;
    /**
     * The municipality.
     * @type {string}
     * @memberof Address
     */
    municipality?: string;
    /**
     * The postal code.
     * @type {string}
     * @memberof Address
     */
    postalCode?: string;
    /**
     * The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
     * @type {string}
     * @memberof Address
     */
    countryCode?: string;
    /**
     * The phone number. Not returned for Fulfillment by Amazon (FBA) orders.
     * @type {string}
     * @memberof Address
     */
    phone?: string;
    /**
     * The address type of the shipping address.
     * @type {string}
     * @memberof Address
     */
    addressType?: AddressAddressTypeEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum AddressAddressTypeEnum {
    Residential = 'Residential',
    Commercial = 'Commercial'
}

/**
 * Buyer information for custom orders from the Amazon Custom program.
 * @export
 * @interface BuyerCustomizedInfoDetail
 */
export interface BuyerCustomizedInfoDetail {
    /**
     * The location of a zip file containing Amazon Custom data.
     * @type {string}
     * @memberof BuyerCustomizedInfoDetail
     */
    customizedURL?: string;
}
/**
 * Tax information about the buyer.
 * @export
 * @interface BuyerTaxInfo
 */
export interface BuyerTaxInfo {
    /**
     * The legal name of the company.
     * @type {string}
     * @memberof BuyerTaxInfo
     */
    companyLegalName?: string;
    /**
     * The country or region imposing the tax.
     * @type {string}
     * @memberof BuyerTaxInfo
     */
    taxingRegion?: string;
    /**
     * A list of tax classifications that apply to the order.
     * @type {Array<TaxClassification>}
     * @memberof BuyerTaxInfo
     */
    taxClassifications?: Array<TaxClassification>;
}
/**
 * Contains the instructions about the fulfillment like where should it be fulfilled from.
 * @export
 * @interface FulfillmentInstruction
 */
export interface FulfillmentInstruction {
    /**
     * Denotes the recommended sourceId where the order should be fulfilled from.
     * @type {string}
     * @memberof FulfillmentInstruction
     */
    fulfillmentSupplySourceId?: string;
}
/**
 * The response schema for the getOrderAddress operation.
 * @export
 * @interface GetOrderAddressResponse
 */
export interface GetOrderAddressResponse {
    /**
     * 
     * @type {OrderAddress}
     * @memberof GetOrderAddressResponse
     */
    payload?: OrderAddress;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderAddressResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrderBuyerInfo operation.
 * @export
 * @interface GetOrderBuyerInfoResponse
 */
export interface GetOrderBuyerInfoResponse {
    /**
     * 
     * @type {OrderBuyerInfo}
     * @memberof GetOrderBuyerInfoResponse
     */
    payload?: OrderBuyerInfo;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderBuyerInfoResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrderItemsBuyerInfo operation.
 * @export
 * @interface GetOrderItemsBuyerInfoResponse
 */
export interface GetOrderItemsBuyerInfoResponse {
    /**
     * 
     * @type {OrderItemsBuyerInfoList}
     * @memberof GetOrderItemsBuyerInfoResponse
     */
    payload?: OrderItemsBuyerInfoList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderItemsBuyerInfoResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrderItems operation.
 * @export
 * @interface GetOrderItemsResponse
 */
export interface GetOrderItemsResponse {
    /**
     * 
     * @type {OrderItemsList}
     * @memberof GetOrderItemsResponse
     */
    payload?: OrderItemsList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderItemsResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrder operation.
 * @export
 * @interface GetOrderResponse
 */
export interface GetOrderResponse {
    /**
     * 
     * @type {Order}
     * @memberof GetOrderResponse
     */
    payload?: Order;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the getOrders operation.
 * @export
 * @interface GetOrdersResponse
 */
export interface GetOrdersResponse {
    /**
     * 
     * @type {OrdersList}
     * @memberof GetOrdersResponse
     */
    payload?: OrdersList;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetOrdersResponse
     */
    errors?: Array<Error>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The monetary value of the order.
 * @export
 * @interface Money
 */
export interface Money {
    /**
     * The three-digit currency code. In ISO 4217 format.
     * @type {string}
     * @memberof Money
     */
    currencyCode?: string;
    /**
     * The currency amount.
     * @type {string}
     * @memberof Money
     */
    amount?: string;
}
/**
 * Order information.
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof Order
     */
    amazonOrderId: string;
    /**
     * A seller-defined order identifier.
     * @type {string}
     * @memberof Order
     */
    sellerOrderId?: string;
    /**
     * The date when the order was created.
     * @type {string}
     * @memberof Order
     */
    purchaseDate: string;
    /**
     * The date when the order was last updated.  Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
     * @type {string}
     * @memberof Order
     */
    lastUpdateDate: string;
    /**
     * The current order status.
     * @type {string}
     * @memberof Order
     */
    orderStatus: OrderOrderStatusEnum;
    /**
     * Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
     * @type {string}
     * @memberof Order
     */
    fulfillmentChannel?: OrderFulfillmentChannelEnum;
    /**
     * The sales channel of the first item in the order.
     * @type {string}
     * @memberof Order
     */
    salesChannel?: string;
    /**
     * The order channel of the first item in the order.
     * @type {string}
     * @memberof Order
     */
    orderChannel?: string;
    /**
     * The shipment service level of the order.
     * @type {string}
     * @memberof Order
     */
    shipServiceLevel?: string;
    /**
     * 
     * @type {Money}
     * @memberof Order
     */
    orderTotal?: Money;
    /**
     * The number of items shipped.
     * @type {number}
     * @memberof Order
     */
    numberOfItemsShipped?: number;
    /**
     * The number of items unshipped.
     * @type {number}
     * @memberof Order
     */
    numberOfItemsUnshipped?: number;
    /**
     * A list of payment execution detail items.
     * @type {Array<PaymentExecutionDetailItem>}
     * @memberof Order
     */
    paymentExecutionDetail?: Array<PaymentExecutionDetailItem>;
    /**
     * The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
     * @type {string}
     * @memberof Order
     */
    paymentMethod?: OrderPaymentMethodEnum;
    /**
     * A list of payment method detail items.
     * @type {Array<string>}
     * @memberof Order
     */
    paymentMethodDetails?: Array<string>;
    /**
     * The identifier for the marketplace where the order was placed.
     * @type {string}
     * @memberof Order
     */
    marketplaceId?: string;
    /**
     * The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
     * @type {string}
     * @memberof Order
     */
    shipmentServiceLevelCategory?: string;
    /**
     * The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.  Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
     * @type {string}
     * @memberof Order
     */
    easyShipShipmentStatus?: string;
    /**
     * Custom ship label for Checkout by Amazon (CBA).
     * @type {string}
     * @memberof Order
     */
    cbaDisplayableShippingLabel?: string;
    /**
     * The type of the order.
     * @type {string}
     * @memberof Order
     */
    orderType?: OrderOrderTypeEnum;
    /**
     * The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
     * @type {string}
     * @memberof Order
     */
    earliestShipDate?: string;
    /**
     * The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
     * @type {string}
     * @memberof Order
     */
    latestShipDate?: string;
    /**
     * The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
     * @type {string}
     * @memberof Order
     */
    earliestDeliveryDate?: string;
    /**
     * The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
     * @type {string}
     * @memberof Order
     */
    latestDeliveryDate?: string;
    /**
     * When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
     * @type {boolean}
     * @memberof Order
     */
    isBusinessOrder?: boolean;
    /**
     * When true, the order is a seller-fulfilled Amazon Prime order.
     * @type {boolean}
     * @memberof Order
     */
    isPrime?: boolean;
    /**
     * When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
     * @type {boolean}
     * @memberof Order
     */
    isPremiumOrder?: boolean;
    /**
     * When true, the order is a GlobalExpress order.
     * @type {boolean}
     * @memberof Order
     */
    isGlobalExpressEnabled?: boolean;
    /**
     * The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
     * @type {string}
     * @memberof Order
     */
    replacedOrderId?: string;
    /**
     * When true, this is a replacement order.
     * @type {boolean}
     * @memberof Order
     */
    isReplacementOrder?: boolean;
    /**
     * Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
     * @type {string}
     * @memberof Order
     */
    promiseResponseDueDate?: string;
    /**
     * When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
     * @type {boolean}
     * @memberof Order
     */
    isEstimatedShipDateSet?: boolean;
    /**
     * When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
     * @type {boolean}
     * @memberof Order
     */
    isSoldByAB?: boolean;
    /**
     * 
     * @type {Address}
     * @memberof Order
     */
    assignedShipFromLocationAddress?: Address;
    /**
     * 
     * @type {FulfillmentInstruction}
     * @memberof Order
     */
    fulfillmentInstruction?: FulfillmentInstruction;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderOrderStatusEnum {
    Pending = 'Pending',
    Unshipped = 'Unshipped',
    PartiallyShipped = 'PartiallyShipped',
    Shipped = 'Shipped',
    Canceled = 'Canceled',
    Unfulfillable = 'Unfulfillable',
    InvoiceUnconfirmed = 'InvoiceUnconfirmed',
    PendingAvailability = 'PendingAvailability'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderFulfillmentChannelEnum {
    MFN = 'MFN',
    AFN = 'AFN'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderPaymentMethodEnum {
    COD = 'COD',
    CVS = 'CVS',
    Other = 'Other'
}
/**
    * @export
    * @enum {string}
    */
export enum OrderOrderTypeEnum {
    StandardOrder = 'StandardOrder',
    LongLeadTimeOrder = 'LongLeadTimeOrder',
    Preorder = 'Preorder',
    BackOrder = 'BackOrder',
    SourcingOnDemandOrder = 'SourcingOnDemandOrder'
}

/**
 * The shipping address for the order.
 * @export
 * @interface OrderAddress
 */
export interface OrderAddress {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderAddress
     */
    amazonOrderId: string;
    /**
     * 
     * @type {Address}
     * @memberof OrderAddress
     */
    shippingAddress?: Address;
}
/**
 * Buyer information for an order.
 * @export
 * @interface OrderBuyerInfo
 */
export interface OrderBuyerInfo {
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    amazonOrderId: string;
    /**
     * The anonymized email address of the buyer.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    buyerEmail?: string;
    /**
     * The name of the buyer.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    buyerName?: string;
    /**
     * The county of the buyer.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    buyerCounty?: string;
    /**
     * 
     * @type {BuyerTaxInfo}
     * @memberof OrderBuyerInfo
     */
    buyerTaxInfo?: BuyerTaxInfo;
    /**
     * The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
     * @type {string}
     * @memberof OrderBuyerInfo
     */
    purchaseOrderNumber?: string;
}
/**
 * A single order item.
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof OrderItem
     */
    ASIN: string;
    /**
     * The seller stock keeping unit (SKU) of the item.
     * @type {string}
     * @memberof OrderItem
     */
    sellerSKU?: string;
    /**
     * An Amazon-defined order item identifier.
     * @type {string}
     * @memberof OrderItem
     */
    orderItemId: string;
    /**
     * The name of the item.
     * @type {string}
     * @memberof OrderItem
     */
    title?: string;
    /**
     * The number of items in the order. 
     * @type {number}
     * @memberof OrderItem
     */
    quantityOrdered: number;
    /**
     * The number of items shipped.
     * @type {number}
     * @memberof OrderItem
     */
    quantityShipped?: number;
    /**
     * 
     * @type {ProductInfoDetail}
     * @memberof OrderItem
     */
    productInfo?: ProductInfoDetail;
    /**
     * 
     * @type {PointsGrantedDetail}
     * @memberof OrderItem
     */
    pointsGranted?: PointsGrantedDetail;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    itemPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    shippingPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    itemTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    shippingTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    shippingDiscount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    shippingDiscountTax?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    promotionDiscount?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    promotionDiscountTax?: Money;
    /**
     * A list of promotion identifiers provided by the seller when the promotions were created.
     * @type {Array<string>}
     * @memberof OrderItem
     */
    promotionIds?: Array<string>;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    cODFee?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItem
     */
    cODFeeDiscount?: Money;
    /**
     * When true, the item is a gift.
     * @type {boolean}
     * @memberof OrderItem
     */
    isGift?: boolean;
    /**
     * The condition of the item as described by the seller.
     * @type {string}
     * @memberof OrderItem
     */
    conditionNote?: string;
    /**
     * The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
     * @type {string}
     * @memberof OrderItem
     */
    conditionId?: string;
    /**
     * The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
     * @type {string}
     * @memberof OrderItem
     */
    conditionSubtypeId?: string;
    /**
     * The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     * @type {string}
     * @memberof OrderItem
     */
    scheduledDeliveryStartDate?: string;
    /**
     * The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
     * @type {string}
     * @memberof OrderItem
     */
    scheduledDeliveryEndDate?: string;
    /**
     * Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
     * @type {string}
     * @memberof OrderItem
     */
    priceDesignation?: string;
    /**
     * 
     * @type {TaxCollection}
     * @memberof OrderItem
     */
    taxCollection?: TaxCollection;
    /**
     * When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
     * @type {boolean}
     * @memberof OrderItem
     */
    serialNumberRequired?: boolean;
    /**
     * When true, transparency codes are required.
     * @type {boolean}
     * @memberof OrderItem
     */
    isTransparency?: boolean;
    /**
     * The IOSS number of the seller. Sellers selling in the EU will be assigned a unique IOSS number that must be listed on all packages sent to the EU.
     * @type {string}
     * @memberof OrderItem
     */
    iossNumber?: string;
    /**
     * The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
     * @type {string}
     * @memberof OrderItem
     */
    deemedResellerCategory?: OrderItemDeemedResellerCategoryEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum OrderItemDeemedResellerCategoryEnum {
    IOSS = 'IOSS',
    UOSS = 'UOSS'
}

/**
 * A single order item\'s buyer information.
 * @export
 * @interface OrderItemBuyerInfo
 */
export interface OrderItemBuyerInfo {
    /**
     * An Amazon-defined order item identifier.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    orderItemId: string;
    /**
     * 
     * @type {BuyerCustomizedInfoDetail}
     * @memberof OrderItemBuyerInfo
     */
    buyerCustomizedInfo?: BuyerCustomizedInfoDetail;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemBuyerInfo
     */
    giftWrapPrice?: Money;
    /**
     * 
     * @type {Money}
     * @memberof OrderItemBuyerInfo
     */
    giftWrapTax?: Money;
    /**
     * A gift message provided by the buyer.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    giftMessageText?: string;
    /**
     * The gift wrap level specified by the buyer.
     * @type {string}
     * @memberof OrderItemBuyerInfo
     */
    giftWrapLevel?: string;
}
/**
 * A single order item\'s buyer information list with the order ID.
 * @export
 * @interface OrderItemsBuyerInfoList
 */
export interface OrderItemsBuyerInfoList {
    /**
     * A single order item\'s buyer information list.
     * @type {Array<OrderItemBuyerInfo>}
     * @memberof OrderItemsBuyerInfoList
     */
    orderItems: Array<OrderItemBuyerInfo>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrderItemsBuyerInfoList
     */
    nextToken?: string;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderItemsBuyerInfoList
     */
    amazonOrderId: string;
}
/**
 * The order items list along with the order ID.
 * @export
 * @interface OrderItemsList
 */
export interface OrderItemsList {
    /**
     * A list of order items.
     * @type {Array<OrderItem>}
     * @memberof OrderItemsList
     */
    orderItems: Array<OrderItem>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrderItemsList
     */
    nextToken?: string;
    /**
     * An Amazon-defined order identifier, in 3-7-7 format.
     * @type {string}
     * @memberof OrderItemsList
     */
    amazonOrderId: string;
}
/**
 * A list of orders along with additional information to make subsequent API calls.
 * @export
 * @interface OrdersList
 */
export interface OrdersList {
    /**
     * A list of orders.
     * @type {Array<Order>}
     * @memberof OrdersList
     */
    orders: Array<Order>;
    /**
     * When present and not empty, pass this string token in the next request to return the next response page.
     * @type {string}
     * @memberof OrdersList
     */
    nextToken?: string;
    /**
     * A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format.
     * @type {string}
     * @memberof OrdersList
     */
    lastUpdatedBefore?: string;
    /**
     * A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
     * @type {string}
     * @memberof OrdersList
     */
    createdBefore?: string;
}
/**
 * Information about a sub-payment method used to pay for a COD order.
 * @export
 * @interface PaymentExecutionDetailItem
 */
export interface PaymentExecutionDetailItem {
    /**
     * 
     * @type {Money}
     * @memberof PaymentExecutionDetailItem
     */
    payment: Money;
    /**
     * A sub-payment method for a COD order.  Possible values:  * COD - Cash On Delivery.  * GC - Gift Card.  * PointsAccount - Amazon Points.
     * @type {string}
     * @memberof PaymentExecutionDetailItem
     */
    paymentMethod: string;
}
/**
 * The number of Amazon Points offered with the purchase of an item, and their monetary value.
 * @export
 * @interface PointsGrantedDetail
 */
export interface PointsGrantedDetail {
    /**
     * The number of Amazon Points granted with the purchase of an item.
     * @type {number}
     * @memberof PointsGrantedDetail
     */
    pointsNumber?: number;
    /**
     * 
     * @type {Money}
     * @memberof PointsGrantedDetail
     */
    pointsMonetaryValue?: Money;
}
/**
 * Product information on the number of items.
 * @export
 * @interface ProductInfoDetail
 */
export interface ProductInfoDetail {
    /**
     * The total number of items that are included in the ASIN.
     * @type {number}
     * @memberof ProductInfoDetail
     */
    numberOfItems?: number;
}
/**
 * The tax classification for the order.
 * @export
 * @interface TaxClassification
 */
export interface TaxClassification {
    /**
     * The type of tax.
     * @type {string}
     * @memberof TaxClassification
     */
    name?: string;
    /**
     * The buyer\'s tax identifier.
     * @type {string}
     * @memberof TaxClassification
     */
    value?: string;
}
/**
 * Information about withheld taxes.
 * @export
 * @interface TaxCollection
 */
export interface TaxCollection {
    /**
     * The tax collection model applied to the item.
     * @type {string}
     * @memberof TaxCollection
     */
    model?: TaxCollectionModelEnum;
    /**
     * The party responsible for withholding the taxes and remitting them to the taxing authority.
     * @type {string}
     * @memberof TaxCollection
     */
    responsibleParty?: TaxCollectionResponsiblePartyEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum TaxCollectionModelEnum {
    MarketplaceFacilitator = 'MarketplaceFacilitator'
}
/**
    * @export
    * @enum {string}
    */
export enum TaxCollectionResponsiblePartyEnum {
    AmazonServicesInc = 'Amazon Services, Inc.'
}


/**
 * OrdersV0Api - axios parameter creator
 * @export
 */
export const OrdersV0ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrder.');
            }
            const localVarPath = `/orders/v0/orders/{orderId}`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the shipping address for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress(orderId: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderAddress.');
            }
            const localVarPath = `/orders/v0/orders/{orderId}/address`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo(orderId: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderBuyerInfo.');
            }
            const localVarPath = `/orders/v0/orders/{orderId}/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it\'s used to retrieve the next page of order items.  Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems(orderId: string, nextToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderItems.');
            }
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns buyer information in the order items of the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options: any = {}): RequestArgs {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling getOrderItemsBuyerInfo.');
            }
            const localVarPath = `/orders/v0/orders/{orderId}/orderItems/buyerInfo`
                .replace(`{${"orderId"}}`, encodeURIComponent(String(orderId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {Array<string>} [orderStatuses] A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.).
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller).
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, options: any = {}): RequestArgs {
            // verify required parameter 'marketplaceIds' is not null or undefined
            if (marketplaceIds === null || marketplaceIds === undefined) {
                throw new RequiredError('marketplaceIds','Required parameter marketplaceIds was null or undefined when calling getOrders.');
            }
            const localVarPath = `/orders/v0/orders`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (createdAfter !== undefined) {
                localVarQueryParameter['CreatedAfter'] = createdAfter;
            }

            if (createdBefore !== undefined) {
                localVarQueryParameter['CreatedBefore'] = createdBefore;
            }

            if (lastUpdatedAfter !== undefined) {
                localVarQueryParameter['LastUpdatedAfter'] = lastUpdatedAfter;
            }

            if (lastUpdatedBefore !== undefined) {
                localVarQueryParameter['LastUpdatedBefore'] = lastUpdatedBefore;
            }

            if (orderStatuses) {
                localVarQueryParameter['OrderStatuses'] = orderStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (marketplaceIds) {
                localVarQueryParameter['MarketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (fulfillmentChannels) {
                localVarQueryParameter['FulfillmentChannels'] = fulfillmentChannels.join(COLLECTION_FORMATS.csv);
            }

            if (paymentMethods) {
                localVarQueryParameter['PaymentMethods'] = paymentMethods.join(COLLECTION_FORMATS.csv);
            }

            if (buyerEmail !== undefined) {
                localVarQueryParameter['BuyerEmail'] = buyerEmail;
            }

            if (sellerOrderId !== undefined) {
                localVarQueryParameter['SellerOrderId'] = sellerOrderId;
            }

            if (maxResultsPerPage !== undefined) {
                localVarQueryParameter['MaxResultsPerPage'] = maxResultsPerPage;
            }

            if (easyShipShipmentStatuses) {
                localVarQueryParameter['EasyShipShipmentStatuses'] = easyShipShipmentStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['NextToken'] = nextToken;
            }

            if (amazonOrderIds) {
                localVarQueryParameter['AmazonOrderIds'] = amazonOrderIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersV0Api - functional programming interface
 * @export
 */
export const OrdersV0ApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrder(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns the shipping address for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderAddressResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrderAddress(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns buyer information for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo(orderId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderBuyerInfoResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrderBuyerInfo(orderId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it\'s used to retrieve the next page of order items.  Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems(orderId: string, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderItemsResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrderItems(orderId, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns buyer information in the order items of the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrderItemsBuyerInfoResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrderItemsBuyerInfo(orderId, nextToken, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {Array<string>} [orderStatuses] A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.).
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller).
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetOrdersResponse> {
            const localVarAxiosArgs = OrdersV0ApiAxiosParamCreator(configuration).getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, nextToken, amazonOrderIds, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * OrdersV0Api - factory interface
 * @export
 */
export const OrdersV0ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(orderId: string, options?: any) {
            return OrdersV0ApiFp(configuration).getOrder(orderId, options)(axios, basePath);
        },
        /**
         * Returns the shipping address for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderAddress(orderId: string, options?: any) {
            return OrdersV0ApiFp(configuration).getOrderAddress(orderId, options)(axios, basePath);
        },
        /**
         * Returns buyer information for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderBuyerInfo(orderId: string, options?: any) {
            return OrdersV0ApiFp(configuration).getOrderBuyerInfo(orderId, options)(axios, basePath);
        },
        /**
         * Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it\'s used to retrieve the next page of order items.  Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItems(orderId: string, nextToken?: string, options?: any) {
            return OrdersV0ApiFp(configuration).getOrderItems(orderId, nextToken, options)(axios, basePath);
        },
        /**
         * Returns buyer information in the order items of the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options?: any) {
            return OrdersV0ApiFp(configuration).getOrderItemsBuyerInfo(orderId, nextToken, options)(axios, basePath);
        },
        /**
         * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
         * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
         * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
         * @param {Array<string>} [orderStatuses] A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.).
         * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller).
         * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
         * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
         * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
         * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
         * @param {Array<string>} [easyShipShipmentStatuses] A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller).
         * @param {string} [nextToken] A string token returned in the response of your previous request.
         * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, options?: any) {
            return OrdersV0ApiFp(configuration).getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, nextToken, amazonOrderIds, options)(axios, basePath);
        },
    };
};

/**
 * OrdersV0Api - object-oriented interface
 * @export
 * @class OrdersV0Api
 * @extends {BaseAPI}
 */
export class OrdersV0Api extends BaseAPI {
    /**
     * Returns the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrder(orderId: string, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrder(orderId, options)(this.axios, this.basePath);
    }

    /**
     * Returns the shipping address for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrderAddress(orderId: string, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrderAddress(orderId, options)(this.axios, this.basePath);
    }

    /**
     * Returns buyer information for the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An orderId is an Amazon-defined order identifier, in 3-7-7 format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrderBuyerInfo(orderId: string, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrderBuyerInfo(orderId, options)(this.axios, this.basePath);
    }

    /**
     * Returns detailed order item information for the order indicated by the specified order ID. If NextToken is provided, it\'s used to retrieve the next page of order items.  Note: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrderItems(orderId: string, nextToken?: string, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrderItems(orderId, nextToken, options)(this.axios, this.basePath);
    }

    /**
     * Returns buyer information in the order items of the order indicated by the specified order ID.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} orderId An Amazon-defined order identifier, in 3-7-7 format.
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrderItemsBuyerInfo(orderId: string, nextToken?: string, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrderItemsBuyerInfo(orderId, nextToken, options)(this.axios, this.basePath);
    }

    /**
     * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 1 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {Array<string>} marketplaceIds A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
     * @param {string} [createdAfter] A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
     * @param {string} [createdBefore] A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
     * @param {string} [lastUpdatedAfter] A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
     * @param {string} [lastUpdatedBefore] A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
     * @param {Array<string>} [orderStatuses] A list of OrderStatus values used to filter the results. Possible values: PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.); Pending (The order has been placed but payment has not been authorized); Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped); PartiallyShipped (One or more, but not all, items in the order have been shipped); Shipped (All items in the order have been shipped); InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.); Canceled (The order has been canceled); and Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.).
     * @param {Array<string>} [fulfillmentChannels] A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: FBA (Fulfillment by Amazon); SellerFulfilled (Fulfilled by the seller).
     * @param {Array<string>} [paymentMethods] A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
     * @param {string} [buyerEmail] The email address of a buyer. Used to select orders that contain the specified email address.
     * @param {string} [sellerOrderId] An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
     * @param {number} [maxResultsPerPage] A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
     * @param {Array<string>} [easyShipShipmentStatuses] A list of EasyShipShipmentStatus values. Used to select Easy Ship orders with statuses that match the specified  values. If EasyShipShipmentStatus is specified, only Amazon Easy Ship orders are returned.Possible values: PendingPickUp (Amazon has not yet picked up the package from the seller). LabelCanceled (The seller canceled the pickup). PickedUp (Amazon has picked up the package from the seller). AtOriginFC (The packaged is at the origin fulfillment center). AtDestinationFC (The package is at the destination fulfillment center). OutForDelivery (The package is out for delivery). Damaged (The package was damaged by the carrier). Delivered (The package has been delivered to the buyer). RejectedByBuyer (The package has been rejected by the buyer). Undeliverable (The package cannot be delivered). ReturnedToSeller (The package was not delivered to the buyer and was returned to the seller). ReturningToSeller (The package was not delivered to the buyer and is being returned to the seller).
     * @param {string} [nextToken] A string token returned in the response of your previous request.
     * @param {Array<string>} [amazonOrderIds] A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersV0Api
     */
    public getOrders(marketplaceIds: Array<string>, createdAfter?: string, createdBefore?: string, lastUpdatedAfter?: string, lastUpdatedBefore?: string, orderStatuses?: Array<string>, fulfillmentChannels?: Array<string>, paymentMethods?: Array<string>, buyerEmail?: string, sellerOrderId?: string, maxResultsPerPage?: number, easyShipShipmentStatuses?: Array<string>, nextToken?: string, amazonOrderIds?: Array<string>, options?: any) {
        return OrdersV0ApiFp(this.configuration).getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, nextToken, amazonOrderIds, options)(this.axios, this.basePath);
    }

}


