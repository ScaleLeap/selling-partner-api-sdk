/* tslint:disable */
/* eslint-disable */
/**
 * The Selling Partner API for third party application integrations.
 * With the AppIntegrations API v2024-04-01, you can send notifications to Amazon Selling Partners and display the notifications in Seller Central.
 *
 * The version of the OpenAPI document: 2024-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The request for the `createNotification` operation.
 * @export
 * @interface CreateNotificationRequest
 */
export interface CreateNotificationRequest {
    /**
     * The unique identifier of the notification template you used to onboard your application.
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    templateId: string;
    /**
     * The dynamic parameters required by the notification templated specified by `templateId`.
     * @type {{ [key: string]: object; }}
     * @memberof CreateNotificationRequest
     */
    notificationParameters: { [key: string]: object; };
    /**
     * An encrypted marketplace identifier for the posted notification.
     * @type {string}
     * @memberof CreateNotificationRequest
     */
    marketplaceId?: string;
}
/**
 * The response for the `createNotification` operation.
 * @export
 * @interface CreateNotificationResponse
 */
export interface CreateNotificationResponse {
    /**
     * The unique identifier assigned to each notification.
     * @type {string}
     * @memberof CreateNotificationResponse
     */
    notificationId?: string;
}
/**
 * The request for the `deleteNotifications` operation.
 * @export
 * @interface DeleteNotificationsRequest
 */
export interface DeleteNotificationsRequest {
    /**
     * The unique identifier of the notification template you used to onboard your application.
     * @type {string}
     * @memberof DeleteNotificationsRequest
     */
    templateId: string;
    /**
     * The unique identifier that maps each notification status to a reason code.
     * @type {string}
     * @memberof DeleteNotificationsRequest
     */
    deletionReason: DeleteNotificationsRequestDeletionReasonEnum | 'INCORRECT_CONTENT' | 'INCORRECT_RECIPIENT';
}

/**
    * @export
    * @enum {string}
    */
export enum DeleteNotificationsRequestDeletionReasonEnum {
    Content = 'INCORRECT_CONTENT',
    Recipient = 'INCORRECT_RECIPIENT'
}

/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * Error response returned when the request is unsuccessful.
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * The request for the `recordActionFeedback` operation.
 * @export
 * @interface RecordActionFeedbackRequest
 */
export interface RecordActionFeedbackRequest {
    /**
     * The unique identifier for each notification status.
     * @type {string}
     * @memberof RecordActionFeedbackRequest
     */
    feedbackActionCode: RecordActionFeedbackRequestFeedbackActionCodeEnum | 'SELLER_ACTION_COMPLETED';
}

/**
    * @export
    * @enum {string}
    */
export enum RecordActionFeedbackRequestFeedbackActionCodeEnum {
    SellerActionCompleted = 'SELLER_ACTION_COMPLETED'
}


/**
 * AppIntegrationsApi - axios parameter creator
 * @export
 */
export const AppIntegrationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateNotificationRequest} body The request body for the &#x60;createNotification&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification: async (body: CreateNotificationRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createNotification', 'body', body)
            const localVarPath = `/appIntegrations/2024-04-01/notifications`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Remove your application\'s notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DeleteNotificationsRequest} body The request body for the &#x60;deleteNotifications&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotifications: async (body: DeleteNotificationsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('deleteNotifications', 'body', body)
            const localVarPath = `/appIntegrations/2024-04-01/notifications/deletion`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Records the seller\'s response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} notificationId A &#x60;notificationId&#x60; uniquely identifies a notification.
         * @param {RecordActionFeedbackRequest} body The request body for the &#x60;recordActionFeedback&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActionFeedback: async (notificationId: string, body: RecordActionFeedbackRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'notificationId' is not null or undefined
            assertParamExists('recordActionFeedback', 'notificationId', notificationId)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('recordActionFeedback', 'body', body)
            const localVarPath = `/appIntegrations/2024-04-01/notifications/{notificationId}/feedback`
                .replace(`{${"notificationId"}}`, encodeURIComponent(String(notificationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppIntegrationsApi - functional programming interface
 * @export
 */
export const AppIntegrationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppIntegrationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateNotificationRequest} body The request body for the &#x60;createNotification&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNotification(body: CreateNotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateNotificationResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNotification(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Remove your application\'s notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DeleteNotificationsRequest} body The request body for the &#x60;deleteNotifications&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNotifications(body: DeleteNotificationsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNotifications(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Records the seller\'s response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} notificationId A &#x60;notificationId&#x60; uniquely identifies a notification.
         * @param {RecordActionFeedbackRequest} body The request body for the &#x60;recordActionFeedback&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async recordActionFeedback(notificationId: string, body: RecordActionFeedbackRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.recordActionFeedback(notificationId, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AppIntegrationsApi - factory interface
 * @export
 */
export const AppIntegrationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppIntegrationsApiFp(configuration)
    return {
        /**
         * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {CreateNotificationRequest} body The request body for the &#x60;createNotification&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNotification(body: CreateNotificationRequest, options?: any): AxiosPromise<CreateNotificationResponse> {
            return localVarFp.createNotification(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Remove your application\'s notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {DeleteNotificationsRequest} body The request body for the &#x60;deleteNotifications&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNotifications(body: DeleteNotificationsRequest, options?: any): AxiosPromise<void> {
            return localVarFp.deleteNotifications(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Records the seller\'s response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} notificationId A &#x60;notificationId&#x60; uniquely identifies a notification.
         * @param {RecordActionFeedbackRequest} body The request body for the &#x60;recordActionFeedback&#x60; operation.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        recordActionFeedback(notificationId: string, body: RecordActionFeedbackRequest, options?: any): AxiosPromise<void> {
            return localVarFp.recordActionFeedback(notificationId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNotification operation in AppIntegrationsApi.
 * @export
 * @interface AppIntegrationsApiCreateNotificationRequest
 */
export interface AppIntegrationsApiCreateNotificationRequest {
    /**
     * The request body for the &#x60;createNotification&#x60; operation.
     * @type {CreateNotificationRequest}
     * @memberof AppIntegrationsApiCreateNotification
     */
    readonly body: CreateNotificationRequest
}

/**
 * Request parameters for deleteNotifications operation in AppIntegrationsApi.
 * @export
 * @interface AppIntegrationsApiDeleteNotificationsRequest
 */
export interface AppIntegrationsApiDeleteNotificationsRequest {
    /**
     * The request body for the &#x60;deleteNotifications&#x60; operation.
     * @type {DeleteNotificationsRequest}
     * @memberof AppIntegrationsApiDeleteNotifications
     */
    readonly body: DeleteNotificationsRequest
}

/**
 * Request parameters for recordActionFeedback operation in AppIntegrationsApi.
 * @export
 * @interface AppIntegrationsApiRecordActionFeedbackRequest
 */
export interface AppIntegrationsApiRecordActionFeedbackRequest {
    /**
     * A &#x60;notificationId&#x60; uniquely identifies a notification.
     * @type {string}
     * @memberof AppIntegrationsApiRecordActionFeedback
     */
    readonly notificationId: string

    /**
     * The request body for the &#x60;recordActionFeedback&#x60; operation.
     * @type {RecordActionFeedbackRequest}
     * @memberof AppIntegrationsApiRecordActionFeedback
     */
    readonly body: RecordActionFeedbackRequest
}

/**
 * AppIntegrationsApi - object-oriented interface
 * @export
 * @class AppIntegrationsApi
 * @extends {BaseAPI}
 */
export class AppIntegrationsApi extends BaseAPI {
    /**
     * Create a notification for sellers in Seller Central.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AppIntegrationsApiCreateNotificationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppIntegrationsApi
     */
    public createNotification(requestParameters: AppIntegrationsApiCreateNotificationRequest, options?: any) {
        return AppIntegrationsApiFp(this.configuration).createNotification(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Remove your application\'s notifications from the Appstore notifications dashboard.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AppIntegrationsApiDeleteNotificationsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppIntegrationsApi
     */
    public deleteNotifications(requestParameters: AppIntegrationsApiDeleteNotificationsRequest, options?: any) {
        return AppIntegrationsApiFp(this.configuration).deleteNotifications(requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Records the seller\'s response to a notification.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The preceding table indicates the default rate and burst values for this operation. Sellers whose business demands require higher throughput may have higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
     * @param {AppIntegrationsApiRecordActionFeedbackRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppIntegrationsApi
     */
    public recordActionFeedback(requestParameters: AppIntegrationsApiRecordActionFeedbackRequest, options?: any) {
        return AppIntegrationsApiFp(this.configuration).recordActionFeedback(requestParameters.notificationId, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }
}


