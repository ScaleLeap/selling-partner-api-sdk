/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Messaging
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Represents a file uploaded to a destination that was created by the createUploadDestination operation of the Uploads API.
 * @export
 * @interface Attachment
 */
export interface Attachment {
    /**
     * The identifier of the upload destination. Get this value by calling the createUploadDestination operation of the Uploads API.
     * @type {string}
     * @memberof Attachment
     */
    uploadDestinationId: string;
    /**
     * The name of the file, including the extension. This is the file name that will appear in the message. This does not need to match the file name of the file that you uploaded.
     * @type {string}
     * @memberof Attachment
     */
    fileName: string;
}
/**
 * The request schema for the createAmazonMotors operation.
 * @export
 * @interface CreateAmazonMotorsRequest
 */
export interface CreateAmazonMotorsRequest {
    /**
     * Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {Array<Attachment>}
     * @memberof CreateAmazonMotorsRequest
     */
    attachments?: Array<Attachment>;
}
/**
 * The response schema for the createAmazonMotors operation.
 * @export
 * @interface CreateAmazonMotorsResponse
 */
export interface CreateAmazonMotorsResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateAmazonMotorsResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the confirmCustomizationDetails operation.
 * @export
 * @interface CreateConfirmCustomizationDetailsRequest
 */
export interface CreateConfirmCustomizationDetailsRequest {
    /**
     * The text to be sent to the buyer. Only links related to customization details are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateConfirmCustomizationDetailsRequest
     */
    text?: string;
    /**
     * Attachments to include in the message to the buyer.
     * @type {Array<Attachment>}
     * @memberof CreateConfirmCustomizationDetailsRequest
     */
    attachments?: Array<Attachment>;
}
/**
 * The response schema for the confirmCustomizationDetails operation.
 * @export
 * @interface CreateConfirmCustomizationDetailsResponse
 */
export interface CreateConfirmCustomizationDetailsResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateConfirmCustomizationDetailsResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createConfirmDeliveryDetails operation.
 * @export
 * @interface CreateConfirmDeliveryDetailsRequest
 */
export interface CreateConfirmDeliveryDetailsRequest {
    /**
     * The text to be sent to the buyer. Only links related to order delivery are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateConfirmDeliveryDetailsRequest
     */
    text?: string;
}
/**
 * The response schema for the createConfirmDeliveryDetails operation.
 * @export
 * @interface CreateConfirmDeliveryDetailsResponse
 */
export interface CreateConfirmDeliveryDetailsResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateConfirmDeliveryDetailsResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createConfirmOrderDetails operation.
 * @export
 * @interface CreateConfirmOrderDetailsRequest
 */
export interface CreateConfirmOrderDetailsRequest {
    /**
     * The text to be sent to the buyer. Only links related to order completion are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateConfirmOrderDetailsRequest
     */
    text?: string;
}
/**
 * The response schema for the createConfirmOrderDetails operation.
 * @export
 * @interface CreateConfirmOrderDetailsResponse
 */
export interface CreateConfirmOrderDetailsResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateConfirmOrderDetailsResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createConfirmServiceDetails operation.
 * @export
 * @interface CreateConfirmServiceDetailsRequest
 */
export interface CreateConfirmServiceDetailsRequest {
    /**
     * The text to be sent to the buyer. Only links related to Home Service calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateConfirmServiceDetailsRequest
     */
    text?: string;
}
/**
 * The response schema for the createConfirmServiceDetails operation.
 * @export
 * @interface CreateConfirmServiceDetailsResponse
 */
export interface CreateConfirmServiceDetailsResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateConfirmServiceDetailsResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createDigitalAccessKey operation.
 * @export
 * @interface CreateDigitalAccessKeyRequest
 */
export interface CreateDigitalAccessKeyRequest {
    /**
     * The text to be sent to the buyer. Only links related to the digital access key are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateDigitalAccessKeyRequest
     */
    text?: string;
    /**
     * Attachments to include in the message to the buyer.
     * @type {Array<Attachment>}
     * @memberof CreateDigitalAccessKeyRequest
     */
    attachments?: Array<Attachment>;
}
/**
 * The response schema for the createDigitalAccessKey operation.
 * @export
 * @interface CreateDigitalAccessKeyResponse
 */
export interface CreateDigitalAccessKeyResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateDigitalAccessKeyResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createLegalDisclosure operation.
 * @export
 * @interface CreateLegalDisclosureRequest
 */
export interface CreateLegalDisclosureRequest {
    /**
     * Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {Array<Attachment>}
     * @memberof CreateLegalDisclosureRequest
     */
    attachments?: Array<Attachment>;
}
/**
 * The response schema for the createLegalDisclosure operation.
 * @export
 * @interface CreateLegalDisclosureResponse
 */
export interface CreateLegalDisclosureResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateLegalDisclosureResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the createNegativeFeedbackRemoval operation.
 * @export
 * @interface CreateNegativeFeedbackRemovalResponse
 */
export interface CreateNegativeFeedbackRemovalResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateNegativeFeedbackRemovalResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createUnexpectedProblem operation.
 * @export
 * @interface CreateUnexpectedProblemRequest
 */
export interface CreateUnexpectedProblemRequest {
    /**
     * The text to be sent to the buyer. Only links related to unexpected problem calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {string}
     * @memberof CreateUnexpectedProblemRequest
     */
    text?: string;
}
/**
 * The response schema for the createUnexpectedProblem operation.
 * @export
 * @interface CreateUnexpectedProblemResponse
 */
export interface CreateUnexpectedProblemResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateUnexpectedProblemResponse
     */
    errors?: Array<Error>;
}
/**
 * The request schema for the createWarranty operation.
 * @export
 * @interface CreateWarrantyRequest
 */
export interface CreateWarrantyRequest {
    /**
     * Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer\'s language of preference, which can be retrieved from the GetAttributes operation.
     * @type {Array<Attachment>}
     * @memberof CreateWarrantyRequest
     */
    attachments?: Array<Attachment>;
    /**
     * The start date of the warranty coverage to include in the message to the buyer.
     * @type {string}
     * @memberof CreateWarrantyRequest
     */
    coverageStartDate?: string;
    /**
     * The end date of the warranty coverage to include in the message to the buyer.
     * @type {string}
     * @memberof CreateWarrantyRequest
     */
    coverageEndDate?: string;
}
/**
 * The response schema for the createWarranty operation.
 * @export
 * @interface CreateWarrantyResponse
 */
export interface CreateWarrantyResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateWarrantyResponse
     */
    errors?: Array<Error>;
}
/**
 * The response schema for the GetAttributes operation.
 * @export
 * @interface GetAttributesResponse
 */
export interface GetAttributesResponse {
    /**
     * 
     * @type {GetAttributesResponseBuyer}
     * @memberof GetAttributesResponse
     */
    buyer?: GetAttributesResponseBuyer;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetAttributesResponse
     */
    errors?: Array<Error>;
}
/**
 * The list of attributes related to the buyer.
 * @export
 * @interface GetAttributesResponseBuyer
 */
export interface GetAttributesResponseBuyer {
    /**
     * The buyer\'s language of preference, indicated with a locale-specific language tag. Examples: \"en-US\", \"zh-CN\", and \"en-GB\".
     * @type {string}
     * @memberof GetAttributesResponseBuyer
     */
    locale?: string;
}
/**
 * Describes a messaging action that can be taken for an order. Provides a JSON Hypertext Application Language (HAL) link to the JSON schema document that describes the expected input.
 * @export
 * @interface GetMessagingActionResponse
 */
export interface GetMessagingActionResponse {
    /**
     * 
     * @type {GetMessagingActionResponseLinks}
     * @memberof GetMessagingActionResponse
     */
    _links?: GetMessagingActionResponseLinks;
    /**
     * 
     * @type {GetMessagingActionResponseEmbedded}
     * @memberof GetMessagingActionResponse
     */
    _embedded?: GetMessagingActionResponseEmbedded;
    /**
     * 
     * @type {MessagingAction}
     * @memberof GetMessagingActionResponse
     */
    payload?: MessagingAction;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetMessagingActionResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetMessagingActionResponseEmbedded
 */
export interface GetMessagingActionResponseEmbedded {
    /**
     * 
     * @type {GetSchemaResponse}
     * @memberof GetMessagingActionResponseEmbedded
     */
    schema?: GetSchemaResponse;
}
/**
 * 
 * @export
 * @interface GetMessagingActionResponseLinks
 */
export interface GetMessagingActionResponseLinks {
    /**
     * 
     * @type {LinkObject}
     * @memberof GetMessagingActionResponseLinks
     */
    self: LinkObject;
    /**
     * 
     * @type {LinkObject}
     * @memberof GetMessagingActionResponseLinks
     */
    schema: LinkObject;
}
/**
 * The response schema for the getMessagingActionsForOrder operation.
 * @export
 * @interface GetMessagingActionsForOrderResponse
 */
export interface GetMessagingActionsForOrderResponse {
    /**
     * 
     * @type {GetMessagingActionsForOrderResponseLinks}
     * @memberof GetMessagingActionsForOrderResponse
     */
    _links?: GetMessagingActionsForOrderResponseLinks;
    /**
     * 
     * @type {GetMessagingActionsForOrderResponseEmbedded}
     * @memberof GetMessagingActionsForOrderResponse
     */
    _embedded?: GetMessagingActionsForOrderResponseEmbedded;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetMessagingActionsForOrderResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetMessagingActionsForOrderResponseEmbedded
 */
export interface GetMessagingActionsForOrderResponseEmbedded {
    /**
     * 
     * @type {Array<GetMessagingActionResponse>}
     * @memberof GetMessagingActionsForOrderResponseEmbedded
     */
    actions: Array<GetMessagingActionResponse>;
}
/**
 * 
 * @export
 * @interface GetMessagingActionsForOrderResponseLinks
 */
export interface GetMessagingActionsForOrderResponseLinks {
    /**
     * 
     * @type {LinkObject}
     * @memberof GetMessagingActionsForOrderResponseLinks
     */
    self: LinkObject;
    /**
     * Eligible actions for the specified amazonOrderId.
     * @type {Array<LinkObject>}
     * @memberof GetMessagingActionsForOrderResponseLinks
     */
    actions: Array<LinkObject>;
}
/**
 * 
 * @export
 * @interface GetSchemaResponse
 */
export interface GetSchemaResponse {
    /**
     * 
     * @type {GetSchemaResponseLinks}
     * @memberof GetSchemaResponse
     */
    _links?: GetSchemaResponseLinks;
    /**
     * A JSON schema document describing the expected payload of the action. This object can be validated against <a href=http://json-schema.org/draft-04/schema>http://json-schema.org/draft-04/schema</a>.
     * @type {object}
     * @memberof GetSchemaResponse
     */
    payload?: object;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetSchemaResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface GetSchemaResponseLinks
 */
export interface GetSchemaResponseLinks {
    /**
     * 
     * @type {LinkObject}
     * @memberof GetSchemaResponseLinks
     */
    self: LinkObject;
}
/**
 * A Link object.
 * @export
 * @interface LinkObject
 */
export interface LinkObject {
    /**
     * A URI for this object.
     * @type {string}
     * @memberof LinkObject
     */
    href: string;
    /**
     * An identifier for this object.
     * @type {string}
     * @memberof LinkObject
     */
    name?: string;
}
/**
 * A simple object containing the name of the template.
 * @export
 * @interface MessagingAction
 */
export interface MessagingAction {
    /**
     * 
     * @type {string}
     * @memberof MessagingAction
     */
    name: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}

/**
 * MessagingApi - axios parameter creator
 * @export
 */
export const MessagingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmCustomizationDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCustomizationDetails: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmCustomizationDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('confirmCustomizationDetails', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('confirmCustomizationDetails', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('confirmCustomizationDetails', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateAmazonMotorsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmazonMotors: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateAmazonMotorsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createAmazonMotors', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createAmazonMotors', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createAmazonMotors', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmDeliveryDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmDeliveryDetails: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmDeliveryDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createConfirmDeliveryDetails', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createConfirmDeliveryDetails', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createConfirmDeliveryDetails', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmOrderDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmOrderDetails: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmOrderDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createConfirmOrderDetails', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createConfirmOrderDetails', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createConfirmOrderDetails', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmServiceDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmServiceDetails: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmServiceDetailsRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createConfirmServiceDetails', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createConfirmServiceDetails', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createConfirmServiceDetails', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateDigitalAccessKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDigitalAccessKey: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateDigitalAccessKeyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createDigitalAccessKey', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createDigitalAccessKey', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createDigitalAccessKey', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateLegalDisclosureRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLegalDisclosure: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateLegalDisclosureRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createLegalDisclosure', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createLegalDisclosure', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createLegalDisclosure', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer\'s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeFeedbackRemoval: async (amazonOrderId: string, marketplaceIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createNegativeFeedbackRemoval', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createNegativeFeedbackRemoval', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateUnexpectedProblemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnexpectedProblem: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateUnexpectedProblemRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createUnexpectedProblem', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createUnexpectedProblem', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createUnexpectedProblem', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateWarrantyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarranty: async (amazonOrderId: string, marketplaceIds: Array<string>, body: CreateWarrantyRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('createWarranty', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('createWarranty', 'marketplaceIds', marketplaceIds)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createWarranty', 'body', body)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/messages/warranty`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes: async (amazonOrderId: string, marketplaceIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('getAttributes', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getAttributes', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}/attributes`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagingActionsForOrder: async (amazonOrderId: string, marketplaceIds: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'amazonOrderId' is not null or undefined
            assertParamExists('getMessagingActionsForOrder', 'amazonOrderId', amazonOrderId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getMessagingActionsForOrder', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/messaging/v1/orders/{amazonOrderId}`
                .replace(`{${"amazonOrderId"}}`, encodeURIComponent(String(amazonOrderId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagingApi - functional programming interface
 * @export
 */
export const MessagingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MessagingApiAxiosParamCreator(configuration)
    return {
        /**
         * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmCustomizationDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmCustomizationDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmCustomizationDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConfirmCustomizationDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmCustomizationDetails(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateAmazonMotorsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAmazonMotors(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateAmazonMotorsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAmazonMotorsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAmazonMotors(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmDeliveryDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfirmDeliveryDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmDeliveryDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConfirmDeliveryDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfirmDeliveryDetails(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmOrderDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfirmOrderDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmOrderDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConfirmOrderDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfirmOrderDetails(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmServiceDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createConfirmServiceDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmServiceDetailsRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateConfirmServiceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createConfirmServiceDetails(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateDigitalAccessKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createDigitalAccessKey(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateDigitalAccessKeyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateDigitalAccessKeyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createDigitalAccessKey(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateLegalDisclosureRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createLegalDisclosure(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateLegalDisclosureRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateLegalDisclosureResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createLegalDisclosure(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer\'s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNegativeFeedbackRemoval(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateNegativeFeedbackRemovalResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNegativeFeedbackRemoval(amazonOrderId, marketplaceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateUnexpectedProblemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUnexpectedProblem(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateUnexpectedProblemRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateUnexpectedProblemResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUnexpectedProblem(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateWarrantyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWarranty(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateWarrantyRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWarrantyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWarranty(amazonOrderId, marketplaceIds, body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAttributes(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetAttributesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAttributes(amazonOrderId, marketplaceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMessagingActionsForOrder(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetMessagingActionsForOrderResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMessagingActionsForOrder(amazonOrderId, marketplaceIds, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MessagingApi - factory interface
 * @export
 */
export const MessagingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MessagingApiFp(configuration)
    return {
        /**
         * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmCustomizationDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmCustomizationDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmCustomizationDetailsRequest, options?: any): AxiosPromise<CreateConfirmCustomizationDetailsResponse> {
            return localVarFp.confirmCustomizationDetails(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateAmazonMotorsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAmazonMotors(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateAmazonMotorsRequest, options?: any): AxiosPromise<CreateAmazonMotorsResponse> {
            return localVarFp.createAmazonMotors(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmDeliveryDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmDeliveryDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmDeliveryDetailsRequest, options?: any): AxiosPromise<CreateConfirmDeliveryDetailsResponse> {
            return localVarFp.createConfirmDeliveryDetails(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmOrderDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmOrderDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmOrderDetailsRequest, options?: any): AxiosPromise<CreateConfirmOrderDetailsResponse> {
            return localVarFp.createConfirmOrderDetails(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateConfirmServiceDetailsRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createConfirmServiceDetails(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateConfirmServiceDetailsRequest, options?: any): AxiosPromise<CreateConfirmServiceDetailsResponse> {
            return localVarFp.createConfirmServiceDetails(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateDigitalAccessKeyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createDigitalAccessKey(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateDigitalAccessKeyRequest, options?: any): AxiosPromise<CreateDigitalAccessKeyResponse> {
            return localVarFp.createDigitalAccessKey(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateLegalDisclosureRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createLegalDisclosure(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateLegalDisclosureRequest, options?: any): AxiosPromise<CreateLegalDisclosureResponse> {
            return localVarFp.createLegalDisclosure(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer\'s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNegativeFeedbackRemoval(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): AxiosPromise<CreateNegativeFeedbackRemovalResponse> {
            return localVarFp.createNegativeFeedbackRemoval(amazonOrderId, marketplaceIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateUnexpectedProblemRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUnexpectedProblem(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateUnexpectedProblemRequest, options?: any): AxiosPromise<CreateUnexpectedProblemResponse> {
            return localVarFp.createUnexpectedProblem(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {CreateWarrantyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWarranty(amazonOrderId: string, marketplaceIds: Array<string>, body: CreateWarrantyRequest, options?: any): AxiosPromise<CreateWarrantyResponse> {
            return localVarFp.createWarranty(amazonOrderId, marketplaceIds, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which a message is sent.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAttributes(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): AxiosPromise<GetAttributesResponse> {
            return localVarFp.getAttributes(amazonOrderId, marketplaceIds, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} amazonOrderId An Amazon order identifier. This specifies the order for which you want a list of available message types.
         * @param {Array<string>} marketplaceIds A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMessagingActionsForOrder(amazonOrderId: string, marketplaceIds: Array<string>, options?: any): AxiosPromise<GetMessagingActionsForOrderResponse> {
            return localVarFp.getMessagingActionsForOrder(amazonOrderId, marketplaceIds, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for confirmCustomizationDetails operation in MessagingApi.
 * @export
 * @interface MessagingApiConfirmCustomizationDetailsRequest
 */
export interface MessagingApiConfirmCustomizationDetailsRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiConfirmCustomizationDetails
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiConfirmCustomizationDetails
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateConfirmCustomizationDetailsRequest}
     * @memberof MessagingApiConfirmCustomizationDetails
     */
    readonly body: CreateConfirmCustomizationDetailsRequest
}

/**
 * Request parameters for createAmazonMotors operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateAmazonMotorsRequest
 */
export interface MessagingApiCreateAmazonMotorsRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateAmazonMotors
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateAmazonMotors
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateAmazonMotorsRequest}
     * @memberof MessagingApiCreateAmazonMotors
     */
    readonly body: CreateAmazonMotorsRequest
}

/**
 * Request parameters for createConfirmDeliveryDetails operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateConfirmDeliveryDetailsRequest
 */
export interface MessagingApiCreateConfirmDeliveryDetailsRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateConfirmDeliveryDetails
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateConfirmDeliveryDetails
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateConfirmDeliveryDetailsRequest}
     * @memberof MessagingApiCreateConfirmDeliveryDetails
     */
    readonly body: CreateConfirmDeliveryDetailsRequest
}

/**
 * Request parameters for createConfirmOrderDetails operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateConfirmOrderDetailsRequest
 */
export interface MessagingApiCreateConfirmOrderDetailsRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateConfirmOrderDetails
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateConfirmOrderDetails
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateConfirmOrderDetailsRequest}
     * @memberof MessagingApiCreateConfirmOrderDetails
     */
    readonly body: CreateConfirmOrderDetailsRequest
}

/**
 * Request parameters for createConfirmServiceDetails operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateConfirmServiceDetailsRequest
 */
export interface MessagingApiCreateConfirmServiceDetailsRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateConfirmServiceDetails
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateConfirmServiceDetails
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateConfirmServiceDetailsRequest}
     * @memberof MessagingApiCreateConfirmServiceDetails
     */
    readonly body: CreateConfirmServiceDetailsRequest
}

/**
 * Request parameters for createDigitalAccessKey operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateDigitalAccessKeyRequest
 */
export interface MessagingApiCreateDigitalAccessKeyRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateDigitalAccessKey
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateDigitalAccessKey
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateDigitalAccessKeyRequest}
     * @memberof MessagingApiCreateDigitalAccessKey
     */
    readonly body: CreateDigitalAccessKeyRequest
}

/**
 * Request parameters for createLegalDisclosure operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateLegalDisclosureRequest
 */
export interface MessagingApiCreateLegalDisclosureRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateLegalDisclosure
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateLegalDisclosure
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateLegalDisclosureRequest}
     * @memberof MessagingApiCreateLegalDisclosure
     */
    readonly body: CreateLegalDisclosureRequest
}

/**
 * Request parameters for createNegativeFeedbackRemoval operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateNegativeFeedbackRemovalRequest
 */
export interface MessagingApiCreateNegativeFeedbackRemovalRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateNegativeFeedbackRemoval
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateNegativeFeedbackRemoval
     */
    readonly marketplaceIds: Array<string>
}

/**
 * Request parameters for createUnexpectedProblem operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateUnexpectedProblemRequest
 */
export interface MessagingApiCreateUnexpectedProblemRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateUnexpectedProblem
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateUnexpectedProblem
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateUnexpectedProblemRequest}
     * @memberof MessagingApiCreateUnexpectedProblem
     */
    readonly body: CreateUnexpectedProblemRequest
}

/**
 * Request parameters for createWarranty operation in MessagingApi.
 * @export
 * @interface MessagingApiCreateWarrantyRequest
 */
export interface MessagingApiCreateWarrantyRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiCreateWarranty
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiCreateWarranty
     */
    readonly marketplaceIds: Array<string>

    /**
     * 
     * @type {CreateWarrantyRequest}
     * @memberof MessagingApiCreateWarranty
     */
    readonly body: CreateWarrantyRequest
}

/**
 * Request parameters for getAttributes operation in MessagingApi.
 * @export
 * @interface MessagingApiGetAttributesRequest
 */
export interface MessagingApiGetAttributesRequest {
    /**
     * An Amazon order identifier. This specifies the order for which a message is sent.
     * @type {string}
     * @memberof MessagingApiGetAttributes
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiGetAttributes
     */
    readonly marketplaceIds: Array<string>
}

/**
 * Request parameters for getMessagingActionsForOrder operation in MessagingApi.
 * @export
 * @interface MessagingApiGetMessagingActionsForOrderRequest
 */
export interface MessagingApiGetMessagingActionsForOrderRequest {
    /**
     * An Amazon order identifier. This specifies the order for which you want a list of available message types.
     * @type {string}
     * @memberof MessagingApiGetMessagingActionsForOrder
     */
    readonly amazonOrderId: string

    /**
     * A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
     * @type {Array<string>}
     * @memberof MessagingApiGetMessagingActionsForOrder
     */
    readonly marketplaceIds: Array<string>
}

/**
 * MessagingApi - object-oriented interface
 * @export
 * @class MessagingApi
 * @extends {BaseAPI}
 */
export class MessagingApi extends BaseAPI {
    /**
     * Sends a message asking a buyer to provide or verify customization details such as name spelling, images, initials, etc.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiConfirmCustomizationDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public confirmCustomizationDetails(requestParameters: MessagingApiConfirmCustomizationDetailsRequest, options?: any) {
        return MessagingApiFp(this.configuration).confirmCustomizationDetails(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a buyer to provide details about an Amazon Motors order. This message can only be sent by Amazon Motors sellers.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateAmazonMotorsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createAmazonMotors(requestParameters: MessagingApiCreateAmazonMotorsRequest, options?: any) {
        return MessagingApiFp(this.configuration).createAmazonMotors(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a buyer to arrange a delivery or to confirm contact information for making a delivery.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateConfirmDeliveryDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createConfirmDeliveryDetails(requestParameters: MessagingApiCreateConfirmDeliveryDetailsRequest, options?: any) {
        return MessagingApiFp(this.configuration).createConfirmDeliveryDetails(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to ask a buyer an order-related question prior to shipping their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateConfirmOrderDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createConfirmOrderDetails(requestParameters: MessagingApiCreateConfirmOrderDetailsRequest, options?: any) {
        return MessagingApiFp(this.configuration).createConfirmOrderDetails(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to contact a Home Service customer to arrange a service call or to gather information prior to a service call.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateConfirmServiceDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createConfirmServiceDetails(requestParameters: MessagingApiCreateConfirmServiceDetailsRequest, options?: any) {
        return MessagingApiFp(this.configuration).createConfirmServiceDetails(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a buyer to share a digital access key needed to utilize digital content in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateDigitalAccessKeyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createDigitalAccessKey(requestParameters: MessagingApiCreateDigitalAccessKeyRequest, options?: any) {
        return MessagingApiFp(this.configuration).createDigitalAccessKey(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a critical message that contains documents that a seller is legally obligated to provide to the buyer. This message should only be used to deliver documents that are required by law.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateLegalDisclosureRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createLegalDisclosure(requestParameters: MessagingApiCreateLegalDisclosureRequest, options?: any) {
        return MessagingApiFp(this.configuration).createLegalDisclosure(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a non-critical message that asks a buyer to remove their negative feedback. This message should only be sent after the seller has resolved the buyer\'s problem.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateNegativeFeedbackRemovalRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createNegativeFeedbackRemoval(requestParameters: MessagingApiCreateNegativeFeedbackRemovalRequest, options?: any) {
        return MessagingApiFp(this.configuration).createNegativeFeedbackRemoval(requestParameters.amazonOrderId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a critical message to a buyer that an unexpected problem was encountered affecting the completion of the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateUnexpectedProblemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createUnexpectedProblem(requestParameters: MessagingApiCreateUnexpectedProblemRequest, options?: any) {
        return MessagingApiFp(this.configuration).createUnexpectedProblem(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a buyer to provide details about warranty information on a purchase in their order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiCreateWarrantyRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public createWarranty(requestParameters: MessagingApiCreateWarrantyRequest, options?: any) {
        return MessagingApiFp(this.configuration).createWarranty(requestParameters.amazonOrderId, requestParameters.marketplaceIds, requestParameters.body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a response containing attributes related to an order. This includes buyer preferences.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
     * @param {MessagingApiGetAttributesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public getAttributes(requestParameters: MessagingApiGetAttributesRequest, options?: any) {
        return MessagingApiFp(this.configuration).getAttributes(requestParameters.amazonOrderId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of message types that are available for an order that you specify. A message type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a message.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {MessagingApiGetMessagingActionsForOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagingApi
     */
    public getMessagingActionsForOrder(requestParameters: MessagingApiGetMessagingActionsForOrderRequest, options?: any) {
        return MessagingApiFp(this.configuration).getMessagingActionsForOrder(requestParameters.amazonOrderId, requestParameters.marketplaceIds, options).then((request) => request(this.axios, this.basePath));
    }
}


