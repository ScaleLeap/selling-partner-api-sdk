/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Listings Restrictions
 * The Selling Partner API for Listings Restrictions provides programmatic access to restrictions on Amazon catalog listings.  For more information, see the [Listings Restrictions API Use Case Guide](doc:listings-restrictions-api-v2021-08-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2021-08-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * A link to resources related to a listing restriction.
 * @export
 * @interface Link
 */
export interface Link {
    /**
     * The URI of the related resource.
     * @type {string}
     * @memberof Link
     */
    resource: string;
    /**
     * The HTTP verb used to interact with the related resource.
     * @type {string}
     * @memberof Link
     */
    verb: LinkVerbEnum;
    /**
     * The title of the related resource.
     * @type {string}
     * @memberof Link
     */
    title?: string;
    /**
     * The media type of the related resource.
     * @type {string}
     * @memberof Link
     */
    type?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum LinkVerbEnum {
    Get = 'GET'
}

/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * A reason for the restriction, including path forward links that may allow Selling Partners to remove the restriction, if available.
 * @export
 * @interface Reason
 */
export interface Reason {
    /**
     * A message describing the reason for the restriction.
     * @type {string}
     * @memberof Reason
     */
    message: string;
    /**
     * A code indicating why the listing is restricted.
     * @type {string}
     * @memberof Reason
     */
    reasonCode?: ReasonReasonCodeEnum;
    /**
     * A list of path forward links that may allow Selling Partners to remove the restriction.
     * @type {Array<Link>}
     * @memberof Reason
     */
    links?: Array<Link>;
}

/**
    * @export
    * @enum {string}
    */
export enum ReasonReasonCodeEnum {
    ApprovalRequired = 'APPROVAL_REQUIRED',
    AsinNotFound = 'ASIN_NOT_FOUND',
    NotEligible = 'NOT_ELIGIBLE'
}

/**
 * A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction.
 * @export
 * @interface Restriction
 */
export interface Restriction {
    /**
     * A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.
     * @type {string}
     * @memberof Restriction
     */
    marketplaceId: string;
    /**
     * The condition that applies to the restriction.
     * @type {string}
     * @memberof Restriction
     */
    conditionType?: RestrictionConditionTypeEnum;
    /**
     * A list of reasons for the restriction.
     * @type {Array<Reason>}
     * @memberof Restriction
     */
    reasons?: Array<Reason>;
}

/**
    * @export
    * @enum {string}
    */
export enum RestrictionConditionTypeEnum {
    NewNew = 'new_new',
    NewOpenBox = 'new_open_box',
    NewOem = 'new_oem',
    RefurbishedRefurbished = 'refurbished_refurbished',
    UsedLikeNew = 'used_like_new',
    UsedVeryGood = 'used_very_good',
    UsedGood = 'used_good',
    UsedAcceptable = 'used_acceptable',
    CollectibleLikeNew = 'collectible_like_new',
    CollectibleVeryGood = 'collectible_very_good',
    CollectibleGood = 'collectible_good',
    CollectibleAcceptable = 'collectible_acceptable',
    ClubClub = 'club_club'
}

/**
 * A list of restrictions for the specified Amazon catalog item.
 * @export
 * @interface RestrictionList
 */
export interface RestrictionList {
    /**
     * 
     * @type {Array<Restriction>}
     * @memberof RestrictionList
     */
    restrictions: Array<Restriction>;
}

/**
 * ListingsApi - axios parameter creator
 * @export
 */
export const ListingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} sellerId A selling partner identifier, such as a merchant account.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club'} [conditionType] The condition used to filter restrictions.
         * @param {string} [reasonLocale] A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsRestrictions: async (asin: string, sellerId: string, marketplaceIds: Array<string>, conditionType?: 'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club', reasonLocale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getListingsRestrictions', 'asin', asin)
            // verify required parameter 'sellerId' is not null or undefined
            assertParamExists('getListingsRestrictions', 'sellerId', sellerId)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getListingsRestrictions', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/listings/2021-08-01/restrictions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (asin !== undefined) {
                localVarQueryParameter['asin'] = asin;
            }

            if (conditionType !== undefined) {
                localVarQueryParameter['conditionType'] = conditionType;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['sellerId'] = sellerId;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (reasonLocale !== undefined) {
                localVarQueryParameter['reasonLocale'] = reasonLocale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListingsApi - functional programming interface
 * @export
 */
export const ListingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListingsApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} sellerId A selling partner identifier, such as a merchant account.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club'} [conditionType] The condition used to filter restrictions.
         * @param {string} [reasonLocale] A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getListingsRestrictions(asin: string, sellerId: string, marketplaceIds: Array<string>, conditionType?: 'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club', reasonLocale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RestrictionList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getListingsRestrictions(asin, sellerId, marketplaceIds, conditionType, reasonLocale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ListingsApi - factory interface
 * @export
 */
export const ListingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListingsApiFp(configuration)
    return {
        /**
         * Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {string} sellerId A selling partner identifier, such as a merchant account.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club'} [conditionType] The condition used to filter restrictions.
         * @param {string} [reasonLocale] A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getListingsRestrictions(asin: string, sellerId: string, marketplaceIds: Array<string>, conditionType?: 'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club', reasonLocale?: string, options?: any): AxiosPromise<RestrictionList> {
            return localVarFp.getListingsRestrictions(asin, sellerId, marketplaceIds, conditionType, reasonLocale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getListingsRestrictions operation in ListingsApi.
 * @export
 * @interface ListingsApiGetListingsRestrictionsRequest
 */
export interface ListingsApiGetListingsRestrictionsRequest {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof ListingsApiGetListingsRestrictions
     */
    readonly asin: string

    /**
     * A selling partner identifier, such as a merchant account.
     * @type {string}
     * @memberof ListingsApiGetListingsRestrictions
     */
    readonly sellerId: string

    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof ListingsApiGetListingsRestrictions
     */
    readonly marketplaceIds: Array<string>

    /**
     * The condition used to filter restrictions.
     * @type {'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club'}
     * @memberof ListingsApiGetListingsRestrictions
     */
    readonly conditionType?: 'new_new' | 'new_open_box' | 'new_oem' | 'refurbished_refurbished' | 'used_like_new' | 'used_very_good' | 'used_good' | 'used_acceptable' | 'collectible_like_new' | 'collectible_very_good' | 'collectible_good' | 'collectible_acceptable' | 'club_club'

    /**
     * A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: \&quot;en_US\&quot;, \&quot;fr_CA\&quot;, \&quot;fr_FR\&quot;. Localized messages default to \&quot;en_US\&quot; when a localization is not available in the specified locale.
     * @type {string}
     * @memberof ListingsApiGetListingsRestrictions
     */
    readonly reasonLocale?: string
}

/**
 * ListingsApi - object-oriented interface
 * @export
 * @class ListingsApi
 * @extends {BaseAPI}
 */
export class ListingsApi extends BaseAPI {
    /**
     * Returns listing restrictions for an item in the Amazon Catalog.   **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 10 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {ListingsApiGetListingsRestrictionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListingsApi
     */
    public getListingsRestrictions(requestParameters: ListingsApiGetListingsRestrictionsRequest, options?: any) {
        return ListingsApiFp(this.configuration).getListingsRestrictions(requestParameters.asin, requestParameters.sellerId, requestParameters.marketplaceIds, requestParameters.conditionType, requestParameters.reasonLocale, options).then((request) => request(this.axios, this.basePath));
    }
}


