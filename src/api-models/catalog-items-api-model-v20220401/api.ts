/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Catalog Items
 * The Selling Partner API for Catalog Items provides programmatic access to information about items in the Amazon catalog.  For more information, refer to the [Catalog Items API Use Case Guide](doc:catalog-items-api-v2022-04-01-use-case-guide).
 *
 * The version of the OpenAPI document: 2022-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Description of a brand that can be used to get more fine-grained search results.
 * @export
 * @interface BrandRefinement
 */
export interface BrandRefinement {
    /**
     * The estimated number of results that would still be returned if refinement key applied.
     * @type {number}
     * @memberof BrandRefinement
     */
    numberOfResults: number;
    /**
     * Brand name. For display and can be used as a search refinement.
     * @type {string}
     * @memberof BrandRefinement
     */
    brandName: string;
}
/**
 * Description of a classification that can be used to get more fine-grained search results.
 * @export
 * @interface ClassificationRefinement
 */
export interface ClassificationRefinement {
    /**
     * The estimated number of results that would still be returned if refinement key applied.
     * @type {number}
     * @memberof ClassificationRefinement
     */
    numberOfResults: number;
    /**
     * Display name for the classification.
     * @type {string}
     * @memberof ClassificationRefinement
     */
    displayName: string;
    /**
     * Identifier for the classification that can be used for search refinement purposes.
     * @type {string}
     * @memberof ClassificationRefinement
     */
    classificationId: string;
}
/**
 * Individual dimension value of an Amazon catalog item or item package.
 * @export
 * @interface Dimension
 */
export interface Dimension {
    /**
     * Measurement unit of the dimension value.
     * @type {string}
     * @memberof Dimension
     */
    unit?: string;
    /**
     * Numeric dimension value.
     * @type {number}
     * @memberof Dimension
     */
    value?: number;
}
/**
 * Dimensions of an Amazon catalog item or item in its packaging.
 * @export
 * @interface Dimensions
 */
export interface Dimensions {
    /**
     * 
     * @type {Dimension}
     * @memberof Dimensions
     */
    height?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Dimensions
     */
    length?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Dimensions
     */
    weight?: Dimension;
    /**
     * 
     * @type {Dimension}
     * @memberof Dimensions
     */
    width?: Dimension;
}
/**
 * A list of error responses returned when a request is unsuccessful.
 * @export
 * @interface ErrorList
 */
export interface ErrorList {
    /**
     * 
     * @type {Array<Error>}
     * @memberof ErrorList
     */
    errors: Array<Error>;
}
/**
 * An item in the Amazon catalog.
 * @export
 * @interface Item
 */
export interface Item {
    /**
     * Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog.
     * @type {string}
     * @memberof Item
     */
    asin: string;
    /**
     * A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes conform to the related product type definitions available in the Selling Partner API for Product Type Definitions.
     * @type {object}
     * @memberof Item
     */
    attributes?: object;
    /**
     * Array of dimensions associated with the item in the Amazon catalog by Amazon marketplace.
     * @type {Array<ItemDimensionsByMarketplace>}
     * @memberof Item
     */
    dimensions?: Array<ItemDimensionsByMarketplace>;
    /**
     * Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers.
     * @type {Array<ItemIdentifiersByMarketplace>}
     * @memberof Item
     */
    identifiers?: Array<ItemIdentifiersByMarketplace>;
    /**
     * Images for an item in the Amazon catalog.
     * @type {Array<ItemImagesByMarketplace>}
     * @memberof Item
     */
    images?: Array<ItemImagesByMarketplace>;
    /**
     * Product types associated with the Amazon catalog item.
     * @type {Array<ItemProductTypeByMarketplace>}
     * @memberof Item
     */
    productTypes?: Array<ItemProductTypeByMarketplace>;
    /**
     * Relationships by marketplace for an Amazon catalog item (for example, variations).
     * @type {Array<ItemRelationshipsByMarketplace>}
     * @memberof Item
     */
    relationships?: Array<ItemRelationshipsByMarketplace>;
    /**
     * Sales ranks of an Amazon catalog item.
     * @type {Array<ItemSalesRanksByMarketplace>}
     * @memberof Item
     */
    salesRanks?: Array<ItemSalesRanksByMarketplace>;
    /**
     * Summary details of an Amazon catalog item.
     * @type {Array<ItemSummaryByMarketplace>}
     * @memberof Item
     */
    summaries?: Array<ItemSummaryByMarketplace>;
    /**
     * Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only.
     * @type {Array<ItemVendorDetailsByMarketplace>}
     * @memberof Item
     */
    vendorDetails?: Array<ItemVendorDetailsByMarketplace>;
}
/**
 * Classification (browse node) associated with an Amazon catalog item.
 * @export
 * @interface ItemBrowseClassification
 */
export interface ItemBrowseClassification {
    /**
     * Display name for the classification.
     * @type {string}
     * @memberof ItemBrowseClassification
     */
    displayName: string;
    /**
     * Identifier of the classification (browse node identifier).
     * @type {string}
     * @memberof ItemBrowseClassification
     */
    classificationId: string;
}
/**
 * Sales rank of an Amazon catalog item by classification.
 * @export
 * @interface ItemClassificationSalesRank
 */
export interface ItemClassificationSalesRank {
    /**
     * Identifier of the classification associated with the sales rank.
     * @type {string}
     * @memberof ItemClassificationSalesRank
     */
    classificationId: string;
    /**
     * Title, or name, of the sales rank.
     * @type {string}
     * @memberof ItemClassificationSalesRank
     */
    title: string;
    /**
     * Corresponding Amazon retail website link, or URL, for the sales rank.
     * @type {string}
     * @memberof ItemClassificationSalesRank
     */
    link?: string;
    /**
     * Sales rank value.
     * @type {number}
     * @memberof ItemClassificationSalesRank
     */
    rank: number;
}
/**
 * Individual contributor to the creation of an item, such as an author or actor.
 * @export
 * @interface ItemContributor
 */
export interface ItemContributor {
    /**
     * 
     * @type {ItemContributorRole}
     * @memberof ItemContributor
     */
    role: ItemContributorRole;
    /**
     * Name of the contributor, such as Jane Austen.
     * @type {string}
     * @memberof ItemContributor
     */
    value: string;
}
/**
 * Role of an individual contributor in the creation of an item, such as author or actor.
 * @export
 * @interface ItemContributorRole
 */
export interface ItemContributorRole {
    /**
     * Display name of the role in the requested locale, such as Author or Actor.
     * @type {string}
     * @memberof ItemContributorRole
     */
    displayName?: string;
    /**
     * Role value for the Amazon catalog item, such as author or actor.
     * @type {string}
     * @memberof ItemContributorRole
     */
    value: string;
}
/**
 * Dimensions associated with the item in the Amazon catalog for the indicated Amazon marketplace.
 * @export
 * @interface ItemDimensionsByMarketplace
 */
export interface ItemDimensionsByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemDimensionsByMarketplace
     */
    marketplaceId: string;
    /**
     * 
     * @type {Dimensions}
     * @memberof ItemDimensionsByMarketplace
     */
    item?: Dimensions;
    /**
     * 
     * @type {Dimensions}
     * @memberof ItemDimensionsByMarketplace
     */
    _package?: Dimensions;
}
/**
 * Sales rank of an Amazon catalog item by website display group.
 * @export
 * @interface ItemDisplayGroupSalesRank
 */
export interface ItemDisplayGroupSalesRank {
    /**
     * Name of the website display group associated with the sales rank
     * @type {string}
     * @memberof ItemDisplayGroupSalesRank
     */
    websiteDisplayGroup: string;
    /**
     * Title, or name, of the sales rank.
     * @type {string}
     * @memberof ItemDisplayGroupSalesRank
     */
    title: string;
    /**
     * Corresponding Amazon retail website link, or URL, for the sales rank.
     * @type {string}
     * @memberof ItemDisplayGroupSalesRank
     */
    link?: string;
    /**
     * Sales rank value.
     * @type {number}
     * @memberof ItemDisplayGroupSalesRank
     */
    rank: number;
}
/**
 * Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.
 * @export
 * @interface ItemIdentifier
 */
export interface ItemIdentifier {
    /**
     * Type of identifier, such as UPC, EAN, or ISBN.
     * @type {string}
     * @memberof ItemIdentifier
     */
    identifierType: string;
    /**
     * Identifier.
     * @type {string}
     * @memberof ItemIdentifier
     */
    identifier: string;
}
/**
 * Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
 * @export
 * @interface ItemIdentifiersByMarketplace
 */
export interface ItemIdentifiersByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemIdentifiersByMarketplace
     */
    marketplaceId: string;
    /**
     * Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace.
     * @type {Array<ItemIdentifier>}
     * @memberof ItemIdentifiersByMarketplace
     */
    identifiers: Array<ItemIdentifier>;
}
/**
 * Image for an item in the Amazon catalog.
 * @export
 * @interface ItemImage
 */
export interface ItemImage {
    /**
     * Variant of the image, such as `MAIN` or `PT01`.
     * @type {string}
     * @memberof ItemImage
     */
    variant: ItemImageVariantEnum | 'MAIN' | 'PT01' | 'PT02' | 'PT03' | 'PT04' | 'PT05' | 'PT06' | 'PT07' | 'PT08' | 'SWCH';
    /**
     * Link, or URL, for the image.
     * @type {string}
     * @memberof ItemImage
     */
    link: string;
    /**
     * Height of the image in pixels.
     * @type {number}
     * @memberof ItemImage
     */
    height: number;
    /**
     * Width of the image in pixels.
     * @type {number}
     * @memberof ItemImage
     */
    width: number;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemImageVariantEnum {
    Main = 'MAIN',
    Pt01 = 'PT01',
    Pt02 = 'PT02',
    Pt03 = 'PT03',
    Pt04 = 'PT04',
    Pt05 = 'PT05',
    Pt06 = 'PT06',
    Pt07 = 'PT07',
    Pt08 = 'PT08',
    Swch = 'SWCH'
}

/**
 * Images for an item in the Amazon catalog for the indicated Amazon marketplace.
 * @export
 * @interface ItemImagesByMarketplace
 */
export interface ItemImagesByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemImagesByMarketplace
     */
    marketplaceId: string;
    /**
     * Images for an item in the Amazon catalog for the indicated Amazon marketplace.
     * @type {Array<ItemImage>}
     * @memberof ItemImagesByMarketplace
     */
    images: Array<ItemImage>;
}
/**
 * Product type associated with the Amazon catalog item for the indicated Amazon marketplace.
 * @export
 * @interface ItemProductTypeByMarketplace
 */
export interface ItemProductTypeByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemProductTypeByMarketplace
     */
    marketplaceId?: string;
    /**
     * Name of the product type associated with the Amazon catalog item.
     * @type {string}
     * @memberof ItemProductTypeByMarketplace
     */
    productType?: string;
}
/**
 * Relationship details for an Amazon catalog item.
 * @export
 * @interface ItemRelationship
 */
export interface ItemRelationship {
    /**
     * Identifiers (ASINs) of the related items that are children of this item.
     * @type {Array<string>}
     * @memberof ItemRelationship
     */
    childAsins?: Array<string>;
    /**
     * Identifiers (ASINs) of the related items that are parents of this item.
     * @type {Array<string>}
     * @memberof ItemRelationship
     */
    parentAsins?: Array<string>;
    /**
     * 
     * @type {ItemVariationTheme}
     * @memberof ItemRelationship
     */
    variationTheme?: ItemVariationTheme;
    /**
     * Type of relationship.
     * @type {string}
     * @memberof ItemRelationship
     */
    type: ItemRelationshipTypeEnum | 'VARIATION' | 'PACKAGE_HIERARCHY';
}

/**
    * @export
    * @enum {string}
    */
export enum ItemRelationshipTypeEnum {
    Variation = 'VARIATION',
    PackageHierarchy = 'PACKAGE_HIERARCHY'
}

/**
 * Relationship details for the Amazon catalog item for the indicated Amazon marketplace.
 * @export
 * @interface ItemRelationshipsByMarketplace
 */
export interface ItemRelationshipsByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemRelationshipsByMarketplace
     */
    marketplaceId: string;
    /**
     * Relationships for the item.
     * @type {Array<ItemRelationship>}
     * @memberof ItemRelationshipsByMarketplace
     */
    relationships: Array<ItemRelationship>;
}
/**
 * Sales ranks of an Amazon catalog item for the indicated Amazon marketplace.
 * @export
 * @interface ItemSalesRanksByMarketplace
 */
export interface ItemSalesRanksByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemSalesRanksByMarketplace
     */
    marketplaceId: string;
    /**
     * Sales ranks of an Amazon catalog item for an Amazon marketplace by classification.
     * @type {Array<ItemClassificationSalesRank>}
     * @memberof ItemSalesRanksByMarketplace
     */
    classificationRanks?: Array<ItemClassificationSalesRank>;
    /**
     * Sales ranks of an Amazon catalog item for an Amazon marketplace by website display group.
     * @type {Array<ItemDisplayGroupSalesRank>}
     * @memberof ItemSalesRanksByMarketplace
     */
    displayGroupRanks?: Array<ItemDisplayGroupSalesRank>;
}
/**
 * Items in the Amazon catalog and search related metadata.
 * @export
 * @interface ItemSearchResults
 */
export interface ItemSearchResults {
    /**
     * For `identifiers`-based searches, the total number of Amazon catalog items found. For `keywords`-based searches, the estimated total number of Amazon catalog items matched by the search query (only results up to the page count limit will be returned per request regardless of the number found).  Note: The maximum number of items (ASINs) that can be returned and paged through is 1000.
     * @type {number}
     * @memberof ItemSearchResults
     */
    numberOfResults: number;
    /**
     * 
     * @type {Pagination}
     * @memberof ItemSearchResults
     */
    pagination: Pagination;
    /**
     * 
     * @type {Refinements}
     * @memberof ItemSearchResults
     */
    refinements: Refinements;
    /**
     * A list of items from the Amazon catalog.
     * @type {Array<Item>}
     * @memberof ItemSearchResults
     */
    items: Array<Item>;
}
/**
 * Summary details of an Amazon catalog item for the indicated Amazon marketplace.
 * @export
 * @interface ItemSummaryByMarketplace
 */
export interface ItemSummaryByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    marketplaceId: string;
    /**
     * Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature.
     * @type {boolean}
     * @memberof ItemSummaryByMarketplace
     */
    adultProduct?: boolean;
    /**
     * Identifies an Amazon catalog item is autographed by a player or celebrity.
     * @type {boolean}
     * @memberof ItemSummaryByMarketplace
     */
    autographed?: boolean;
    /**
     * Name of the brand associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    brand?: string;
    /**
     * 
     * @type {ItemBrowseClassification}
     * @memberof ItemSummaryByMarketplace
     */
    browseClassification?: ItemBrowseClassification;
    /**
     * Name of the color associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    color?: string;
    /**
     * Individual contributors to the creation of an item, such as the authors or actors.
     * @type {Array<ItemContributor>}
     * @memberof ItemSummaryByMarketplace
     */
    contributors?: Array<ItemContributor>;
    /**
     * Classification type associated with the Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    itemClassification?: ItemSummaryByMarketplaceItemClassificationEnum | 'BASE_PRODUCT' | 'OTHER' | 'PRODUCT_BUNDLE' | 'VARIATION_PARENT';
    /**
     * Name, or title, associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    itemName?: string;
    /**
     * Name of the manufacturer associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    manufacturer?: string;
    /**
     * Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment.
     * @type {boolean}
     * @memberof ItemSummaryByMarketplace
     */
    memorabilia?: boolean;
    /**
     * Model number associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    modelNumber?: string;
    /**
     * Quantity of an Amazon catalog item in one package.
     * @type {number}
     * @memberof ItemSummaryByMarketplace
     */
    packageQuantity?: number;
    /**
     * Part number associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    partNumber?: string;
    /**
     * First date on which an Amazon catalog item is shippable to customers.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    releaseDate?: string;
    /**
     * Name of the size associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    size?: string;
    /**
     * Name of the style associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    style?: string;
    /**
     * Identifies an Amazon catalog item is eligible for trade-in.
     * @type {boolean}
     * @memberof ItemSummaryByMarketplace
     */
    tradeInEligible?: boolean;
    /**
     * Identifier of the website display group associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    websiteDisplayGroup?: string;
    /**
     * Display name of the website display group associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemSummaryByMarketplace
     */
    websiteDisplayGroupName?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ItemSummaryByMarketplaceItemClassificationEnum {
    BaseProduct = 'BASE_PRODUCT',
    Other = 'OTHER',
    ProductBundle = 'PRODUCT_BUNDLE',
    VariationParent = 'VARIATION_PARENT'
}

/**
 * Variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
 * @export
 * @interface ItemVariationTheme
 */
export interface ItemVariationTheme {
    /**
     * Names of the Amazon catalog item attributes associated with the variation theme.
     * @type {Array<string>}
     * @memberof ItemVariationTheme
     */
    attributes?: Array<string>;
    /**
     * Variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
     * @type {string}
     * @memberof ItemVariationTheme
     */
    theme?: string;
}
/**
 * Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace.
 * @export
 * @interface ItemVendorDetailsByMarketplace
 */
export interface ItemVendorDetailsByMarketplace {
    /**
     * Amazon marketplace identifier.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    marketplaceId: string;
    /**
     * Brand code associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    brandCode?: string;
    /**
     * Manufacturer code associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    manufacturerCode?: string;
    /**
     * Parent vendor code of the manufacturer code.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    manufacturerCodeParent?: string;
    /**
     * 
     * @type {ItemVendorDetailsCategory}
     * @memberof ItemVendorDetailsByMarketplace
     */
    productCategory?: ItemVendorDetailsCategory;
    /**
     * Product group associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    productGroup?: string;
    /**
     * 
     * @type {ItemVendorDetailsCategory}
     * @memberof ItemVendorDetailsByMarketplace
     */
    productSubcategory?: ItemVendorDetailsCategory;
    /**
     * Replenishment category associated with an Amazon catalog item.
     * @type {string}
     * @memberof ItemVendorDetailsByMarketplace
     */
    replenishmentCategory?: ItemVendorDetailsByMarketplaceReplenishmentCategoryEnum | 'ALLOCATED' | 'BASIC_REPLENISHMENT' | 'IN_SEASON' | 'LIMITED_REPLENISHMENT' | 'MANUFACTURER_OUT_OF_STOCK' | 'NEW_PRODUCT' | 'NON_REPLENISHABLE' | 'NON_STOCKUPABLE' | 'OBSOLETE' | 'PLANNED_REPLENISHMENT';
}

/**
    * @export
    * @enum {string}
    */
export enum ItemVendorDetailsByMarketplaceReplenishmentCategoryEnum {
    Allocated = 'ALLOCATED',
    BasicReplenishment = 'BASIC_REPLENISHMENT',
    InSeason = 'IN_SEASON',
    LimitedReplenishment = 'LIMITED_REPLENISHMENT',
    ManufacturerOutOfStock = 'MANUFACTURER_OUT_OF_STOCK',
    NewProduct = 'NEW_PRODUCT',
    NonReplenishable = 'NON_REPLENISHABLE',
    NonStockupable = 'NON_STOCKUPABLE',
    Obsolete = 'OBSOLETE',
    PlannedReplenishment = 'PLANNED_REPLENISHMENT'
}

/**
 * Product category or subcategory associated with an Amazon catalog item.
 * @export
 * @interface ItemVendorDetailsCategory
 */
export interface ItemVendorDetailsCategory {
    /**
     * Display name of the product category or subcategory
     * @type {string}
     * @memberof ItemVendorDetailsCategory
     */
    displayName?: string;
    /**
     * Value (code) of the product category or subcategory.
     * @type {string}
     * @memberof ItemVendorDetailsCategory
     */
    value?: string;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * When a request produces a response that exceeds the `pageSize`, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the `nextToken` value or the `previousToken` value as the `pageToken` parameter in the next request. When you receive the last page, there will be no `nextToken` key in the pagination object.
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * A token that can be used to fetch the next page.
     * @type {string}
     * @memberof Pagination
     */
    nextToken?: string;
    /**
     * A token that can be used to fetch the previous page.
     * @type {string}
     * @memberof Pagination
     */
    previousToken?: string;
}
/**
 * Search refinements.
 * @export
 * @interface Refinements
 */
export interface Refinements {
    /**
     * Brand search refinements.
     * @type {Array<BrandRefinement>}
     * @memberof Refinements
     */
    brands: Array<BrandRefinement>;
    /**
     * Classification search refinements.
     * @type {Array<ClassificationRefinement>}
     * @memberof Refinements
     */
    classifications: Array<ClassificationRefinement>;
}

/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem: async (asin: string, marketplaceIds: Array<string>, includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'asin' is not null or undefined
            assertParamExists('getCatalogItem', 'asin', asin)
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('getCatalogItem', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/catalog/2022-04-01/items/{asin}`
                .replace(`{${"asin"}}`, encodeURIComponent(String(asin)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (includedData) {
                localVarQueryParameter['includedData'] = includedData.join(COLLECTION_FORMATS.csv);
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {Array<string>} [identifiers] A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;.
         * @param {'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC'} [identifiersType] Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {string} [sellerId] A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;.
         * @param {Array<string>} [keywords] A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [brandNames] A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [classificationIds] A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {number} [pageSize] Number of results to be returned per page.
         * @param {string} [pageToken] A token to fetch a certain page when there are multiple pages worth of results.
         * @param {string} [keywordsLocale] The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogItems: async (marketplaceIds: Array<string>, identifiers?: Array<string>, identifiersType?: 'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC', includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, sellerId?: string, keywords?: Array<string>, brandNames?: Array<string>, classificationIds?: Array<string>, pageSize?: number, pageToken?: string, keywordsLocale?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'marketplaceIds' is not null or undefined
            assertParamExists('searchCatalogItems', 'marketplaceIds', marketplaceIds)
            const localVarPath = `/catalog/2022-04-01/items`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (identifiers) {
                localVarQueryParameter['identifiers'] = identifiers.join(COLLECTION_FORMATS.csv);
            }

            if (identifiersType !== undefined) {
                localVarQueryParameter['identifiersType'] = identifiersType;
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (includedData) {
                localVarQueryParameter['includedData'] = includedData.join(COLLECTION_FORMATS.csv);
            }

            if (locale !== undefined) {
                localVarQueryParameter['locale'] = locale;
            }

            if (sellerId !== undefined) {
                localVarQueryParameter['sellerId'] = sellerId;
            }

            if (keywords) {
                localVarQueryParameter['keywords'] = keywords.join(COLLECTION_FORMATS.csv);
            }

            if (brandNames) {
                localVarQueryParameter['brandNames'] = brandNames.join(COLLECTION_FORMATS.csv);
            }

            if (classificationIds) {
                localVarQueryParameter['classificationIds'] = classificationIds.join(COLLECTION_FORMATS.csv);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (pageToken !== undefined) {
                localVarQueryParameter['pageToken'] = pageToken;
            }

            if (keywordsLocale !== undefined) {
                localVarQueryParameter['keywordsLocale'] = keywordsLocale;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCatalogItem(asin: string, marketplaceIds: Array<string>, includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Item>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCatalogItem(asin, marketplaceIds, includedData, locale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {Array<string>} [identifiers] A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;.
         * @param {'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC'} [identifiersType] Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {string} [sellerId] A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;.
         * @param {Array<string>} [keywords] A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [brandNames] A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [classificationIds] A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {number} [pageSize] Number of results to be returned per page.
         * @param {string} [pageToken] A token to fetch a certain page when there are multiple pages worth of results.
         * @param {string} [keywordsLocale] The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCatalogItems(marketplaceIds: Array<string>, identifiers?: Array<string>, identifiersType?: 'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC', includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, sellerId?: string, keywords?: Array<string>, brandNames?: Array<string>, classificationIds?: Array<string>, pageSize?: number, pageToken?: string, keywordsLocale?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ItemSearchResults>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCatalogItems(marketplaceIds, identifiers, identifiersType, includedData, locale, sellerId, keywords, brandNames, classificationIds, pageSize, pageToken, keywordsLocale, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {string} asin The Amazon Standard Identification Number (ASIN) of the item.
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCatalogItem(asin: string, marketplaceIds: Array<string>, includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, options?: any): AxiosPromise<Item> {
            return localVarFp.getCatalogItem(asin, marketplaceIds, includedData, locale, options).then((request) => request(axios, basePath));
        },
        /**
         * Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         * @param {Array<string>} marketplaceIds A comma-delimited list of Amazon marketplace identifiers for the request.
         * @param {Array<string>} [identifiers] A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;.
         * @param {'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC'} [identifiersType] Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided.
         * @param {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>} [includedData] A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
         * @param {string} [locale] Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
         * @param {string} [sellerId] A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;.
         * @param {Array<string>} [keywords] A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [brandNames] A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {Array<string>} [classificationIds] A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {number} [pageSize] Number of results to be returned per page.
         * @param {string} [pageToken] A token to fetch a certain page when there are multiple pages worth of results.
         * @param {string} [keywordsLocale] The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCatalogItems(marketplaceIds: Array<string>, identifiers?: Array<string>, identifiersType?: 'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC', includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>, locale?: string, sellerId?: string, keywords?: Array<string>, brandNames?: Array<string>, classificationIds?: Array<string>, pageSize?: number, pageToken?: string, keywordsLocale?: string, options?: any): AxiosPromise<ItemSearchResults> {
            return localVarFp.searchCatalogItems(marketplaceIds, identifiers, identifiersType, includedData, locale, sellerId, keywords, brandNames, classificationIds, pageSize, pageToken, keywordsLocale, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCatalogItem operation in CatalogApi.
 * @export
 * @interface CatalogApiGetCatalogItemRequest
 */
export interface CatalogApiGetCatalogItemRequest {
    /**
     * The Amazon Standard Identification Number (ASIN) of the item.
     * @type {string}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly asin: string

    /**
     * A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
     * @type {Array<string>}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly marketplaceIds: Array<string>

    /**
     * A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
     * @type {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>

    /**
     * Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
     * @type {string}
     * @memberof CatalogApiGetCatalogItem
     */
    readonly locale?: string
}

/**
 * Request parameters for searchCatalogItems operation in CatalogApi.
 * @export
 * @interface CatalogApiSearchCatalogItemsRequest
 */
export interface CatalogApiSearchCatalogItemsRequest {
    /**
     * A comma-delimited list of Amazon marketplace identifiers for the request.
     * @type {Array<string>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly marketplaceIds: Array<string>

    /**
     * A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with &#x60;keywords&#x60;.
     * @type {Array<string>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly identifiers?: Array<string>

    /**
     * Type of product identifiers to search the Amazon catalog for. **Note:** Required when &#x60;identifiers&#x60; are provided.
     * @type {'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC'}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly identifiersType?: 'ASIN' | 'EAN' | 'GTIN' | 'ISBN' | 'JAN' | 'MINSAN' | 'SKU' | 'UPC'

    /**
     * A comma-delimited list of data sets to include in the response. Default: &#x60;summaries&#x60;.
     * @type {Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly includedData?: Array<'attributes' | 'dimensions' | 'identifiers' | 'images' | 'productTypes' | 'relationships' | 'salesRanks' | 'summaries' | 'vendorDetails'>

    /**
     * Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
     * @type {string}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly locale?: string

    /**
     * A selling partner identifier, such as a seller account or vendor code. **Note:** Required when &#x60;identifiersType&#x60; is &#x60;SKU&#x60;.
     * @type {string}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly sellerId?: string

    /**
     * A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with &#x60;identifiers&#x60;.
     * @type {Array<string>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly keywords?: Array<string>

    /**
     * A comma-delimited list of brand names to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
     * @type {Array<string>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly brandNames?: Array<string>

    /**
     * A comma-delimited list of classification identifiers to limit the search for &#x60;keywords&#x60;-based queries. **Note:** Cannot be used with &#x60;identifiers&#x60;.
     * @type {Array<string>}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly classificationIds?: Array<string>

    /**
     * Number of results to be returned per page.
     * @type {number}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly pageSize?: number

    /**
     * A token to fetch a certain page when there are multiple pages worth of results.
     * @type {string}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly pageToken?: string

    /**
     * The language of the keywords provided for &#x60;keywords&#x60;-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with &#x60;identifiers&#x60;.
     * @type {string}
     * @memberof CatalogApiSearchCatalogItems
     */
    readonly keywordsLocale?: string
}

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * Retrieves details for an item in the Amazon catalog.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CatalogApiGetCatalogItemRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public getCatalogItem(requestParameters: CatalogApiGetCatalogItemRequest, options?: any) {
        return CatalogApiFp(this.configuration).getCatalogItem(requestParameters.asin, requestParameters.marketplaceIds, requestParameters.includedData, requestParameters.locale, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.  **Usage Plans:**  | Rate (requests per second) | Burst | | ---- | ---- | | 5 | 5 |  The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     * @param {CatalogApiSearchCatalogItemsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public searchCatalogItems(requestParameters: CatalogApiSearchCatalogItemsRequest, options?: any) {
        return CatalogApiFp(this.configuration).searchCatalogItems(requestParameters.marketplaceIds, requestParameters.identifiers, requestParameters.identifiersType, requestParameters.includedData, requestParameters.locale, requestParameters.sellerId, requestParameters.keywords, requestParameters.brandNames, requestParameters.classificationIds, requestParameters.pageSize, requestParameters.pageToken, requestParameters.keywordsLocale, options).then((request) => request(this.axios, this.basePath));
    }
}


