/* tslint:disable */
/* eslint-disable */
/**
 * Selling Partner API for Reports
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * The version of the OpenAPI document: 2020-09-04
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * The response for the cancelReport operation.
 * @export
 * @interface CancelReportResponse
 */
export interface CancelReportResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelReportResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the cancelReportSchedule operation.
 * @export
 * @interface CancelReportScheduleResponse
 */
export interface CancelReportScheduleResponse {
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CancelReportScheduleResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the createReport operation.
 * @export
 * @interface CreateReportResponse
 */
export interface CreateReportResponse {
    /**
     * 
     * @type {CreateReportResult}
     * @memberof CreateReportResponse
     */
    payload?: CreateReportResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateReportResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface CreateReportResult
 */
export interface CreateReportResult {
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof CreateReportResult
     */
    reportId: string;
}
/**
 * The response for the createReportSchedule operation.
 * @export
 * @interface CreateReportScheduleResponse
 */
export interface CreateReportScheduleResponse {
    /**
     * 
     * @type {CreateReportScheduleResult}
     * @memberof CreateReportScheduleResponse
     */
    payload?: CreateReportScheduleResult;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof CreateReportScheduleResponse
     */
    errors?: Array<Error>;
}
/**
 * 
 * @export
 * @interface CreateReportScheduleResult
 */
export interface CreateReportScheduleResult {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof CreateReportScheduleResult
     */
    reportScheduleId: string;
}
/**
 * 
 * @export
 * @interface CreateReportScheduleSpecification
 */
export interface CreateReportScheduleSpecification {
    /**
     * The report type.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    reportType: string;
    /**
     * A list of marketplace identifiers for the report schedule.
     * @type {Array<string>}
     * @memberof CreateReportScheduleSpecification
     */
    marketplaceIds: Array<string>;
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof CreateReportScheduleSpecification
     */
    reportOptions?: { [key: string]: string; };
    /**
     * One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    period: CreateReportScheduleSpecificationPeriodEnum;
    /**
     * The date and time when the schedule will create its next report, in ISO 8601 date time format.
     * @type {string}
     * @memberof CreateReportScheduleSpecification
     */
    nextReportCreationTime?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum CreateReportScheduleSpecificationPeriodEnum {
    Pt5M = 'PT5M',
    Pt15M = 'PT15M',
    Pt30M = 'PT30M',
    Pt1H = 'PT1H',
    Pt2H = 'PT2H',
    Pt4H = 'PT4H',
    Pt8H = 'PT8H',
    Pt12H = 'PT12H',
    P1D = 'P1D',
    P2D = 'P2D',
    P3D = 'P3D',
    Pt84H = 'PT84H',
    P7D = 'P7D',
    P14D = 'P14D',
    P15D = 'P15D',
    P18D = 'P18D',
    P30D = 'P30D',
    P1M = 'P1M'
}

/**
 * 
 * @export
 * @interface CreateReportSpecification
 */
export interface CreateReportSpecification {
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof CreateReportSpecification
     */
    reportOptions?: { [key: string]: string; };
    /**
     * The report type.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    reportType: string;
    /**
     * The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    dataStartTime?: string;
    /**
     * The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
     * @type {string}
     * @memberof CreateReportSpecification
     */
    dataEndTime?: string;
    /**
     * A list of marketplace identifiers. The report document\'s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
     * @type {Array<string>}
     * @memberof CreateReportSpecification
     */
    marketplaceIds: Array<string>;
}
/**
 * Response schema.
 * @export
 * @interface GetReportDocumentResponse
 */
export interface GetReportDocumentResponse {
    /**
     * 
     * @type {ReportDocument}
     * @memberof GetReportDocumentResponse
     */
    payload?: ReportDocument;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetReportDocumentResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the getReport operation.
 * @export
 * @interface GetReportResponse
 */
export interface GetReportResponse {
    /**
     * 
     * @type {Report}
     * @memberof GetReportResponse
     */
    payload?: Report;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetReportResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the getReportSchedule operation.
 * @export
 * @interface GetReportScheduleResponse
 */
export interface GetReportScheduleResponse {
    /**
     * 
     * @type {ReportSchedule}
     * @memberof GetReportScheduleResponse
     */
    payload?: ReportSchedule;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetReportScheduleResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the getReportSchedules operation.
 * @export
 * @interface GetReportSchedulesResponse
 */
export interface GetReportSchedulesResponse {
    /**
     * 
     * @type {Array<ReportSchedule>}
     * @memberof GetReportSchedulesResponse
     */
    payload?: Array<ReportSchedule>;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetReportSchedulesResponse
     */
    errors?: Array<Error>;
}
/**
 * The response for the getReports operation.
 * @export
 * @interface GetReportsResponse
 */
export interface GetReportsResponse {
    /**
     * 
     * @type {Array<Report>}
     * @memberof GetReportsResponse
     */
    payload?: Array<Report>;
    /**
     * Returned when the number of results exceeds pageSize. To get the next page of results, call getReports with this token as the only parameter.
     * @type {string}
     * @memberof GetReportsResponse
     */
    nextToken?: string;
    /**
     * A list of error responses returned when a request is unsuccessful.
     * @type {Array<Error>}
     * @memberof GetReportsResponse
     */
    errors?: Array<Error>;
}
/**
 * Error response returned when the request is unsuccessful.
 * @export
 * @interface ModelError
 */
export interface ModelError {
    /**
     * An error code that identifies the type of error that occurred.
     * @type {string}
     * @memberof ModelError
     */
    code: string;
    /**
     * A message that describes the error condition in a human-readable form.
     * @type {string}
     * @memberof ModelError
     */
    message: string;
    /**
     * Additional details that can help the caller understand or fix the issue.
     * @type {string}
     * @memberof ModelError
     */
    details?: string;
}
/**
 * 
 * @export
 * @interface Report
 */
export interface Report {
    /**
     * A list of marketplace identifiers for the report.
     * @type {Array<string>}
     * @memberof Report
     */
    marketplaceIds?: Array<string>;
    /**
     * The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Report
     */
    reportId: string;
    /**
     * The report type.
     * @type {string}
     * @memberof Report
     */
    reportType: string;
    /**
     * The start of a date and time range used for selecting the data to report.
     * @type {string}
     * @memberof Report
     */
    dataStartTime?: string;
    /**
     * The end of a date and time range used for selecting the data to report.
     * @type {string}
     * @memberof Report
     */
    dataEndTime?: string;
    /**
     * The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof Report
     */
    reportScheduleId?: string;
    /**
     * The date and time when the report was created.
     * @type {string}
     * @memberof Report
     */
    createdTime: string;
    /**
     * The processing status of the report.
     * @type {string}
     * @memberof Report
     */
    processingStatus: ReportProcessingStatusEnum;
    /**
     * The date and time when the report processing started, in ISO 8601 date time format.
     * @type {string}
     * @memberof Report
     */
    processingStartTime?: string;
    /**
     * The date and time when the report processing completed, in ISO 8601 date time format.
     * @type {string}
     * @memberof Report
     */
    processingEndTime?: string;
    /**
     * The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve and decrypt the report document\'s contents.
     * @type {string}
     * @memberof Report
     */
    reportDocumentId?: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportProcessingStatusEnum {
    Cancelled = 'CANCELLED',
    Done = 'DONE',
    Fatal = 'FATAL',
    InProgress = 'IN_PROGRESS',
    InQueue = 'IN_QUEUE'
}

/**
 * 
 * @export
 * @interface ReportDocument
 */
export interface ReportDocument {
    /**
     * The identifier for the report document. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportDocument
     */
    reportDocumentId: string;
    /**
     * A presigned URL for the report document. This URL expires after 5 minutes.
     * @type {string}
     * @memberof ReportDocument
     */
    url: string;
    /**
     * 
     * @type {ReportDocumentEncryptionDetails}
     * @memberof ReportDocument
     */
    encryptionDetails: ReportDocumentEncryptionDetails;
    /**
     * If present, the report document contents have been compressed with the provided algorithm.
     * @type {string}
     * @memberof ReportDocument
     */
    compressionAlgorithm?: ReportDocumentCompressionAlgorithmEnum;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportDocumentCompressionAlgorithmEnum {
    Gzip = 'GZIP'
}

/**
 * Encryption details required for decryption of a report document\'s contents.
 * @export
 * @interface ReportDocumentEncryptionDetails
 */
export interface ReportDocumentEncryptionDetails {
    /**
     * The encryption standard required to decrypt the document contents.
     * @type {string}
     * @memberof ReportDocumentEncryptionDetails
     */
    standard: ReportDocumentEncryptionDetailsStandardEnum;
    /**
     * The vector to decrypt the document contents using Cipher Block Chaining (CBC).
     * @type {string}
     * @memberof ReportDocumentEncryptionDetails
     */
    initializationVector: string;
    /**
     * The encryption key used to decrypt the document contents.
     * @type {string}
     * @memberof ReportDocumentEncryptionDetails
     */
    key: string;
}

/**
    * @export
    * @enum {string}
    */
export enum ReportDocumentEncryptionDetailsStandardEnum {
    Aes = 'AES'
}

/**
 * Detailed information about a report schedule.
 * @export
 * @interface ReportSchedule
 */
export interface ReportSchedule {
    /**
     * The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @type {string}
     * @memberof ReportSchedule
     */
    reportScheduleId: string;
    /**
     * The report type.
     * @type {string}
     * @memberof ReportSchedule
     */
    reportType: string;
    /**
     * A list of marketplace identifiers. The report document\'s contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
     * @type {Array<string>}
     * @memberof ReportSchedule
     */
    marketplaceIds?: Array<string>;
    /**
     * Additional information passed to reports. This varies by report type.
     * @type {{ [key: string]: string; }}
     * @memberof ReportSchedule
     */
    reportOptions?: { [key: string]: string; };
    /**
     * An ISO 8601 period value that indicates how often a report should be created.
     * @type {string}
     * @memberof ReportSchedule
     */
    period: string;
    /**
     * The date and time when the schedule will create its next report, in ISO 8601 date time format.
     * @type {string}
     * @memberof ReportSchedule
     */
    nextReportCreationTime?: string;
}

/**
 * ReportsApi - axios parameter creator
 * @export
 */
export const ReportsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Cancels the report that you specify. Only reports with processingStatus=IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReport: async (reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('cancelReport', 'reportId', reportId)
            const localVarPath = `/reports/2020-09-04/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReportSchedule: async (reportScheduleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportScheduleId' is not null or undefined
            assertParamExists('cancelReportSchedule', 'reportScheduleId', reportScheduleId)
            const localVarPath = `/reports/2020-09-04/schedules/{reportScheduleId}`
                .replace(`{${"reportScheduleId"}}`, encodeURIComponent(String(reportScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport: async (body: CreateReportSpecification, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createReport', 'body', body)
            const localVarPath = `/reports/2020-09-04/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportScheduleSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportSchedule: async (body: CreateReportScheduleSpecification, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('createReportSchedule', 'body', body)
            const localVarPath = `/reports/2020-09-04/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2.0 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport: async (reportId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportId' is not null or undefined
            assertParamExists('getReport', 'reportId', reportId)
            const localVarPath = `/reports/2020-09-04/reports/{reportId}`
                .replace(`{${"reportId"}}`, encodeURIComponent(String(reportId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the information required for retrieving a report document\'s contents. This includes a presigned URL for the report document as well as the information required to decrypt the document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportDocumentId The identifier for the report document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDocument: async (reportDocumentId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportDocumentId' is not null or undefined
            assertParamExists('getReportDocument', 'reportDocumentId', reportDocumentId)
            const localVarPath = `/reports/2020-09-04/documents/{reportDocumentId}`
                .replace(`{${"reportDocumentId"}}`, encodeURIComponent(String(reportDocumentId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportSchedule: async (reportScheduleId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportScheduleId' is not null or undefined
            assertParamExists('getReportSchedule', 'reportScheduleId', reportScheduleId)
            const localVarPath = `/reports/2020-09-04/schedules/{reportScheduleId}`
                .replace(`{${"reportScheduleId"}}`, encodeURIComponent(String(reportScheduleId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} reportTypes A list of report types used to filter report schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportSchedules: async (reportTypes: Array<string>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'reportTypes' is not null or undefined
            assertParamExists('getReportSchedules', 'reportTypes', reportTypes)
            const localVarPath = `/reports/2020-09-04/schedules`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reportTypes) {
                localVarQueryParameter['reportTypes'] = reportTypes.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} [reportTypes] A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
         * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
         * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
         * @param {number} [pageSize] The maximum number of reports to return in a single call.
         * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
         * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now.
         * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports: async (reportTypes?: Array<string>, processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/reports/2020-09-04/reports`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (reportTypes) {
                localVarQueryParameter['reportTypes'] = reportTypes.join(COLLECTION_FORMATS.csv);
            }

            if (processingStatuses) {
                localVarQueryParameter['processingStatuses'] = processingStatuses.join(COLLECTION_FORMATS.csv);
            }

            if (marketplaceIds) {
                localVarQueryParameter['marketplaceIds'] = marketplaceIds.join(COLLECTION_FORMATS.csv);
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (createdSince !== undefined) {
                localVarQueryParameter['createdSince'] = (createdSince as any instanceof Date) ?
                    (createdSince as any).toISOString() :
                    createdSince;
            }

            if (createdUntil !== undefined) {
                localVarQueryParameter['createdUntil'] = (createdUntil as any instanceof Date) ?
                    (createdUntil as any).toISOString() :
                    createdUntil;
            }

            if (nextToken !== undefined) {
                localVarQueryParameter['nextToken'] = nextToken;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportsApi - functional programming interface
 * @export
 */
export const ReportsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReportsApiAxiosParamCreator(configuration)
    return {
        /**
         * Cancels the report that you specify. Only reports with processingStatus=IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReport(reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReport(reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelReportSchedule(reportScheduleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelReportScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelReportSchedule(reportScheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReport(body: CreateReportSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReport(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportScheduleSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createReportSchedule(body: CreateReportScheduleSpecification, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateReportScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createReportSchedule(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2.0 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReport(reportId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReport(reportId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the information required for retrieving a report document\'s contents. This includes a presigned URL for the report document as well as the information required to decrypt the document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportDocumentId The identifier for the report document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportDocument(reportDocumentId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportDocumentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportDocument(reportDocumentId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportSchedule(reportScheduleId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportScheduleResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportSchedule(reportScheduleId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} reportTypes A list of report types used to filter report schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReportSchedules(reportTypes: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportSchedulesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReportSchedules(reportTypes, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} [reportTypes] A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
         * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
         * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
         * @param {number} [pageSize] The maximum number of reports to return in a single call.
         * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
         * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now.
         * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getReports(reportTypes?: Array<string>, processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GetReportsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getReports(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReportsApi - factory interface
 * @export
 */
export const ReportsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReportsApiFp(configuration)
    return {
        /**
         * Cancels the report that you specify. Only reports with processingStatus=IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReport(reportId: string, options?: any): AxiosPromise<CancelReportResponse> {
            return localVarFp.cancelReport(reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelReportSchedule(reportScheduleId: string, options?: any): AxiosPromise<CancelReportScheduleResponse> {
            return localVarFp.cancelReportSchedule(reportScheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReport(body: CreateReportSpecification, options?: any): AxiosPromise<CreateReportResponse> {
            return localVarFp.createReport(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {CreateReportScheduleSpecification} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReportSchedule(body: CreateReportScheduleSpecification, options?: any): AxiosPromise<CreateReportScheduleResponse> {
            return localVarFp.createReportSchedule(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2.0 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReport(reportId: string, options?: any): AxiosPromise<GetReportResponse> {
            return localVarFp.getReport(reportId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the information required for retrieving a report document\'s contents. This includes a presigned URL for the report document as well as the information required to decrypt the document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportDocumentId The identifier for the report document.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportDocument(reportDocumentId: string, options?: any): AxiosPromise<GetReportDocumentResponse> {
            return localVarFp.getReportDocument(reportDocumentId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportSchedule(reportScheduleId: string, options?: any): AxiosPromise<GetReportScheduleResponse> {
            return localVarFp.getReportSchedule(reportScheduleId, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} reportTypes A list of report types used to filter report schedules.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReportSchedules(reportTypes: Array<string>, options?: any): AxiosPromise<GetReportSchedulesResponse> {
            return localVarFp.getReportSchedules(reportTypes, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
         * @param {Array<string>} [reportTypes] A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
         * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
         * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
         * @param {number} [pageSize] The maximum number of reports to return in a single call.
         * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
         * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now.
         * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReports(reportTypes?: Array<string>, processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any): AxiosPromise<GetReportsResponse> {
            return localVarFp.getReports(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportsApi - object-oriented interface
 * @export
 * @class ReportsApi
 * @extends {BaseAPI}
 */
export class ReportsApi extends BaseAPI {
    /**
     * Cancels the report that you specify. Only reports with processingStatus=IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public cancelReport(reportId: string, options?: any) {
        return ReportsApiFp(this.configuration).cancelReport(reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancels the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public cancelReportSchedule(reportScheduleId: string, options?: any) {
        return ReportsApiFp(this.configuration).cancelReportSchedule(reportScheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a report.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CreateReportSpecification} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public createReport(body: CreateReportSpecification, options?: any) {
        return ReportsApiFp(this.configuration).createReport(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {CreateReportScheduleSpecification} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public createReportSchedule(body: CreateReportScheduleSpecification, options?: any) {
        return ReportsApiFp(this.configuration).createReportSchedule(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns report details (including the reportDocumentId, if available) for the report that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2.0 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} reportId The identifier for the report. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReport(reportId: string, options?: any) {
        return ReportsApiFp(this.configuration).getReport(reportId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the information required for retrieving a report document\'s contents. This includes a presigned URL for the report document as well as the information required to decrypt the document\'s contents.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 15 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} reportDocumentId The identifier for the report document.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportDocument(reportDocumentId: string, options?: any) {
        return ReportsApiFp(this.configuration).getReportDocument(reportDocumentId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns report schedule details for the report schedule that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {string} reportScheduleId The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportSchedule(reportScheduleId: string, options?: any) {
        return ReportsApiFp(this.configuration).getReportSchedule(reportScheduleId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns report schedule details that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {Array<string>} reportTypes A list of report types used to filter report schedules.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReportSchedules(reportTypes: Array<string>, options?: any) {
        return ReportsApiFp(this.configuration).getReportSchedules(reportTypes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns report details for the reports that match the filters that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0222 | 10 |  For more information, see \"Usage Plans and Rate Limits\" in the Selling Partner API documentation.
     * @param {Array<string>} [reportTypes] A list of report types used to filter reports. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required.
     * @param {Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>} [processingStatuses] A list of processing statuses used to filter reports.
     * @param {Array<string>} [marketplaceIds] A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify.
     * @param {number} [pageSize] The maximum number of reports to return in a single call.
     * @param {string} [createdSince] The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days.
     * @param {string} [createdUntil] The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now.
     * @param {string} [nextToken] A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportsApi
     */
    public getReports(reportTypes?: Array<string>, processingStatuses?: Array<'CANCELLED' | 'DONE' | 'FATAL' | 'IN_PROGRESS' | 'IN_QUEUE'>, marketplaceIds?: Array<string>, pageSize?: number, createdSince?: string, createdUntil?: string, nextToken?: string, options?: any) {
        return ReportsApiFp(this.configuration).getReports(reportTypes, processingStatuses, marketplaceIds, pageSize, createdSince, createdUntil, nextToken, options).then((request) => request(this.axios, this.basePath));
    }
}


