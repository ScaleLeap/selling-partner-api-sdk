{
  "swagger": "2.0",
  "info": {
    "description": "Provides programmatic access to Amazon Shipping APIs.",
    "version": "v2",
    "title": "Amazon Shipping API Model",
    "contact": {
      "name": "Amazon Shipping API Support",
      "url": "https://github.com/amzn/<ToBeCreated>-sdk/issues",
      "email": "amazon-shipping-api@amazon.com"
    },
    "license": {
      "name": "Amazon Software License",
      "url": "https://aws.amazon.com/asl/"
    }
  },
  "host": "marketplaceapi.amazonservices.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/shipping/v2/shipments/rates": {
      "post": {
        "tags": [
          "shipping"
        ],
        "description": "Provides available shipping service offerings.",
        "operationId": "getRates",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GetRatesRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "requestToken": "6DCCEDD3FF961C15FEB94F342D41C",
                "rates": [
                  {
                    "rateId": "F4B68849F969E239FF9FCA9C12E35",
                    "carrierId": "FOOSHIPGRD",
                    "carrierName": "FOO SHIP GRD",
                    "billedWeight": {
                      "value": 5,
                      "unit": "GRAMS"
                    },
                    "totalCharge": {
                      "value": 7,
                      "unit": "USD"
                    },
                    "serviceId": "FOORSID",
                    "serviceName": "FOO RS ID",
                    "promise": {
                      "deliveryWindow": {
                        "start": "2018-08-24T08:22:30.737Z",
                        "end": "2018-08-24T20:22:30.737Z"
                      },
                      "pickupWindow": {
                        "start": "2018-08-23T08:22:30.737Z",
                        "end": "2018-08-23T20:22:30.737Z"
                      }
                    },
                    "supportedDocumentSpecifications": [
                      {
                        "format": "PNG",
                        "size": {
                          "length": 6,
                          "width": 4,
                          "unit": "INCH"
                        },
                        "printOptions": [
                          {
                            "supportedDPIs": [
                              300,
                              203
                            ],
                            "supportedPageLayouts": [
                              "LEFT",
                              "RIGHT"
                            ],
                            "supportedFileJoiningOptions": [
                              true,
                              false
                            ],
                            "supportedDocumentDetails": [
                              {
                                "name": "LABEL",
                                "isMandatory": true
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "availableValueAddedServiceGroups": [
                      {
                        "groupId": "SIG_VERIFICATION",
                        "groupDescription": "Signature Verification",
                        "isRequired": true,
                        "valueAddedServices": [
                          {
                            "id": "CUST_SIG_VERIFICATION",
                            "name": "Customer Signature Verification",
                            "cost": {
                              "unit": "USD",
                              "value": 2
                            }
                          }
                        ]
                      }
                    ],
                    "requiresAdditionalInputs" : false
                  }
                ],
                "ineligibleRates": [
                  {
                    "carrierId": "FOOSTDGRD",
                    "serviceId": "FOO8420430",
                    "carrierName": "FOOSTDGRD",
                    "serviceName": "FOO8420430",
                    "ineligibilityReasons": [
                      {
                        "code" : "NO_COVERAGE",
                        "message" : "Required shipping network coverage doesn't exist for the offering"
                      }
                    ]
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "body": {
                      "value": {
                        "shipTo": {
                          "name": "Alice",
                          "addressLine1": "444, St 20, Pete Avenue",
                          "stateOrRegion": "Texas",
                          "city": "North Park",
                          "countryCode": "GB",
                          "postalCode": "78799"
                        },
                        "shipFrom": {
                          "name": "Bob",
                          "addressLine1": "123, Block 7, Winfield Apartments",
                          "addressLine2": "North Lamar",
                          "stateOrRegion": "Texas",
                          "city": "Demtin",
                          "countryCode": "GB",
                          "postalCode": "78732"
                        },
                        "shipDate": "2020-01-30T09:27:05Z",
                        "packages": [
                          {
                            "dimensions": {
                              "length": 1,
                              "width": 2,
                              "height": 2,
                              "unit": "INCH"
                            },
                            "weight": {
                              "unit": "GRAM",
                              "value": 250
                            },
                            "insuredValue": {
                              "value": 44,
                              "unit": "USD"
                            },
                            "isHazmat": true,
                            "packageClientReferenceId": "PPEI-4326495734098",
                            "items": [
                              {
                                "itemValue": {
                                  "value": 24,
                                  "unit": "USD"
                                },
                                "description": "Description of the item1.",
                                "itemIdentifier": "ITEM-26495734098",
                                "quantity": 1,
                                "weight": {
                                  "unit": "GRAM",
                                  "value": 150
                                },
                                "isHazmat": true
                              },
                              {
                                "itemValue": {
                                  "value": 20,
                                  "unit": "USD"
                                },
                                "description": "Description of the item2.",
                                "itemIdentifier": "ITEM-26495734099",
                                "quantity": 1,
                                "weight": {
                                  "unit": "GRAM",
                                  "value": 100
                                },
                                "isHazmat": false
                              }
                            ]
                          }
                        ],
                        "channelDetails": {
                          "channelType": "EXTERNAL"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "payload": {
                    "requestToken": "6DCCEDD3FF961C15FEB94F342D41C",
                    "rates": [
                      {
                        "rateId": "F4B68849F969E239FF9FCA9C12E35",
                        "carrierId": "FOOSHIPGRD",
                        "carrierName": "FOO SHIP GRD",
                        "billedWeight": {
                          "value": 5,
                          "unit": "GRAM"
                        },
                        "totalCharge": {
                          "value": 7,
                          "unit": "USD"
                        },
                        "serviceId": "econ-uk-mfn",
                        "serviceName": "Amazon Standard",
                        "promise": {
                          "deliveryWindow": {
                            "startTime": "2018-08-24T08:22:30.737Z",
                            "endTime": "2018-08-24T20:22:30.737Z"
                          },
                          "pickupWindow": {
                            "startTime": "2018-08-23T08:22:30.737Z",
                            "endTime": "2018-08-23T20:22:30.737Z"
                          }
                        },
                        "supportedDocumentSpecifications": [
                          {
                            "format": "PNG",
                            "size": {
                              "length": 6,
                              "width": 4,
                              "unit": "INCH"
                            },
                            "printOptions": [
                              {
                                "supportedDPIs": [
                                  300,
                                  203
                                ],
                                "supportedPageLayouts": [
                                  "LEFT",
                                  "RIGHT"
                                ],
                                "supportedFileJoiningOptions": [
                                  true,
                                  false
                                ],
                                "supportedDocumentDetails": [
                                  {
                                    "name": "LABEL",
                                    "isMandatory": true
                                  }
                                ]
                              }
                            ]
                          }
                        ],
                        "availableValueAddedServiceGroups": [
                          {
                            "groupId": "SIG_VERIFICATION",
                            "groupDescription": "Signature Verification",
                            "isRequired": true,
                            "valueAddedServices": [
                              {
                                "id": "CUST_SIG_VERIFICATION",
                                "name": "Customer Signature Verification",
                                "cost": {
                                  "unit": "USD",
                                  "value": 2
                                }
                              }
                            ]
                          }
                        ],
                        "requiresAdditionalInputs" : false
                      }
                    ],
                    "ineligibleRates": [
                      {
                        "carrierId": "FOOSTDGRD",
                        "serviceId": "FOO8420430",
                        "carrierName": "FOOSTDGRD",
                        "serviceName": "FOO8420430",
                        "ineligibilityReasons": [
                          {
                            "code" : "NO_COVERAGE",
                            "message" : "Required shipping network coverage doesn't exist for the offering"
                          }
                        ]
                      }
                    ]
                  }
                }
              },
              {
                "request": {
                  "parameters": {
                    "body": {
                      "value": {
                        "shipTo": {
                          "name": "Alice",
                          "addressLine1": "444, St 20, Pete Avenue",
                          "stateOrRegion": "Texas",
                          "city": "North Park",
                          "countryCode": "US",
                          "postalCode": "78799"
                        },
                        "shipFrom": {
                          "name": "Bob",
                          "addressLine1": "123, Block 7, Winfield Apartments",
                          "addressLine2": "North Lamar",
                          "stateOrRegion": "Texas",
                          "city": "Demtin",
                          "countryCode": "US",
                          "postalCode": "78732"
                        },
                        "shipDate": "2020-01-30T09:27:05Z",
                        "packages": [
                          {
                            "dimensions": {
                              "length": 1,
                              "width": 2,
                              "height": 2,
                              "unit": "INCH"
                            },
                            "weight": {
                              "unit": "GRAM",
                              "value": 250
                            },
                            "insuredValue": {
                              "value": 44,
                              "unit": "USD"
                            },
                            "isHazmat": true,
                            "packageClientReferenceId": "PPEI-4326495734098",
                            "items": [
                              {
                                "itemValue": {
                                  "value": 24,
                                  "unit": "USD"
                                },
                                "description": "Description of the item1.",
                                "itemIdentifier": "ITEM-26495734098",
                                "quantity": 1,
                                "weight": {
                                  "unit": "GRAM",
                                  "value": 150
                                },
                                "isHazmat": true
                              },
                              {
                                "itemValue": {
                                  "value": 20,
                                  "unit": "USD"
                                },
                                "description": "Description of the item2.",
                                "itemIdentifier": "ITEM-26495734099",
                                "quantity": 1,
                                "weight": {
                                  "unit": "GRAM",
                                  "value": 100
                                },
                                "isHazmat": false
                              }
                            ]
                          }
                        ],
                        "channelDetails": {
                          "channelType": "EXTERNAL"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "payload": {
                    "requestToken": "6DCCEDD3FF961C15FEB94F342D41C",
                    "rates": [
                      {
                        "rateId": "F4B68849F969E239FF9FCA9C12E35",
                        "carrierId": "FOOSHIPGRD",
                        "carrierName": "FOO SHIP GRD",
                        "billedWeight": {
                          "value": 5,
                          "unit": "GRAM"
                        },
                        "totalCharge": {
                          "value": 7,
                          "unit": "USD"
                        },
                        "serviceId": "FOORSID",
                        "serviceName": "FOO RS ID",
                        "promise": {
                          "deliveryWindow": {
                            "startTime": "2018-08-24T08:22:30.737Z",
                            "endTime": "2018-08-24T20:22:30.737Z"
                          },
                          "pickupWindow": {
                            "startTime": "2018-08-23T08:22:30.737Z",
                            "endTime": "2018-08-23T20:22:30.737Z"
                          }
                        },
                        "supportedDocumentSpecifications": [
                          {
                            "format": "PNG",
                            "size": {
                              "length": 6,
                              "width": 4,
                              "unit": "INCH"
                            },
                            "printOptions": [
                              {
                                "supportedDPIs": [
                                  300,
                                  203
                                ],
                                "supportedPageLayouts": [
                                  "LEFT",
                                  "RIGHT"
                                ],
                                "supportedFileJoiningOptions": [
                                  true,
                                  false
                                ],
                                "supportedDocumentDetails": [
                                  {
                                    "name": "LABEL",
                                    "isMandatory": true
                                  }
                                ]
                              }
                            ]
                          }
                        ],
                        "availableValueAddedServiceGroups": [
                          {
                            "groupId": "SIG_VERIFICATION",
                            "groupDescription": "Signature Verification",
                            "isRequired": true,
                            "valueAddedServices": [
                              {
                                "id": "CUST_SIG_VERIFICATION",
                                "name": "Customer Signature Verification",
                                "cost": {
                                  "unit": "USD",
                                  "value": 2
                                }
                              }
                            ]
                          }
                        ]
                      }
                    ],
                    "ineligibleRates": [
                      {
                        "carrierId": "FOOSTDGRD",
                        "serviceId": "FOO8420430",
                        "carrierName": "FOOSTDGRD",
                        "serviceName": "FOO8420430",
                        "ineligibilityReasons": [
                          {
                            "code" : "NO_COVERAGE",
                            "message" : "Required shipping network coverage doesn't exist for the offering"
                          }
                        ]
                      }
                    ]
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "ChannelDetails object cannot be null"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "body": {
                      "value": {
                        "shipTo": {
                          "name": "Alice",
                          "addressLine1": "444, St 20, Pete Avenue",
                          "stateOrRegion": "Texas",
                          "city": "North Park",
                          "countryCode": "US",
                          "postalCode": "78799"
                        },
                        "shipFrom": {
                          "name": "Bob",
                          "addressLine1": "123, Block 7, Winfield Apartments",
                          "addressLine2": "North Lamar",
                          "stateOrRegion": "Texas",
                          "city": "Demtin",
                          "countryCode": "US",
                          "postalCode": "78732"
                        },
                        "shipDate": "2020-01-30T09:27:05Z",
                        "packages": [
                          {
                            "dimensions": {
                              "length": 1,
                              "width": 2,
                              "height": 2,
                              "unit": "INCH"
                            },
                            "weight": {
                              "unit": "GRAM",
                              "value": 250
                            },
                            "insuredValue": {
                              "value": 44,
                              "unit": "USD"
                            },
                            "isHazmat": true,
                            "packageClientReferenceId": "PPEI-4326495734098",
                            "items": [
                              {
                                "itemValue": {
                                  "value": 24,
                                  "unit": "USD"
                                },
                                "description": "Description of the item1.",
                                "itemIdentifier": "ITEM-26495734098",
                                "quantity": 1,
                                "isHazmat": true
                              },
                              {
                                "itemValue": {
                                  "value": 20,
                                  "unit": "USD"
                                },
                                "description": "Description of the item2.",
                                "itemIdentifier": "ITEM-26495734099",
                                "quantity": 1,
                                "isHazmat": false
                              }
                            ]
                          }
                        ],
                        "channelDetails": {
                          "channelType": "Amazon"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "AmazonOrder field has to be populated if ChannelType is Amazon"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/GetRatesResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/shipments/directPurchase": {
      "post": {
        "tags": [
          "shipping"
        ],
        "description": "Purchases the shipping service for a shipment from the best fit service offering. Returns purchase related details and documents.",
        "operationId": "directPurchaseShipment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DirectPurchaseRequest"
            }
          },
          {
            "name": "x-amzn-IdempotencyKey",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "header",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "shipmentId": "445454-3232-3232",
                "packageDocumentDetailList": [{
                  "packageClientReferenceId": "ASUSDI-45343854",
                  "trackingId": "T1234567",
                  "packageDocuments": [
                    {
                      "type": "LABEL",
                      "format": "PNG",
                      "contents": ""
                    }
                  ]
                }]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              },
              "x-amzn-IdempotencyKey": {
                "type": "string",
                "description": "idempotency Key."
              }
            }
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "ChannelDetails object cannot be null"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/DirectPurchaseResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/shipments": {
      "post": {
        "tags": [
          "shipping"
        ],
        "description": "Purchases the shipping service for a shipment from the provided service offerings. Returns purchase related details and documents.",
        "operationId": "purchaseShipment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "shipmentId": "87852211788104",
                "packageDocumentDetails": [
                  {
                    "packageClientReferenceId": "abcd",
                    "packageDocuments": [
                      {
                        "type": "LABEL",
                        "format": "PNG",
                        "contents": "sdioadaiosfhdodsaiufhouafhoudfhdouahfac=="
                      }
                    ],
                    "trackingId": 1578648261977
                  }
                ],
                "promise": {
                  "pickupWindow": {
                    "startTime": "2019-12-11T07:09:05.513Z",
                    "endTime": "2019-12-11T09:09:05.513Z"
                  },
                  "deliveryWindow": {
                    "startTime": "2019-12-13T07:09:05.513Z",
                    "endTime": "2019-12-13T09:09:05.513Z"
                  }
                }
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "body": {
                      "value": {
                        "requestToken": "6DCCEDD3FF961C15FEB94F342D41C",
                        "rateId": "F4B68849F969E239FF9FCA9C12E35",
                        "requestedDocumentSpecification": {
                          "format": "PDF",
                          "size": {
                            "width": 4,
                            "length": 6,
                            "unit": "INCH"
                          },
                          "dpi": 203,
                          "pageLayout": "LEFT",
                          "needFileJoining": false,
                          "requestedDocumentTypes": [
                            "LABEL"
                          ]
                        },
                        "requestedValueAddedServices": [
                          {
                            "id": "CUST_SIG"
                          }
                        ],
                        "additionalInputs": {
                          "harmonizedSystemCode": "HS1234534",
                          "packageClientReferenceId": "PAC1234"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "payload": {
                    "shipmentId": "'878522117881'",
                    "packageDocumentDetails": [
                      {
                        "packageClientReferenceId": "abcd",
                        "packageDocuments": [
                          {
                            "type": "LABEL",
                            "format": "PNG",
                            "contents": "sdioadaiosfhdodsaiufhouafhoudfhdouahfac=="
                          }
                        ],
                        "trackingId": "'157864826197'"
                      }
                    ],
                    "promise": {
                      "pickupWindow": {
                        "startTime": "2019-12-11T07:09:05.513Z",
                        "endTime": "2019-12-11T09:09:05.513Z"
                      },
                      "deliveryWindow": {
                        "startTime": "2019-12-13T07:09:05.513Z",
                        "endTime": "2019-12-13T09:09:05.513Z"
                      }
                    }
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "RateId cannot be null"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "body": {
                      "value": {
                        "requestToken": "6DCCEDD3FF961C15FEB94F342D41C",
                        "requestedDocumentSpecification": {
                          "format": "PDF",
                          "size": {
                            "width": 4,
                            "length": 6,
                            "unit": "INCH"
                          },
                          "dpi": 203,
                          "pageLayout": "LEFT",
                          "needFileJoining": false,
                          "requestedDocumentTypes": [
                            "LABEL"
                          ]
                        },
                        "requestedValueAddedServices": [
                          {
                            "id": "string"
                          }
                        ],
                        "additionalInputs": {
                          "harmonizedSystemCode": "HS1234534",
                          "packageClientReferenceId": "PAC1234"
                        }
                      }
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "RateId cannot be null"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/PurchaseShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/tracking": {
      "get": {
        "tags": [
          "shipping"
        ],
        "description": "Fetches the tracking information for a purchased shipment.",
        "operationId": "getTracking",
        "parameters": [
          {
            "name": "trackingId",
            "in": "query",
            "required": true,
            "description": "Carrier generated tracking identifier provided in the PurchaseShipment response.",
            "type": "string"
          },
          {
            "name": "carrierId",
            "in": "query",
            "required": true,
            "description": "Carrier identifier for the offering provided in the PurchaseShipment response.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "trackingId": "23AA47DE2B3B6",
                "eventHistory": [
                  {
                    "eventCode": "READY_FOR_RECEIVE",
                    "location": {
                      "postalCode": "4883493",
                      "countryCode": "CC"
                    },
                    "eventTime": "2019-12-11T07:09:05.513Z"
                  }
                ],
                "promisedDeliveryDate": "2019-12-12T13:09:05.513Z",
                "summary": {
                  "status": "PRE_TRANSIT"
                }
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "carrierId": {
                      "value": "3DD4C4386D3C2"
                    },
                    "trackingId": {
                      "value": "23AA47DE2B3B6"
                    }
                  }
                },
                "response": {
                  "payload": {
                    "trackingId": "23AA47DE2B3B6",
                    "eventHistory": [
                      {
                        "eventCode": "READY_FOR_RECEIVE",
                        "location": {
                          "postalCode": "456690",
                          "city": "Foo City",
                          "stateOrRegion": "Bar State",
                          "countryCode": "CC"
                        },
                        "eventTime": "2019-12-11T07:09:05.513Z"
                      }
                    ],
                    "promisedDeliveryDate": "2019-12-12T13:09:05.513Z",
                    "summary": {
                      "status": "PRE_TRANSIT"
                    }
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "CarrierId is missing in the request"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "trackingId": {
                      "value": "23AA47DE2B3B6"
                    },
                    "carrierId": {
                      "value": "null"
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "CarrierId cannot be null"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/GetTrackingResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/shipments/{shipmentId}/documents": {
      "get": {
        "tags": [
          "shipping"
        ],
        "description": "Gets shipping documents associated with the package of a purchased shipment.",
        "operationId": "getShipmentDocuments",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageClientReferenceId",
            "in": "query",
            "required": true,
            "description": "Package client reference identifier provided in the GetRates request.",
            "type": "string"
          },
          {
            "name": "format",
            "in": "query",
            "required": false,
            "description": "File Format of the document (Eg: PDF, PNG, ZPL). Should be one of the supported formats returned in GetRates response.",
            "type": "string"
          },
          {
            "name": "dpi",
            "in": "query",
            "required": false,
            "description": "Resolution of the document (Eg: 203, 300). Should be one of the supported resolutions returned in GetRates response.",
            "type": "number"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "shipmentId": "445454-3232-3232",
                "packageDocumentDetail": {
                  "packageClientReferenceId": "ASUSDI-45343854",
                  "trackingId": "T1234567",
                  "packageDocuments": [
                    {
                      "type": "LABEL",
                      "format": "PNG",
                      "contents": "sdioadaiosfhdodsaiufhouafhoudfhdouahfac=="
                    }
                  ]
                }
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "shipmentId": {
                      "value": "1242345535"
                    },
                    "packageClientReferenceId": {
                      "value": "124234234553534324"
                    },
                    "format": {
                      "value": "PNG"
                    }
                  }
                },
                "response": {
                  "payload": {
                    "shipmentId": "445454-3232-3232",
                    "packageDocumentDetail": {
                      "packageClientReferenceId": "ASUSDI-45343854",
                      "trackingId": "T1234567",
                      "packageDocuments": [
                        {
                          "type": "LABEL",
                          "format": "PNG",
                          "contents": "sdioadaiosfhdodsaiufhouafhoudfhdouahfac=="
                        }
                      ]
                    }
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "CarrierId is missing in the request"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "shipmentId": {
                      "value": "1242345535"
                    },
                    "packageClientReferenceId": {
                      "value": "\"null\""
                    },
                    "format": {
                      "value": "PDF"
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "PackageClientReferenceId cannot be null"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/GetShipmentDocumentsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/shipments/{shipmentId}/cancel": {
      "put": {
        "tags": [
          "shipping"
        ],
        "description": "Cancels a purchased shipment. Returns an empty object if the shipment is cancelled. Else throws Error.",
        "operationId": "cancelShipment",
        "parameters": [
          {
            "name": "shipmentId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {}
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "shipmentId": {
                      "value": "12232-4234-543535"
                    }
                  }
                },
                "response": {
                  "payload": {}
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "ShipmentId cannot be null"
                  }
                ]
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "shipmentId": {
                      "value": "null"
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "ShipmentId cannot be null"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/CancelShipmentResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      }
    },
    "/shipping/v2/shipments/additionalInputs/schema": {
      "get": {
        "tags": [
          "shipping"
        ],
        "description": "Fetches the JSON schema for additional inputs required for purchasing a shipping offering.  Should be invoked if 'requiresAdditionalInput' value of GetRates response is true.",
        "operationId": "getAdditionalInputs",
        "parameters": [
          {
            "name": "requestToken",
            "in": "query",
            "required": true,
            "description" : "RequestToken returned as part of GetRates response.",
            "type": "string"
          },
          {
            "name": "rateId",
            "in": "query",
            "required": true,
            "description" : "RateId for the shipping offering, returned in GetRates response.",
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Success.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "payload": {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "title": "Additional inputs for Shipping Offering",
                  "type": "object",
                  "properties": {
                    "harmonizedSystemCode": {
                      "type": "string",
                      "description": "Harmonized System's commodity code for an item."
                    },
                    "packageClientReferenceId": {
                      "type": "string",
                      "description": "Unqiue identifier for the item."
                    }
                  }
                }
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "requestToken": {
                      "value": "amzn1.rq.123456789.101"
                    },
                    "rateId": {
                      "value": "122324234543535321345436534321423423523452345"
                    }
                  }
                },
                "response": {
                  "payload": {
                    "$schema": "http://json-schema.org/draft-04/schema#",
                    "title": "Additional inputs for Shipping Offering",
                    "type": "object",
                    "properties": {
                      "harmonizedSystemCode": {
                        "type": "string",
                        "description": "Harmonized System's commodity code for an item."
                      },
                      "packageClientReferenceId": {
                        "type": "string",
                        "description": "Unqiue identifier for the item."
                      }
                    }
                  }
                }
              }
            ]
          },
          "400": {
            "description": "Request is missing or has invalid parameters and cannot be parsed.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "Request is missing or has invalid parameters",
                    "details": "RequestToken cannot be null"
                  }
                ]
              }
            },
            "x-amazon-spds-sandbox-behaviors": [
              {
                "request": {
                  "parameters": {
                    "requestToken": {
                      "value": "null"
                    },
                    "rateId": {
                      "value": "2314346237423894905834905890346890789075"
                    }
                  }
                },
                "response": {
                  "errors": [
                    {
                      "code": "InvalidRequest",
                      "message": "Request is missing or has invalid parameters",
                      "details": "RequestToken cannot be null"
                    }
                  ]
                }
              }
            ]
          },
          "401": {
            "description": "The request's Authorization header is not formatted correctly or does not contain a valid token.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "403": {
            "description": "403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "Unauthorized",
                    "message": "You don't have access to the requested response or the credentials are invalid."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "404": {
            "description": "The resource specified does not exist.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "NotFound",
                    "message": "The requested resource is invalid or doesn't exist"
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "413": {
            "description": "The request size exceeded the maximum accepted size.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload size is greater than maximum accepted size."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "415": {
            "description": "The payload of the request is in a format not supported by the requested resource.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InvalidRequest",
                    "message": "The request payload format is not supported."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "429": {
            "description": "The frequency of requests was greater than allowed.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "TooManyRequests",
                    "message": "The total number of requests exceeded your allowed limit."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "500": {
            "description": "Encountered an unexpected condition which prevented the server from fulfilling the request.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "InternalError",
                    "message": "Something went wrong while processing the request."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          },
          "503": {
            "description": "Temporary overloading or maintenance of the server.",
            "schema": {
              "$ref": "#/definitions/GetAdditionalInputsResponse"
            },
            "examples": {
              "application/json": {
                "errors": [
                  {
                    "code": "ServiceUnavailable",
                    "message": "Service temporarily unavailable or down for maintenance. Please try again after sometime."
                  }
                ]
              }
            },
            "headers": {
              "x-amzn-RequestId": {
                "type": "string",
                "description": "Unique request reference id."
              }
            }
          }
        }
      },
      "parameters": []
    }
  },
  "definitions": {
    "Error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "An error code that identifies the type of error that occurred."
        },
        "message": {
          "type": "string",
          "description": "A message that describes the error condition in a human-readable form."
        },
        "details": {
          "type": "string",
          "description": "Additional details that can help the caller understand or fix the issue."
        }
      },
      "description": "Error response returned when the request is unsuccessful."
    },
    "ErrorList": {
      "type": "array",
      "description": "A list of error responses returned when a request is unsuccessful.",
      "items": {
        "$ref": "#/definitions/Error"
      }
    },
    "Weight": {
      "type": "object",
      "required": [
        "unit",
        "value"
      ],
      "properties": {
        "unit": {
          "type": "string",
          "description": "The unit of measurement.",
          "enum": [
            "GRAM",
            "KILOGRAM",
            "OUNCE",
            "POUND"
          ]
        },
        "value": {
          "type": "number",
          "description": "The measurement value."
        }
      },
      "description": "The weight."
    },
    "Currency": {
      "type": "object",
      "required": [
        "unit",
        "value"
      ],
      "properties": {
        "value": {
          "type": "number",
          "description": "Currency amount value."
        },
        "unit": {
          "type": "string",
          "description": "ISO 4217 format 3-character currency code.",
          "minLength": 3,
          "maxLength": 3
        }
      },
      "description": "Amount and currency defined in the ISO 4217 standard format."
    },
    "Length": {
      "type": "object",
      "required": [
        "unit",
        "value"
      ],
      "properties": {
        "value": {
          "type": "number",
          "description": "Value.",
          "minimum": 1
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement.",
          "enum": [
            "INCH",
            "CENTIMETER"
          ]
        }
      },
      "description": "Linear measurement value."
    },
    "Dimensions": {
      "type": "object",
      "required": [
        "height",
        "length",
        "unit",
        "width"
      ],
      "properties": {
        "length": {
          "type": "number",
          "description": "The length of the package."
        },
        "width": {
          "type": "number",
          "description": "The width of the package."
        },
        "height": {
          "type": "number",
          "description": "The height of the package."
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement.",
          "enum": [
            "INCH",
            "CENTIMETER"
          ]
        }
      },
      "description": "A set of measurements for a three-dimensional object."
    },
    "RequestToken": {
      "type": "string",
      "description": "Unique token generated for a GetRates request."
    },
    "RateId": {
      "type": "string",
      "description": "An identifier for the rating/offering provided by service."
    },
    "CarrierId": {
      "type": "string",
      "description": "Carrier identifier for the offering, provided by Carrier."
    },
    "CarrierName": {
      "type": "string",
      "description": "Carrier name for the offering."
    },
    "PackageClientReferenceId": {
      "type": "string",
      "description": "Client provided unique identifier for a package being shipped. Should be preserved by client as this is used as a parameter in GetShipmentDocuments call.",
      "maxLength": 40
    },
    "ShipmentId": {
      "type": "string",
      "description": "The unique shipment identifier provided by service."
    },
    "TrackingId": {
      "type": "string",
      "description": "Carrier generated identifier for a package in a purchased shipment."
    },
    "ServiceId": {
      "type": "string",
      "description": "An identifier for the shipping service provided by service."
    },
    "ServiceName": {
      "type": "string",
      "description": "Name of the shipping service provided by service."
    },
    "Address": {
      "type": "object",
      "required": [
        "addressLine1",
        "city",
        "countryCode",
        "name",
        "postalCode",
        "stateOrRegion"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the person, business or institution at that address.",
          "minLength": 1,
          "maxLength": 50
        },
        "addressLine1": {
          "type": "string",
          "description": "First line of that address.",
          "minLength": 1,
          "maxLength": 60
        },
        "addressLine2": {
          "type": "string",
          "description": "Additional address information, if required.",
          "minLength": 1,
          "maxLength": 60
        },
        "addressLine3": {
          "type": "string",
          "description": "Additional address information, if required.",
          "minLength": 1,
          "maxLength": 60
        },
        "companyName": {
          "type": "string",
          "description": "Name of the business or institution associated with address."
        },
        "stateOrRegion": {
          "$ref": "#/definitions/StateOrRegion"
        },
        "city": {
          "$ref": "#/definitions/City"
        },
        "countryCode": {
          "$ref": "#/definitions/CountryCode"
        },
        "postalCode": {
          "$ref": "#/definitions/PostalCode"
        },
        "email": {
          "type": "string",
          "description": "The email address of the contact associated with the address.",
          "maxLength": 64
        },
        "phoneNumber": {
          "type": "string",
          "description": "The phone number of the person, business or institution located at that address and should be included with country Extensions Code.",
          "minLength": 1,
          "maxLength": 20
        }
      },
      "description": "The address."
    },
    "StateOrRegion": {
      "type": "string",
      "description": "The state, county or region where the person, business or institution is located."
    },
    "City": {
      "type": "string",
      "description": "The city or town where the person, business or institution is located."
    },
    "CountryCode": {
      "type": "string",
      "description": "The two digit country code. Follows ISO 3166-1 alpha-2 format."
    },
    "PostalCode": {
      "type": "string",
      "description": "The postal code of that address. It contains a series of letters or digits or both, sometimes including spaces or punctuation."
    },
    "Location": {
      "type": "object",
      "properties": {
        "stateOrRegion": {
          "$ref": "#/definitions/StateOrRegion"
        },
        "city": {
          "$ref": "#/definitions/City"
        },
        "countryCode": {
          "$ref": "#/definitions/CountryCode"
        },
        "postalCode": {
          "$ref": "#/definitions/PostalCode"
        }
      },
      "description": "The location where the person, business or institution is located."
    },
    "DocumentFormat": {
      "type": "string",
      "description": "File Format of the document.",
      "enum": [
        "PDF",
        "PNG",
        "ZPL"
      ]
    },
    "DocumentType": {
      "type": "string",
      "description": "Type of shipping document.",
      "enum": [
        "PACKSLIP",
        "LABEL",
        "RECEIPT",
        "CUSTOM_FORM"
      ]
    },
    "Dpi": {
      "type": "integer",
      "description": "Dpi (Dots per Inch) value used in printing."
    },
    "PageLayout": {
      "type": "string",
      "description": "Indicator for position of label on the paper. Should be the same value as returned in GetRates response."
    },
    "NeedFileJoining": {
      "type": "boolean",
      "description": "Indicator whether files should be stitched together or returned separately. Defaults to false."
    },
    "Contents": {
      "type": "string",
      "description": "Base 64 encoded file contents."
    },
    "PackageDocumentList": {
      "type": "array",
      "description": "List of documents related to a package.",
      "items": {
        "$ref": "#/definitions/PackageDocument"
      }
    },
    "PackageDocument": {
      "type": "object",
      "required": [
        "type",
        "format",
        "contents"
      ],
      "properties": {
        "type": {
          "$ref": "#/definitions/DocumentType"
        },
        "format": {
          "$ref": "#/definitions/DocumentFormat"
        },
        "contents": {
          "$ref": "#/definitions/Contents"
        }
      },
      "description": "Document related to a package."
    },
    "PrintOptionList": {
      "type": "array",
      "description": "List of Format Options for a label.",
      "items": {
        "$ref": "#/definitions/PrintOption"
      }
    },
    "PrintOption": {
      "type": "object",
      "required": [
        "supportedFileJoiningOptions",
        "supportedPageLayouts",
        "supportedDocumentDetails"
      ],
      "properties": {
        "supportedDPIs": {
          "type": "array",
          "description": "List of supported DPI options for a document.",
          "items": {
            "$ref": "#/definitions/Dpi"
          }
        },
        "supportedPageLayouts": {
          "type": "array",
          "description": "List of supported page layout options for a document.",
          "items": {
            "$ref": "#/definitions/PageLayout"
          }
        },
        "supportedFileJoiningOptions": {
          "type": "array",
          "description": "List of supported needFileJoining boolean values for a document.",
          "items": {
            "$ref": "#/definitions/NeedFileJoining"
          }
        },
        "supportedDocumentDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SupportedDocumentDetail"
          }
        }
      },
      "description": "Format options available for a label."
    },
    "DocumentSize": {
      "type": "object",
      "required": [
        "length",
        "unit",
        "width"
      ],
      "properties": {
        "width": {
          "type": "number"
        },
        "length": {
          "type": "number"
        },
        "unit": {
          "type": "string",
          "description": "The unit of measurement.",
          "enum": [
            "INCH",
            "CENTIMETER"
          ]
        }
      },
      "description": "Size dimensions of the label."
    },
    "SupportedDocumentDetail": {
      "type": "object",
      "required": [
        "name",
        "isMandatory"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/DocumentType"
        },
        "isMandatory": {
          "type": "boolean",
          "description": "Indicates whether Supported Document Type is mandatory or not."
        }
      },
      "description": "Document types that are supported for a service offering."
    },
    "RequestedDocumentSpecification": {
      "type": "object",
      "required": [
        "format",
        "needFileJoining",
        "requestedDocumentTypes",
        "size"
      ],
      "properties": {
        "format": {
          "$ref": "#/definitions/DocumentFormat"
        },
        "size": {
          "$ref": "#/definitions/DocumentSize"
        },
        "dpi": {
          "$ref": "#/definitions/Dpi"
        },
        "pageLayout": {
          "$ref": "#/definitions/PageLayout"
        },
        "needFileJoining": {
          "$ref": "#/definitions/NeedFileJoining"
        },
        "requestedDocumentTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentType"
          }
        }
      },
      "description": "Document's specifications requested in purchase. Should be inline with Supported Specifications provided in getRates response, else purchase fails."
    },
    "SupportedDocumentSpecificationList": {
      "type": "array",
      "description": "Document Specifications that are supported for a service offering.",
      "items": {
        "$ref": "#/definitions/SupportedDocumentSpecification"
      }
    },
    "SupportedDocumentSpecification": {
      "type": "object",
      "required": [
        "format",
        "printOptions",
        "size"
      ],
      "properties": {
        "format": {
          "$ref": "#/definitions/DocumentFormat"
        },
        "size": {
          "$ref": "#/definitions/DocumentSize"
        },
        "printOptions": {
          "$ref": "#/definitions/PrintOptionList"
        }
      },
      "description": "Document specification that is supported for a service offering."
    },
    "Item": {
      "type": "object",
      "required": [
        "quantity"
      ],
      "properties": {
        "itemValue": {
          "$ref": "#/definitions/Currency"
        },
        "description": {
          "type": "string",
          "description": "Product description of the item."
        },
        "itemIdentifier": {
          "type": "string",
          "description": "Unique identifier for an Item provided by the client."
        },
        "quantity": {
          "type": "integer",
          "description": "Number of units. Item quantity is required."
        },
        "weight" : {
          "$ref": "#/definitions/Weight"
        },
        "isHazmat": {
          "type": "boolean",
          "description": "Boolean indicator whether an item is Hazmat or not. Defaults to false."
        },
        "serialNumbers": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of unique serial numbers to match against an Amazon package to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped in the request. Only applicable when channel source is Amazon."
        },
        "directFulfillmentItemIdentifiers": {
          "$ref": "#/definitions/DirectFulfillmentItemIdentifiers"
        }
      },
      "description": "Item in the package."
    },
    "ItemList": {
      "type": "array",
      "description": "List of items.",
      "items": {
        "$ref": "#/definitions/Item"
      }
    },
    "Package": {
      "type": "object",
      "required": [
        "dimensions",
        "items",
        "packageClientReferenceId",
        "insuredValue",
        "weight"
      ],
      "properties": {
        "dimensions": {
          "$ref": "#/definitions/Dimensions"
        },
        "weight": {
          "$ref": "#/definitions/Weight"
        },
        "insuredValue": {
          "$ref": "#/definitions/Currency"
        },
        "isHazmat": {
          "type": "boolean",
          "description": "Indicator whether the package is Hazmat or not. Defaults to false."
        },
        "packageClientReferenceId": {
          "$ref": "#/definitions/PackageClientReferenceId"
        },
        "items": {
          "$ref": "#/definitions/ItemList"
        }
      },
      "description": "Package that is to be shipped through a shipping service offering."
    },
    "PackageList": {
      "type": "array",
      "description": "List of packages that are to be shipped through a shipping service offering.",
      "items": {
        "$ref": "#/definitions/Package"
      }
    },
    "DirectFulfillmentItemIdentifiers": {
      "type": "object",
      "required": [
        "lineItemID"
      ],
      "properties": {
        "lineItemID": {
          "type": "string",
          "description": "Unique identifier for an Item provided by the client for DF shipments. This is only populated for DF multi piece shipments and mandatory if vendor wants to change the configuration of packages in which the purchase order is shipped."
        },
        "pieceNumber": {
          "type": "string",
          "description": "Unique identifier for an Item provided by the client for DF shipments. This is only populated for DF shipments if single line item has multiple pieces and will be defaulted to 1 if not provided."
        }
      },
      "description": "Item details specific for DF shipments."
    },
    "PackageDocumentDetail": {
      "type": "object",
      "required": [
        "packageClientReferenceId",
        "packageDocuments"
      ],
      "properties": {
        "packageClientReferenceId": {
          "$ref": "#/definitions/PackageClientReferenceId"
        },
        "packageDocuments": {
          "$ref": "#/definitions/PackageDocumentList"
        },
        "trackingId": {
          "$ref": "#/definitions/TrackingId"
        }
      },
      "description": "Post purchase detail of the package that will be shipped through a shipping service."
    },
    "PackageDocumentDetailList": {
      "type": "array",
      "description": "Post purchase details of the package that will be shipped through a shipping service.",
      "items": {
        "$ref": "#/definitions/PackageDocumentDetail"
      }
    },
    "TimeWindow": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "Start time of the window."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "End time of the window."
        }
      },
      "description": "Time duration used to specify the interval of an event. Eg: PickUp, Delivery."
    },
    "Promise": {
      "type": "object",
      "properties": {
        "deliveryWindow": {
          "$ref": "#/definitions/TimeWindow"
        },
        "pickupWindow": {
          "$ref": "#/definitions/TimeWindow"
        }
      },
      "description": "Time windows promised for pickup and delivery events."
    },
    "RequestedValueAddedServiceList": {
      "type": "array",
      "description": "Value Added Services that are to be applied for a shipping service purchase.",
      "items": {
        "$ref": "#/definitions/RequestedValueAddedService"
      }
    },
    "RequestedValueAddedService": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier of the selected value added service. The ID should be among the list of IDs returned in GetRates call, else purchase will fail."
        }
      },
      "description": "Value Added Services that is to be applied for a shipping service purchase."
    },
    "AvailableValueAddedServiceGroupList": {
      "type": "array",
      "description": "Value Added Services that are available for a shipping service offering.",
      "items": {
        "$ref": "#/definitions/AvailableValueAddedServiceGroup"
      }
    },
    "AvailableValueAddedServiceGroup": {
      "type": "object",
      "required": [
        "groupId",
        "groupDescription",
        "isRequired"
      ],
      "properties": {
        "groupId": {
          "type": "string",
          "description": "Type of the Value Added Service group."
        },
        "groupDescription": {
          "type": "string",
          "description": "Name of the Value Added Service group."
        },
        "isRequired": {
          "type": "boolean",
          "description": "Indicates that the value added service group requires one of the option to be specified. If the group is not required then a specific VAS does not need to be selected; otherwise, one must be supplied."
        },
        "valueAddedServices": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ValueAddedService"
          }
        }
      },
      "description": "Value Added Services that is available for a shipping service offering."
    },
    "ValueAddedService": {
      "type": "object",
      "required": [
        "cost",
        "id",
        "name"
      ],
      "properties": {
        "id": {
          "type": "string",
          "description": "Identifier for the value added service."
        },
        "name": {
          "type": "string",
          "description": "Human understandable name for the value added service."
        },
        "cost": {
          "$ref": "#/definitions/Currency"
        }
      },
      "description": "Details of a Value Added Service."
    },
    "EventCode": {
      "type": "string",
      "description": "Code for an event that indicates the Event Type.",
      "enum": [
        "READY_FOR_RECEIVE",
        "PICKUP_DONE",
        "DELIVERED",
        "DEPARTED",
        "DELIVERY_ATTEMPTED",
        "LOST",
        "OUT_FOR_DELIVERY",
        "ARRIVED_AT_CARRIER_FACILITY",
        "REJECTED",
        "UNDELIVERABLE",
        "PICKUP_CANCELLED"
      ]
    },
    "Event": {
      "type": "object",
      "required": [
        "eventCode",
        "eventTime"
      ],
      "properties": {
        "eventCode": {
          "$ref": "#/definitions/EventCode"
        },
        "location": {
          "$ref": "#/definitions/Location"
        },
        "eventTime": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 formatted timestamp of an event."
        }
      },
      "description": "A Tracking Event."
    },
    "TrackingSummary": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/Status"
        }
      },
      "description": "Summary of the tracking."
    },
    "Status": {
      "type": "string",
      "description": "Status of the package being shipped.",
      "enum": [
        "PRE_TRANSIT",
        "IN_TRANSIT",
        "DELIVERED",
        "LOST",
        "OUT_FOR_DELIVERY",
        "REJECTED",
        "UNDELIVERABLE",
        "DELIVERY_ATTEMPTED",
        "PICKUP_CANCELLED"
      ]
    },
    "AmazonOrderDetails": {
      "type": "object",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Unique identifier for an Amazon Order, provided by Amazon. Purchase orderId should be populated in case of DF shipments."
        }
      },
      "description": "Amazon Order information, populating this field is compulsory if shipment source channel is Amazon."
    },
    "AmazonShipmentDetails": {
      "type": "object",
      "required": [
        "shipmentId"
      ],
      "properties": {
        "shipmentId": {
          "type": "string",
          "description": "Unique identifier for an Amazon Shipment. Purchase orderId should be populated in case of DF shipments"
        }
      },
      "description": "Amazon shipment information, populating this field is compulsory for shipment"
    },
    "ChannelDetails": {
      "type": "object",
      "required": [
        "channelType"
      ],
      "properties": {
        "channelType": {
          "type": "string",
          "description": "Type of shipment source Channels. AMAZON has to be selected if shipment source is Amazon, else select EXTERNAL.",
          "enum": [
            "AMAZON",
            "EXTERNAL"
          ]
        },
        "amazonOrderDetails": {
          "$ref": "#/definitions/AmazonOrderDetails"
        },
        "amazonShipmentDetails": {
          "$ref": "#/definitions/AmazonShipmentDetails"
        }
      },
      "description": "Shipment source channel related information."
    },
    "RateList": {
      "type": "array",
      "description": "List of eligible shipping service offerings.",
      "items": {
        "$ref": "#/definitions/Rate"
      }
    },
    "Rate": {
      "type": "object",
      "required": [
        "carrierId",
        "carrierName",
        "promise",
        "rateId",
        "serviceId",
        "serviceName",
        "supportedDocumentSpecifications",
        "totalCharge",
        "requiresAdditionalInputs"
      ],
      "properties": {
        "rateId": {
          "$ref": "#/definitions/RateId"
        },
        "carrierId": {
          "$ref": "#/definitions/CarrierId"
        },
        "carrierName": {
          "$ref": "#/definitions/CarrierName"
        },
        "serviceId": {
          "$ref": "#/definitions/ServiceId"
        },
        "serviceName": {
          "$ref": "#/definitions/ServiceName"
        },
        "billedWeight": {
          "$ref": "#/definitions/Weight"
        },
        "totalCharge": {
          "$ref": "#/definitions/Currency"
        },
        "promise": {
          "$ref": "#/definitions/Promise"
        },
        "supportedDocumentSpecifications": {
          "$ref": "#/definitions/SupportedDocumentSpecificationList"
        },
        "availableValueAddedServiceGroups": {
          "$ref": "#/definitions/AvailableValueAddedServiceGroupList"
        },
        "requiresAdditionalInputs": {
          "type": "boolean",
          "description" : "This boolean flag indicates if the shipping offering requires additional inputs to be passed for purchase. GetAdditionalInputs API should be invoked if this value is true."
        }
      },
      "description": "Details of a shipping service offering."
    },
    "IneligibilityReasonCode": {
      "type": "string",
      "description": "Code for the ineligibility reason.",
      "enum": [
        "NO_COVERAGE",
        "PICKUP_SLOT_RESTRICTION",
        "UNSUPPORTED_VAS",
        "VAS_COMBINATION_RESTRICTION",
        "SIZE_RESTRICTIONS",
        "WEIGHT_RESTRICTIONS",
        "LATE_DELIVERY",
        "PROGRAM_CONSTRAINTS",
        "TERMS_AND_CONDITIONS_NOT_ACCEPTED",
        "UNKNOWN"
      ]
    },
    "IneligibilityReason" : {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "$ref": "#/definitions/IneligibilityReasonCode"
        },
        "message": {
          "type": "string",
          "description": "Descriptive message for the ineligibility reason."
        }
      },
      "description": "Reason that makes a shipping service offering ineligible."
    },
    "IneligibleRate": {
      "type": "object",
      "required": [
        "carrierId",
        "carrierName",
        "ineligibilityReasons",
        "serviceId",
        "serviceName"
      ],
      "properties": {
        "serviceId": {
          "$ref": "#/definitions/ServiceId"
        },
        "serviceName": {
          "$ref": "#/definitions/ServiceName"
        },
        "carrierName": {
          "$ref": "#/definitions/CarrierName"
        },
        "carrierId": {
          "$ref": "#/definitions/CarrierId"
        },
        "ineligibilityReasons": {
          "type": "array",
          "description": "List of reasons that makes a service offering ineligible.",
          "items": {
            "$ref": "#/definitions/IneligibilityReason"
          }
        }
      },
      "description": "List of ineligible shipping service offerings."
    },
    "IneligibleRateList": {
      "type": "array",
      "description": "Details of an ineligible shipping service offering.",
      "items": {
        "$ref": "#/definitions/IneligibleRate"
      }
    },
    "CancelShipmentResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for getRates operation.",
          "properties": {}
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "Response schema for CancelShipment operation."
    },
    "GetRatesRequest": {
      "type": "object",
      "required": [
        "packages",
        "shipFrom",
        "channelDetails"
      ],
      "properties": {
        "shipTo": {
          "$ref": "#/definitions/Address"
        },
        "shipFrom": {
          "$ref": "#/definitions/Address"
        },
        "returnTo": {
          "$ref": "#/definitions/Address"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time",
          "description": "The start date and time. This defaults to the current date and time."
        },
        "packages": {
          "$ref": "#/definitions/PackageList"
        },
        "channelDetails": {
          "$ref": "#/definitions/ChannelDetails"
        }
      },
      "description": "The payload schema for the getRates operation. ShipTo address is not needed if channelType is Amazon."
    },
    "GetRatesResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for getRates operation.",
          "properties": {
            "requestToken": {
              "$ref": "#/definitions/RequestToken"
            },
            "rates": {
              "$ref": "#/definitions/RateList"
            },
            "ineligibleRates": {
              "$ref": "#/definitions/IneligibleRateList"
            }
          },
          "required": [
            "rates",
            "requestToken"
          ]
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the getRates operation."
    },
    "DirectPurchaseRequest": {
      "type": "object",
      "required": [
        "channelDetails"
      ],
      "properties": {
        "shipTo": {
          "$ref": "#/definitions/Address"
        },
        "shipFrom": {
          "$ref": "#/definitions/Address"
        },
        "returnTo": {
          "$ref": "#/definitions/Address"
        },
        "packages": {
          "$ref": "#/definitions/PackageList"
        },
        "channelDetails": {
          "$ref": "#/definitions/ChannelDetails"
        },
        "labelSpecifications": {
          "$ref": "#/definitions/RequestedDocumentSpecification"
        }
      },
      "description": "The payload schema for the direct purchase operation. ShipTo address is not needed if channelType is Amazon."
    },
    "DirectPurchaseResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for DirectPurchase operation.",
          "properties": {
            "shipmentId": {
              "$ref": "#/definitions/ShipmentId"
            },
            "packageDocumentDetailList": {
              "$ref": "#/definitions/PackageDocumentDetailList"
            }
          },
          "required": [
            "packageDocumentDetail",
            "shipmentId"
          ]
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the DirectPurchase operation."
    },
    "GetShipmentDocumentsResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for GetShipmentDocuments operation.",
          "properties": {
            "shipmentId": {
              "$ref": "#/definitions/ShipmentId"
            },
            "packageDocumentDetail": {
              "$ref": "#/definitions/PackageDocumentDetail"
            }
          },
          "required": [
            "packageDocumentDetail",
            "shipmentId"
          ]
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the GetShipmentDocuments operation."
    },
    "GetTrackingResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for GetTracking operation.",
          "properties": {
            "trackingId": {
              "$ref": "#/definitions/TrackingId"
            },
            "eventHistory": {
              "type": "array",
              "description": "List of tracking events.",
              "items": {
                "$ref": "#/definitions/Event"
              }
            },
            "promisedDeliveryDate": {
              "type": "string",
              "format": "date-time",
              "description": "ISO 8601 standard date-time by when the shipment is promised to be delivered."
            },
            "summary": {
              "$ref": "#/definitions/TrackingSummary"
            }
          },
          "required": [
            "eventHistory",
            "promisedDeliveryDate",
            "summary",
            "trackingId"
          ]
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the GetTracking operation."
    },
    "PurchaseShipmentRequest": {
      "type": "object",
      "required": [
        "rateId",
        "requestToken",
        "requestedDocumentSpecification"
      ],
      "properties": {
        "requestToken": {
          "$ref": "#/definitions/RequestToken"
        },
        "rateId": {
          "$ref": "#/definitions/RateId"
        },
        "requestedDocumentSpecification": {
          "$ref": "#/definitions/RequestedDocumentSpecification"
        },
        "requestedValueAddedServices": {
          "$ref": "#/definitions/RequestedValueAddedServiceList"
        },
        "additionalInputs": {
          "type": "object",
          "additionalProperties" : true,
          "description": "Additional inputs required to purchase an offering. JSON should adhere to the json schema returned in GetAdditionalInputsResponse. Applicable only if 'requiresAdditionalInputs' field of GetRates response is true."
        }
      },
      "description": "The payload schema for the PurchaseShipment operation."
    },
    "PurchaseShipmentResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "The payload for PurchaseShipment operation.",
          "properties": {
            "shipmentId": {
              "$ref": "#/definitions/ShipmentId"
            },
            "packageDocumentDetails": {
              "$ref": "#/definitions/PackageDocumentDetailList"
            },
            "promise": {
              "$ref": "#/definitions/Promise"
            }
          },
          "required": [
            "packageDocumentDetails",
            "promise",
            "shipmentId"
          ]
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the PurchaseShipment operation."
    },
    "GetAdditionalInputsResponse": {
      "type": "object",
      "properties": {
        "payload": {
          "type": "object",
          "description": "JSON Schema for additional inputs required to purchase a shipping offering.",
          "additionalProperties": true
        },
        "errors": {
          "description": "Encountered errors for the operation.",
          "$ref": "#/definitions/ErrorList"
        }
      },
      "description": "The response schema for the GetAdditionalInputs operation."
    }
  }
}